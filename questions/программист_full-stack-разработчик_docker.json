{
    "category_full_form": "Программист_Full Stack разработчик_Docker",
    "category_human_form": "Full Stack разработчик_Docker",
    "category_filename_form": "программист_full-stack-разработчик_docker",
    "questions": [
        {
            "question": "Можно ли потерять данные, хранящиеся в контейнере?",
            "right_answer": "Любые данные, хранящиеся в контейнере, остаются там, пока вы не удалите контейнер."
        },
        {
            "question": "Что вы знаете о Docker system prune?",
            "right_answer": "Это команда, используемая для удаления всех остановленных контейнеров, неиспользуемых сетей, кэшей сборки и висячих образов. Prune - одна из самых полезных команд в Docker. Синтаксис: $ docker system prune"
        },
        {
            "question": "Можно ли реализовать непрерывную разработку (CD) и непрерывную интеграцию (CI) в Docker?",
            "right_answer": "Да, вы можете запустить Jenkins на Docker и использовать Docker Compose для запуска интеграционных тестов для непрерывной разработки (CD) и непрерывной интеграции (CI)."
        },
        {
            "question": "Покажите, как вы бы создали контейнер из образа.",
            "right_answer": "Для создания контейнера вы загружаете образ из репозитория Docker и запускаете его с помощью следующей команды: $ docker run -it -d <image_name>"
        },
        {
            "question": "Опишите жизненный цикл контейнера Docker.",
            "right_answer": "Обычно жизненный цикл контейнера Docker включает: Создание контейнера, Запуск контейнера, Приостановка контейнера, Возобновление контейнера, Запуск контейнера, Остановка контейнера, Перезапуск контейнера, Остановка контейнера, Уничтожение контейнера."
        },
        {
            "question": "Как найти сохраненные тома Docker?",
            "right_answer": "Используйте команду: /var/lib/docker/volumes"
        },
        {
            "question": "Почему кто-то должен использовать Docker? Что он предлагает?",
            "right_answer": "Docker дает пользователям много стимулов для принятия, такие как: эффективный и простой опыт начальной настройки, средства для подробного описания жизненного цикла приложения, простая конфигурация и плавное взаимодействие с Docker Compose, полная и подробная документация, возможность запуска на ПК или корпоративной ИТ-системе с равной легкостью."
        },
        {
            "question": "Как создать Docker swarm?",
            "right_answer": "Используйте следующую команду: docker swarm init –advertise-addr <manager IP>"
        },
        {
            "question": "Что включает в себя масштабирование контейнера Docker?",
            "right_answer": "Контейнеры Docker имеют потенциал быть масштабированы до любого необходимого уровня. Благодаря гибкости платформы, вы можете иметь от нескольких сотен до нескольких тысяч, до миллионов контейнеров, при условии, что все они имеют постоянный, неограниченный доступ к необходимой памяти и ОС."
        },
        {
            "question": "В чем разница между виртуализацией и контейнеризацией?",
            "right_answer": "Виртуализация - это абстрактная версия физической машины, в то время как контейнеризация - это абстрактная версия приложения."
        },
        {
            "question": "Какие наиболее заметные особенности Docker?",
            "right_answer": "Основные особенности Docker включают: Гибкость приложений, Продуктивность разработчиков, Простое моделирование, Операционная эффективность, Размещение и аффинность, Контроль версий."
        },
        {
            "question": "Объясните виртуализацию.",
            "right_answer": "Виртуализация - это способ использования программного обеспечения (например, гипервизора) для создания виртуальной версии ресурса, такого как сервер, хранилище данных или приложение. Виртуализация позволяет разделить систему на ряд отдельных секций, каждая из которых действует как отдельная индивидуальная система."
        },
        {
            "question": "Назовите основные команды Docker и их назначение.",
            "right_answer": "Самые важные команды Docker: Build, Commit, Create, Dockerd, Kill. Build создает файл образа Docker, Commit создает новый образ из изменений контейнера, Create создает новый контейнер, Dockerd запускает демон Docker, Kill уничтожает контейнер."
        },
        {
            "question": "Перечислите некоторые более продвинутые команды Docker и их назначение.",
            "right_answer": "Некоторые продвинутые команды включают: Docker info (отображает системную информацию), Docker pull (загружает образ), Docker stats (предоставляет информацию о контейнере), Docker images (показывает загруженные образы)."
        },
        {
            "question": "Есть ли у Docker какие-либо недостатки?",
            "right_answer": "Docker не идеален. У него есть свои недостатки, включая: отсутствие опции хранения, неидеальные варианты мониторинга, невозможность автоматического переназначения неактивных узлов, сложная настройка автоматического горизонтального масштабирования."
        }
    ]
}