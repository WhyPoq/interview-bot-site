{
    "category_full_form": "Программист_Full Stack разработчик_Docker",
    "category_human_form": "Full Stack разработчик_Docker",
    "category_filename_form": "программист_full-stack-разработчик_docker",
    "questions": [
        {
            "question": "Можно ли реализовать непрерывную разработку (CD) и непрерывную интеграцию (CI) в Docker?",
            "right_answer": "Да, вы можете запустить Jenkins на Docker и использовать Docker Compose для запуска интеграционных тестов для непрерывной разработки (CD) и непрерывной интеграции (CI)."
        },
        {
            "question": "Почему кто-то должен использовать Docker? Что он предлагает?",
            "right_answer": "Docker дает пользователям много стимулов для принятия, такие как: эффективный и простой опыт начальной настройки, средства для подробного описания жизненного цикла приложения, простая конфигурация и плавное взаимодействие с Docker Compose, полная и подробная документация, возможность запуска на ПК или корпоративной ИТ-системе с равной легкостью."
        },
        {
            "question": "Что такое метки объектов Docker?",
            "right_answer": "Метки - это механизм применения метаданных к объектам Docker, таким как контейнеры, образы, локальные демоны, сети, тома и узлы."
        },
        {
            "question": "В чем разница между виртуализацией и контейнеризацией?",
            "right_answer": "Виртуализация - это абстрактная версия физической машины, в то время как контейнеризация - это абстрактная версия приложения."
        },
        {
            "question": "Опишите жизненный цикл контейнера Docker.",
            "right_answer": "Обычно жизненный цикл контейнера Docker включает: Создание контейнера, Запуск контейнера, Приостановка контейнера, Возобновление контейнера, Запуск контейнера, Остановка контейнера, Перезапуск контейнера, Остановка контейнера, Уничтожение контейнера."
        },
        {
            "question": "Как вы бы перечислили все контейнеры, которые в данный момент запущены?",
            "right_answer": "Используйте команду: $ docker ps"
        },
        {
            "question": "Какие наиболее заметные особенности Docker?",
            "right_answer": "Основные особенности Docker включают: Гибкость приложений, Продуктивность разработчиков, Простое моделирование, Операционная эффективность, Размещение и аффинность, Контроль версий."
        },
        {
            "question": "Как найти сохраненные тома Docker?",
            "right_answer": "Используйте команду: /var/lib/docker/volumes"
        },
        {
            "question": "Есть ли у Docker какие-либо недостатки?",
            "right_answer": "Docker не идеален. У него есть свои недостатки, включая: отсутствие опции хранения, неидеальные варианты мониторинга, невозможность автоматического переназначения неактивных узлов, сложная настройка автоматического горизонтального масштабирования."
        },
        {
            "question": "Как создать Docker swarm?",
            "right_answer": "Используйте следующую команду: docker swarm init –advertise-addr <manager IP>"
        },
        {
            "question": "Как проверить версии Docker Client и Server?",
            "right_answer": "Эта команда даст вам всю необходимую информацию: $ docker version"
        },
        {
            "question": "Что такое Docker?",
            "right_answer": "Docker - это платформа контейнеризации с открытым исходным кодом. Она используется для автоматизации развертывания любого приложения с использованием легких, портативных контейнеров."
        },
        {
            "question": "Назовите основные команды Docker и их назначение.",
            "right_answer": "Самые важные команды Docker: Build, Commit, Create, Dockerd, Kill. Build создает файл образа Docker, Commit создает новый образ из изменений контейнера, Create создает новый контейнер, Dockerd запускает демон Docker, Kill уничтожает контейнер."
        },
        {
            "question": "Какой метод является лучшим для удаления контейнера: команда «остановить контейнер», за которой следует команда «удалить контейнер», или команда rm сама по себе?",
            "right_answer": "Сначала остановите контейнер, затем удалите его. Вот как: $ docker stop <container_id> $ docker rm -f <container_id>"
        },
        {
            "question": "Назовите и объясните различные компоненты Docker.",
            "right_answer": "Три основных компонента Docker: Docker Client, Docker Host, Registry. Docker Client выполняет операции Docker build pull и run. Docker Host содержит Docker демон, контейнеры и образы. Реестр - это место, где хранятся образы Docker."
        }
    ]
}