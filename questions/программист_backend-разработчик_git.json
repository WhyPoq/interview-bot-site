{
    "category_full_form": "Программист_Backend разработчик_Git",
    "category_human_form": "Backend разработчик_Git",
    "category_filename_form": "программист_backend-разработчик_git",
    "questions": [
        {
            "question": "Как игнорировать изменения в отслеживаемом файле?",
            "right_answer": "Используйте `git update-index --assume-unchanged <file>` для временного игнорирования изменений в отслеживаемом файле."
        },
        {
            "question": "Что такое файл `.gitignore`?",
            "right_answer": "Файл `.gitignore` - это текстовый документ, указывающий Git, какие файлы или каталоги исключить из проекта. Обычно это включает файлы, созданные во время фазы сборки, локальные файлы настройки или файлы с конфиденциальными данными."
        },
        {
            "question": "Как скопировать коммит из одной ветки в другую?",
            "right_answer": "Используйте `git cherry-pick <commit-hash>` для применения изменений из коммита из другой ветки в текущую ветку."
        },
        {
            "question": "Как отменить коммит, который уже был отправлен и сделан публичным?",
            "right_answer": "Чтобы отменить изменения, внесенные предыдущим коммитом, обеспечивая безопасность для публичных коммитов, используйте `git revert <commit_hash>`, который генерирует новый коммит, отменяющий ранее внесенные изменения. С другой стороны, `git reset` позволяет вернуться к предыдущему состоянию; однако будьте осторожны при его применении к публичным коммитам, так как это изменяет историю коммитов."
        },
        {
            "question": "В чем разница между `HEAD`, `рабочим деревом` и `индексом` в Git?",
            "right_answer": "`HEAD` относится к последнему коммиту в текущей ветке, `рабочее дерево` - это набор файлов в вашем каталоге, а `индекс` (или область подготовки) - это область подготовки для коммитов."
        },
        {
            "question": "Как переименовать ветку Git?",
            "right_answer": "Чтобы переименовать текущую ветку, используйте `git branch -m <new_name>`. Чтобы переименовать другую ветку, используйте `git branch -m <old_name> <new_name>`."
        },
        {
            "question": "Что такое `git reset --soft`?",
            "right_answer": "`git reset --soft <commit-hash>` отменяет коммиты, но оставляет изменения в области подготовки (staging area)."
        },
        {
            "question": "В чем разница между `git merge` и `git rebase`?",
            "right_answer": "Основное различие заключается в том, как представлена история ветки. `git merge` сохраняет историю ветки функции, создавая новый слияние коммит. `git rebase` переписывает историю ветки функции так, чтобы она выглядела так, будто она была разработана из последней основной ветки, создавая линейную историю."
        },
        {
            "question": "Как изменить сообщение коммита?",
            "right_answer": "Используйте `git commit --amend` для изменения сообщения вашего последнего коммита."
        },
        {
            "question": "Что такое `git diff`?",
            "right_answer": "`git diff` показывает различия между файлами в рабочем каталоге и индексом, или между коммитами."
        },
        {
            "question": "Что такое коммит в Git?",
            "right_answer": "В Git коммит - это процесс, который записывает версию на данный момент подготовленных изменений проекта. Эта запись включает в себя детали внесенных изменений, уникальный идентификатор (хэш SHA-1), идентификатор создателя и временную метку коммита."
        },
        {
            "question": "Как просмотреть историю коммитов?",
            "right_answer": "Используйте `git log` для просмотра истории коммитов. Есть много опций для настройки вывода, например, `git log --oneline` для краткого просмотра."
        },
        {
            "question": "Как удалить файл из Git, не удаляя его из файловой системы?",
            "right_answer": "Используйте `git rm --cached <file_name>` для удаления файла из Git без удаления его из файловой системы."
        },
        {
            "question": "Как вы перечислите все настроенные удаленные репозитории?",
            "right_answer": "Используйте `git remote -v`, чтобы перечислить все настроенные удаленные репозитории для вашего локального репозитория."
        },
        {
            "question": "Что такое конфликт в Git?",
            "right_answer": "Конфликт в Git возникает, когда две ветки внесли изменения в одну и ту же строку в файле или когда одна ветка удаляет файл, в то время как другая ветка его изменяет. Git не может автоматически разрешить эти изменения; разработчик должен вручную разрешить конфликты."
        }
    ]
}