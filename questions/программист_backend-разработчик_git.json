{
    "category_full_form": "Программист_Backend разработчик_Git",
    "category_human_form": "Backend разработчик_Git",
    "category_filename_form": "программист_backend-разработчик_git",
    "questions": [
        {
            "question": "Как найти список файлов, которые изменились в определенном коммите?",
            "right_answer": "Используйте `git show --name-only <commit-hash>` для отображения списка файлов, которые изменились в коммите."
        },
        {
            "question": "Как вы перечислите все удаленные ветки?",
            "right_answer": "Используйте `git branch -r` для перечисления всех удаленных веток."
        },
        {
            "question": "Как объединить несколько коммитов в один без слияния?",
            "right_answer": "Используйте `git rebase --interactive`, чтобы объединить коммиты в один без создания слияния."
        },
        {
            "question": "Как очистить неотслеживаемые файлы из вашего рабочего каталога?",
            "right_answer": "Используйте `git clean` для удаления неотслеживаемых файлов из вашего рабочего каталога."
        },
        {
            "question": "Какова цель `git log --graph`?",
            "right_answer": "`git log --graph` отображает историю коммитов в графическом представлении."
        },
        {
            "question": "Что такое `git reflog`?",
            "right_answer": "`git reflog` показывает журнал перемещений указателей HEAD и веток, позволяя вам вернуться к предыдущим состояниям."
        },
        {
            "question": "Что такое `git push`?",
            "right_answer": "`git push` используется для загрузки содержимого локального репозитория в удаленный репозиторий. Он передает коммиты из вашего локального репо на удаленный."
        },
        {
            "question": "Как настроить Git, чтобы игнорировать изменения в правах доступа к файлам?",
            "right_answer": "Используйте `git config core.fileMode false`, чтобы игнорировать изменения в правах доступа к файлам."
        },
        {
            "question": "Какова цель `git gc` (сборщика мусора)?",
            "right_answer": "`git gc` удаляет ненужные файлы и оптимизирует локальный репозиторий."
        },
        {
            "question": "Что такое `git reset --soft`?",
            "right_answer": "`git reset --soft <commit-hash>` отменяет коммиты, но оставляет изменения в области подготовки (staging area)."
        },
        {
            "question": "Что такое быстрое объединение (fast-forward merge) в Git?",
            "right_answer": "Быстрое объединение происходит, когда конечная точка целевой ветки отстает от конечной точки объединенной ветки, позволяя целевой ветке 'догнать' за счет простого перемещения вперед к конечной точке объединенной ветки."
        },
        {
            "question": "Как удалить ветку?",
            "right_answer": "Используйте `git branch -d <branch_name>` для удаления локальной ветки. Если ветка не полностью слита, возможно, вам придется использовать `-D`. Чтобы удалить удаленную ветку, используйте `git push <remote_name> --delete <branch_name>`."
        },
        {
            "question": "Что такое `git checkout`?",
            "right_answer": "`git checkout` позволяет перемещаться между различными ветками или возвращать файлы рабочего дерева к предыдущему состоянию. Однако, в последних версиях Git рекомендуется использовать `git switch` для смены веток и `git restore` для возврата файлов, каждая из которых предназначена для выполнения конкретных функций."
        },
        {
            "question": "Как просмотреть историю коммитов?",
            "right_answer": "Используйте `git log` для просмотра истории коммитов. Есть много опций для настройки вывода, например, `git log --oneline` для краткого просмотра."
        },
        {
            "question": "В чем разница между `git merge` и `git rebase`?",
            "right_answer": "Основное различие заключается в том, как представлена история ветки. `git merge` сохраняет историю ветки функции, создавая новый слияние коммит. `git rebase` переписывает историю ветки функции так, чтобы она выглядела так, будто она была разработана из последней основной ветки, создавая линейную историю."
        }
    ]
}