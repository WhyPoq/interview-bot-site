{
    "category_full_form": "Программист_Мобильный разработчик_Android_Kotlin",
    "category_human_form": "Мобильный разработчик_Kotlin",
    "category_filename_form": "программист_мобильный-разработчик_android_kotlin",
    "questions": [
        {
            "question": "Что такое корутины в Kotlin?",
            "right_answer": "Корутины в Kotlin - это шаблон конкурентности, который позволяет эффективно и структурированно выполнять асинхронное программирование. Они предоставляют способ написания асинхронного кода, который выглядит как последовательный код, что упрощает его понимание и поддержку. Корутины могут приостанавливать выполнение без блокировки потока, что позволяет выполнять неблокирующие операции ввода-вывода и параллельные вычисления. Они предназначены для обработки асинхронных задач структурированным и последовательным образом."
        },
        {
            "question": "Что такое оператор Элвис в Kotlin?",
            "right_answer": "Оператор Элвис (?:) - это краткая нотация в Kotlin, которая предоставляет значение по умолчанию при доступе к объекту, который может быть null. Он полезен в ситуациях, когда вы хотите присвоить значение по умолчанию, если объект null."
        },
        {
            "question": "Объясните концепцию делегирования свойств в Kotlin.",
            "right_answer": "Делегирование свойств в Kotlin позволяет делегировать реализацию доступа к свойствам другому объекту, называемому делегатом. Это помогает уменьшить повторяющийся код и предоставляет способ настройки поведения доступа к свойствам. Чтобы использовать делегирование свойств, необходимо определить свойство с ключевым словом by, за которым следует объект-делегат."
        },
        {
            "question": "Объясните Kotlin Type-Safe Builders.",
            "right_answer": "Type-Safe Builders используют выразительный синтаксис Kotlin, используя расширенные функции и лямбда-выражения для создания языков специального назначения (DSL). Эти строители обеспечивают безопасность времени компиляции, позволяя разработчикам создавать DSL, которые не только кратки, но и гарантируют правильность и читаемость."
        },
        {
            "question": "Объясните концепцию обобщений в Kotlin.",
            "right_answer": "Обобщения в Kotlin позволяют вам определять классы, интерфейсы и функции, которые могут работать с различными типами. Они обеспечивают безопасность типов и повторное использование кода, позволяя вам писать обобщенный код, который работает с различными типами данных. Вы можете объявлять обобщенные типы, используя угловые скобки (< >) и указывать параметр типа."
        },
        {
            "question": "Что такое Kotlin Contracts и как они улучшают оптимизацию кода?",
            "right_answer": "Kotlin Contracts - это аннотации, которые разработчики могут использовать, чтобы предоставить дополнительную информацию компилятору о предполагаемом поведении функций. Указывая контракты, разработчики могут направлять компилятор на принятие более обоснованных решений во время оптимизации, что может привести к более эффективному и производительному коду."
        },
        {
            "question": "Объясните комбинацию запечатанных классов и выражения when в Kotlin.",
            "right_answer": "Запечатанные классы и комбинация выражения when в Kotlin часто используются вместе для исчерпывающего сопоставления шаблонов. Запечатанные классы используются для определения ограниченной иерархии классов, а выражение when может проверить все возможные подклассы запечатанного класса. Эта комбинация гарантирует, что все случаи рассмотрены и другие подклассы не могут быть добавлены."
        },
        {
            "question": "Какова цель функции области также в Kotlin?",
            "right_answer": "Функция области также в Kotlin используется для применения дополнительных операций к объекту в указанной области. Она позволяет выполнять действия с объектом и затем возвращать сам объект. Основная цель функции also - обеспечить цепочку операций с объектом и выполнять побочные эффекты, сохраняя объект в качестве результата."
        },
        {
            "question": "Для чего используется функция requireNotNull в Kotlin?",
            "right_answer": "Функция requireNotNull в Kotlin используется для проверки того, что заданное значение не является нулевым. Она выбрасывает IllegalArgumentException, если значение является нулевым, и возвращает ненулевое значение в противном случае. Часто используется для обеспечения того, что требуемое значение не является нулевым, а также для предоставления содержательных сообщений об ошибках в случае нулевых значений."
        },
        {
            "question": "Какова цель аннотации @JvmName в Kotlin?",
            "right_answer": "Аннотация @JvmName в Kotlin используется для указания имени сгенерированного метода или класса Java при компиляции кода Kotlin в байт-код Java. Она позволяет контролировать именование сгенерированных артефактов Java, чтобы обеспечить совместимость с существующим кодом Java или фреймворками, которые полагаются на определенные соглашения об именовании."
        },
        {
            "question": "Какова цель модификатора const в Kotlin?",
            "right_answer": "Модификатор const в Kotlin используется для объявления констант времени компиляции. Он позволяет определить значения, которые известны на этапе компиляции и не могут быть изменены во время выполнения. Свойства const должны иметь примитивный тип или тип String. Они разрешаются на этапе компиляции и могут использоваться в аннотациях и других конструкциях времени компиляции."
        },
        {
            "question": "Объясните вывод типов в Kotlin.",
            "right_answer": "Вывод типов в Kotlin позволяет компилятору автоматически определить тип переменной на основе ее начального значения. Каждый раз, когда вы используете переменную, вам не нужно явно указывать ее тип."
        },
        {
            "question": "Объясните концепцию деструктивного объявления в Kotlin.",
            "right_answer": "Деструктивные объявления в Kotlin позволяют извлекать несколько значений из объекта или структуры данных и присваивать их отдельным переменным. Это упрощает процесс извлечения и использования конкретных элементов из сложных объектов. Деструктивные объявления обычно используются с классами данных, массивами и другими структурами, которые предоставляют компонентные функции."
        },
        {
            "question": "Как создать пустой список в Kotlin?",
            "right_answer": "В Kotlin вы можете создать пустой список, используя функцию listOf() без аргументов. Это создает список с нулевым количеством элементов."
        },
        {
            "question": "Объясните концепцию функций расширения высшего порядка в Kotlin.",
            "right_answer": "Функции расширения высшего порядка в Kotlin позволяют расширять функциональность существующих классов, добавляя новые функции к ним. Эти функции могут принимать другие функции (функции высшего порядка) в качестве параметров или возвращать функции в качестве результатов. Эта концепция использует мощь функций высшего порядка и гибкость функций расширения для создания более выразительного и краткого кода."
        }
    ]
}