{
    "category_full_form": "Программист_Мобильный разработчик_iOS_iOS разработка",
    "category_human_form": "Мобильный разработчик_iOS",
    "category_filename_form": "программист_мобильный-разработчик_ios_ios-разработка",
    "questions": [
        {
            "question": "Какова цель reuseIdentifier? Какая польза от установки его в ненулевое значение?",
            "right_answer": "reuseIdentifier используется для группировки похожих строк в UITableView, т.е. строк, которые отличаются только своим содержимым, но имеют похожий макет. UITableView обычно выделяет достаточно объектов UITableViewCell для отображения видимого содержимого в таблице. Если reuseIdentifier установлен в ненулевое значение, то UITableView сначала попытается повторно использовать уже выделенный объект UITableViewCell с тем же reuseIdentifier при прокрутке таблицы. Если reuseIdentifier не установлен, то UITableView будет вынужден выделять новые объекты UITableViewCell для каждого нового элемента, который появляется в виде, что может привести к тормозящим анимациям."
        },
        {
            "question": "Укажите несколько ключевых особенностей платформы iOS.",
            "right_answer": "Ключевые особенности платформы iOS следующие: Возможности многозадачности, iCloud используется для хранения данных в облаке, к которым можно получить доступ с любого другого устройства Apple, на котором вошли в систему под своим ID, iOS - закрытая система, что означает, что исходный код приложений Apple недоступен для разработчиков, Беспрепятственная интеграция с другими устройствами Apple."
        },
        {
            "question": "Объясните термин ARC.",
            "right_answer": "ARC означает автоматическое подсчет ссылок. Он используется для управления использованием памяти приложения путем инициализации и деинициализации использования памяти."
        },
        {
            "question": "Какой JSON-фреймворк поддерживается iOS (iPhone OS)?",
            "right_answer": "Фреймворк SBJson поддерживается iOS. Это парсер и генератор JSON для Objective-C. SBJson предоставляет гибкие API и дополнительное управление, что облегчает обработку JSON."
        },
        {
            "question": "Что такое абстрактный класс в Cocoa?",
            "right_answer": "В Cocoa нет ничего под названием абстрактный. Можно создать абстрактный класс, который проверяется только во время выполнения, в то время как он не проверяется во время компиляции."
        },
        {
            "question": "Каково различие между strong, weak, read-only и copy?",
            "right_answer": "Strong: На протяжении жизни объекта счетчик ссылок будет увеличиваться, и ссылка будет поддерживаться. Weak: Можно сказать, что это не сильная ссылка, что означает, что мы обращаемся к объекту, но не увеличиваем его счетчик ссылок. Часто используется для установления отношения родитель-ребенок. У родителя сильная связь с младенцем, но у ребенка только небольшая связь с родителем. Read-only: Изначально свойство будет установлено и не может быть изменено. Copy: Это означает, что при создании объекта мы копируем его значение. Также предотвращает изменение его значения."
        },
        {
            "question": "Определите принципы SOLID в разработке под iOS",
            "right_answer": "Принципы SOLID позволяют разработчикам создавать поддерживаемые и масштабируемые программные приложения, следуя набору принципов проектирования. В контексте разработки под iOS эти принципы позволяют создавать чистый и надежный код. Давайте кратко рассмотрим каждый принцип SOLID: Согласно принципу единственной ответственности (SRP), каждый класс или модуль должен иметь одну цель или обязанность. Этот принцип способствует модульности и улучшает понимание кода, тестирование и обслуживание. Сущности программного обеспечения должны, согласно принципу открытости/закрытости (OCP), быть открыты для расширения, но закрыты для изменения. Он призывает проектировать код таким образом, чтобы новую функциональность можно было добавить, не изменяя существующий код. Этот принцип способствует повторному использованию кода, масштабируемости и минимизации риска введения ошибок. Принцип подстановки Барбары Лисков (LSP) подчеркивает, что подтипы должны быть способны заменять свои базовые типы, не нарушая корректность программы. Проще говоря, объект, принадлежащий суперклассу, должен быть заменяем объектом, принадлежащим одному из его подклассов, без создания проблем или отклонения от ожидаемого поведения. Этот принцип обеспечивает хорошо спроектированные иерархии наследования, соответствующие отношению «является». Принцип разделения интерфейса (ISP) утверждает, что клиенты не должны быть вынуждены зависеть от интерфейсов, которые они не используют. Он рекомендует проектировать интерфейсы, адаптированные к конкретным потребностям клиентов, предотвращая реализацию ненужных методов. Поддерживая интерфейсы сосредоточенными и краткими, этот принцип способствует слабой связанности и облегчает обслуживание. Согласно принципу инверсии зависимостей (DIP), модули высокого уровня должны зависеть от абстракций, а не от модулей низкого уровня. Этот принцип подчеркивает использование абстракций (интерфейсов или протоколов) для разделения высокоуровневых и низкоуровневых модулей. Он способствует внедрению зависимостей и инверсии управления и облегчает тестирование и гибкость в проектировании кода. Соблюдая принципы SOLID в разработке под iOS, разработчики могут создавать код, который более читаем, понятен и поддерживаем. Такой подход способствует разработке модульных, гибких и расширяемых приложений, снижает риск возникновения ошибок и облегчает сотрудничество между членами команды."
        },
        {
            "question": "Что такое QOS?",
            "right_answer": "QoS означает качество обслуживания. Это класс, который организует работу артефактов NSOperation, NSOperationQueue, NSThread, диспетчеризации очередей и потоков (потоки POSIX). Назначая QoS, вы сообщаете системе, насколько это важно, и система соответственно устанавливает приоритеты и планирует его."
        },
        {
            "question": "Опишите класс NSURLConnection. Опишите его категории и сценарии использования.",
            "right_answer": "Существует два способа использования класса NSURLConnection. Один из них - асинхронный, а другой - синхронный. Асинхронное соединение создаст новый поток и выполнит процесс загрузки на новом потоке. Синхронное соединение заблокирует вызывающий поток во время загрузки содержимого и выполнения связанных операций. Многие разработчики считают, что синхронное соединение блокирует только главный поток, что не так. Синхронное соединение всегда будет блокировать поток, из которого оно было запущено. Если мы запускаем синхронное соединение из главного потока, главный поток будет заблокирован. Однако, если мы запускаем синхронное соединение из потока, отличного от главного, это будет похоже на асинхронное соединение и не будет блокировать наш главный поток. Фактически, единственное различие между синхронными и асинхронными соединениями заключается в том, что во время выполнения будет создан поток для асинхронного соединения, в то время как это не произойдет для синхронного соединения. Для создания асинхронного соединения нам необходимо: Иметь наш URL в экземпляре NSString Преобразовать нашу строку в экземпляр NSURL Поместить наш URL в запрос URL типа NSURLRequest или, в случае изменяемых URL, в экземпляр NSMutableURLRequest Создать экземпляр NSURLConnection и передать ему запрос URL"
        },
        {
            "question": "Укажите различные способы достижения параллелизма в iOS?",
            "right_answer": "В основном, существует 3 способа достижения параллелизма в iOS. Это: Grand Central Dispatch, OperationQueue, Threads"
        },
        {
            "question": "Существуют ли приватные методы в Objective-C?",
            "right_answer": "Да, Objective-C содержит приватные методы. Приватные методы - это методы, которые доступны только в пределах класса, в котором они определены, и не видны другим классам или объектам. Они могут использоваться для инкапсуляции деталей реализации и предотвращения доступа или изменения из внешнего кода."
        },
        {
            "question": "Что такое метод swizzling?",
            "right_answer": "Метод swizzling - это техника в разработке под iOS, которая позволяет вам изменить реализацию метода во время выполнения. Она включает в себя замену реализации одного метода другим, обычно внутри класса или его подклассов. С помощью метода swizzling вы можете изменить поведение существующих методов, не изменяя их оригинальную реализацию напрямую. Эта техника часто используется для добавления функциональности, переопределения поведения или перехвата вызовов методов в приложениях для iOS."
        },
        {
            "question": "Какие существуют варианты реализации iOS для постоянного хранения и хранения данных?",
            "right_answer": "Постоянное хранение данных предполагает хранение данных на диске таким образом, что позволяет извлекать их без изменений при повторном открытии приложения. Существует различные методы хранения данных, начиная от простых до сложных: Хранение данных с использованием структур данных, таких как массивы, словари, множества и другие аналогичные структуры, является отличным вариантом для промежуточного хранения. NSUserDefaults и Keychains служат в качестве простых хранилищ ключ-значение. Однако NSUserDefaults считается небезопасным, в то время как Keychains обеспечивает безопасное хранение. NSFileManager позволяет хранить и извлекать данные (сериализованные или нет) на диске через файловое или дисковое хранилище. Реляционные базы данных, такие как SQLite, предлагают надежное решение для реализации сложных механизмов запросов."
        },
        {
            "question": "Каковы преимущества Swift?",
            "right_answer": "Основные преимущества Swift перечислены ниже: Легко читаемый, Легко поддерживаемый, Очень быстрый, Динамические библиотеки, Безопасный язык программирования, Эффективное управление памятью, Краткий код"
        },
        {
            "question": "Что такое SpriteKit и что такое SceneKit?",
            "right_answer": "SpriteKit - это платформа для быстрого и простого создания анимированных 2D объектов. SceneKit - это платформа для визуализации 3D графики, унаследованная от OS X."
        }
    ]
}