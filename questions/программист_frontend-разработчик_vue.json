{
    "category_full_form": "Программист_Frontend разработчик_Vue",
    "category_human_form": "Frontend разработчик_Vue",
    "category_filename_form": "программист_frontend-разработчик_vue",
    "questions": [
        {
            "question": "Как вы работаете с препроцессорами, используя загрузчик vue?",
            "right_answer": "Vue-loader автоматически определит правильные загрузчики для использования на основе атрибута lang блока языка и правил, определенных в конфигурации webpack. Вы можете использовать препроцессоры, такие как SASS, LESS, Stylus и PostCSS, используя загрузчик vuejs."
        },
        {
            "question": "Объясните структуру createElement с аргументами?",
            "right_answer": "Функция createElement принимает несколько аргументов для использования всех функций шаблона."
        },
        {
            "question": "Как можно объединить локальные вычисляемые свойства с помощью вспомогательной функции mapState?",
            "right_answer": "Вы можете использовать синтаксис оператора распространения объекта для объединения вспомогательной функции mapState (которая возвращает объект) с другими локальными вычисляемыми свойствами. Таким образом, упрощаются техники слияния с использованием утилит."
        },
        {
            "question": "Какие существуют методы обнаружения массива, не изменяющие его?",
            "right_answer": "Методы, которые не изменяют исходный массив, а всегда возвращают новый массив, называются методами без мутации. Ниже приведен список методов без мутации: filter(), concat(), slice()."
        },
        {
            "question": "Что такое плагин vuex?",
            "right_answer": "Плагин vuex - это опция, которая предоставляет хуки для каждой мутации. Это обычная функция, которая принимает хранилище в качестве единственного аргумента. Вы можете создать свой собственный плагин или использовать встроенные плагины."
        },
        {
            "question": "Как вы реализуете локализацию чисел?",
            "right_answer": "Вы можете локализовать число с помощью форматов определения (например, валюта и т. д.)"
        },
        {
            "question": "Что такое vuetify?",
            "right_answer": "Vuetify - это семантический компонентный материальный фреймворк для Vue. Он стремится предоставить чистые, семантические и многократно используемые компоненты, которые облегчают создание приложений."
        },
        {
            "question": "Какой лучший способ повторного рендеринга компонента?",
            "right_answer": "Лучший способ заставить Vue повторно отрисовать компонент - установить :key на компоненте. То есть, когда нужно повторно отрисовать компонент, просто измените значение ключа, и Vue повторно отрисует компонент."
        },
        {
            "question": "Что такое однофайловые компоненты?",
            "right_answer": "Однофайловые компоненты - это простая концепция. Раньше вы могли слышать, что все три части (HTML, JavaScript и CSS) вашего приложения хранятся в разных компонентах. Но однофайловые компоненты объединяют структуру, стили и поведение в один файл. В начале может показаться странным иметь все три части в одном файле, но на самом деле это имеет гораздо больший смысл."
        },
        {
            "question": "Как осуществляется изменение локали?",
            "right_answer": "Все дочерние компоненты корневого экземпляра локализуются с использованием свойства locale класса VueI18n. Вы можете изменить значение свойства locale экземпляра VueI18n как показано ниже..."
        },
        {
            "question": "Какова цель строгого режима в vuex?",
            "right_answer": "В строгом режиме, при каждом изменении состояния Vuex вне обработчиков мутаций будет сгенерирована ошибка. Это гарантирует, что все изменения состояния могут быть явно отслежены средствами отладки. Просто включите это, передав strict: true при создании хранилища vuex."
        },
        {
            "question": "Что такое пользовательские блоки?",
            "right_answer": "Вы можете определить пользовательские языковые блоки внутри файлов *.vue на основе атрибута lang блока, имени тега блока и правил в вашем конфигурационном файле webpack. Вы также можете использовать resourceQuery для сопоставления правила с пользовательским блоком без lang."
        },
        {
            "question": "Что такое горячая перезагрузка в vue loader?",
            "right_answer": "Горячая перезагрузка не заключается в перезагрузке страницы при редактировании любого файла .vue. Вместо этого, при редактировании файла *.vue все экземпляры этого компонента будут заменены без перезагрузки страницы. Это улучшает опыт разработки при настройке шаблонов или стилей ваших компонентов."
        },
        {
            "question": "Что такое правила преобразования URL-адресов ресурсов?",
            "right_answer": "Ниже приведен список правил преобразования URL-адресов ресурсов\n\nАбсолютный путь: Если URL-адрес является абсолютным путем (например, /images/loader.png), то он будет сохранен как есть.\nОтносительный путь: Если URL-адрес начинается с . (например, ./images/loader.png), то он будет интерпретирован как относительный запрос модуля и разрешен на основе структуры папок на вашем файловой системе.\nURL-адреса, начинающиеся с символа ~: Если URL-адрес начинается с символа ~ (например, ./some-node-package/loader.png), то он интерпретируется как запрос модуля. Таким образом, он может ссылаться на ресурсы внутри узловых модулей.\nURL-адреса, начинающиеся с символа @: Если URL-адрес начинается с символа @, то он интерпретируется как запрос модуля. Это полезно, если ваша конфигурация webpack имеет псевдоним для @, который по умолчанию указывает на путь /src."
        },
        {
            "question": "Как я могу использовать импортированную константу в разделе шаблона?",
            "right_answer": "Переменные должны быть представлены в ваших данных, чтобы использовать их в разделе шаблона. То есть, вы не можете использовать их напрямую в шаблоне."
        }
    ]
}