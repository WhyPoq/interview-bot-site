{
    "category_full_form": "Программист_Мобильный разработчик_iOS_Objective-C",
    "category_human_form": "Мобильный разработчик_Objective-C",
    "category_filename_form": "программист_мобильный-разработчик_ios_objective-c",
    "questions": [
        {
            "question": "Что такое ООП?",
            "right_answer": "ООП означает объектно-ориентированное программирование; это тип программной техники, которая помогает управлять набором объектов в системе. С помощью различных языков программирования этот метод помогает разрабатывать несколько компьютерных программ и приложений."
        },
        {
            "question": "Как вызвать функцию в Objective-C?",
            "right_answer": "вызов метода выглядит так\n\n[className methodName]\n\nоднако, если вы хотите вызвать метод в том же классе, вы можете использовать self\n\n[self methodName]"
        },
        {
            "question": "Объясните определение класса в Objective-C?",
            "right_answer": "Определение класса начинается с ключевого слова @interface, за которым следует имя интерфейса (класса), и тело класса, закрытое парой фигурных скобок. В Objective-C все классы извлекаются из базового класса с именем NSObject. Он предоставляет основные методы, такие как выделение памяти и инициализация."
        },
        {
            "question": "Что произойдет, если мы отправим любое сообщение объекту, который был освобожден?",
            "right_answer": "Вызов release для объекта не обязательно означает, что он будет освобожден. Это просто уменьшает счетчик удержания объекта. Объект будет освобожден только когда счетчик удержания достигнет 0 (и даже тогда объект может находиться в пуле автовысвобождения и все еще не быть освобожденным). Таким образом, вы можете освободить объект, но все еще иметь ссылку на него. Затем он может быть автоматически освобожден. И затем вы отправляете ему сообщение - но, возможно, объект уже является мусором."
        },
        {
            "question": "Что синтезируется в Objective-C?",
            "right_answer": "После объявления свойства в Objective-C, вы должны немедленно сообщить компилятору, используя директиву синтеза. Это скажет компилятору сгенерировать сообщение getter&setter."
        },
        {
            "question": "Объясните типы протоколов в Objective-C?",
            "right_answer": "Формальный протокол объявляет список методов, которые ожидается, что клиентские классы реализуют. Формальные протоколы имеют свои собственные синтаксис объявления, принятия и проверки типов. Вы можете указать методы, реализация которых обязательна или необязательна с помощью ключевых слов @required и @optional. Подклассы наследуют формальные протоколы, принятые их предками. Формальный протокол также может принимать другие протоколы. Формальные протоколы являются расширением языка Objective-C. Неформальный протокол - это категория на NSObject, что неявно делает почти все объекты принимателями протокола. Реализация методов в неформальном протоколе является необязательной. Перед вызовом метода вызывающий объект проверяет, реализует ли целевой объект его. До введения необязательных методов протокола в Objective-C 2.0, неформальные протоколы были неотъемлемой частью того, как классы Foundation и AppKit реализовывали делегирование."
        },
        {
            "question": "В чем разница между #import и #include?",
            "right_answer": "Функция import гарантирует, что файл включается только один раз, чтобы избежать проблем с рекурсивным включением. import является надмножеством include и гарантирует, что файл включается только один раз."
        },
        {
            "question": "Что такое делегат? Могут ли делегаты быть удержаны?",
            "right_answer": "Делегат - это объект, который действует от имени или в согласовании с другим объектом, когда этот объект сталкивается с событием в программе. Это зависит от вас. Если вы объявите его как удерживаемый (сильный в ARC), он будет удержан. Правило заключается в том, чтобы не удерживать его, потому что он уже удерживается в другом месте, и, что более важно, вы избежите циклов удержания."
        },
        {
            "question": "Что такое блоки Objective-C?",
            "right_answer": "В классе Objective-C есть объект, который объединяет данные с соответствующим поведением. Он позволяет создавать отдельные сегменты кода, которые могут передаваться в функции или методы, как если бы они были значениями. Блоки Objective-C могут быть добавлены в коллекции, такие как NSDictionary или NSArray."
        },
        {
            "question": "Что такое одиночное наследование в Objective-C?",
            "right_answer": "Подкласс objective-c может быть получен только от одного прямого родительского класса, этот концепт известен как 'одиночное наследование'."
        },
        {
            "question": "Что такое точечная нотация?",
            "right_answer": "Точечная нотация включает в себя оценку переменной экземпляра путем определения класса «экземпляра», за которым следует «точка», а затем имя переменной экземпляра или свойства, к которому нужно получить доступ."
        },
        {
            "question": "Что такое GrandcentralDispatch? Каковы его преимущества по сравнению с NSThread?",
            "right_answer": "GrandcentralDispatch - это технология, разработанная Apple. Это реализация параллелизма задач на основе шаблона пула потоков, предназначенная для оптимизации поддержки приложений для систем с многоядерными процессорами и другими системами с симметричным мультипроцессорным устройством. GCD не обязательно обеспечивает лучшую производительность по сравнению с потоками, но разработчику не нужно думать о создании потоков или сопоставлении количества доступных потоков с количеством доступных процессоров. Можно создавать множество меньших задач, которые будут выполняться по мере освобождения процессора, и система сама распределяет эти задачи для вас."
        },
        {
            "question": "Какие преимущества использования сессии?",
            "right_answer": "Существует множество преимуществ использования сессии, как указано ниже:\n\n- Она используется для хранения данных пользователя на протяжении всего приложения.\n- Очень легко реализовать и хранить любой тип объекта в программе.\n- Отдельные сущности данных пользователя могут быть хранены отдельно при необходимости.\n- Сессия безопасна, и объекты хранятся на сервере времени выполнения."
        },
        {
            "question": "Что такое парсинг? Укажите, какой класс можно использовать для парсинга XML на iPhone?",
            "right_answer": "Парсинг - это процесс доступа к данным в элементе XML. Мы можем использовать класс 'NSXML' парсера для парсинга XML на iPhone."
        },
        {
            "question": "Поддерживает ли Objective-C перегрузку функций?",
            "right_answer": "Objective-C не поддерживает перегрузку методов, поэтому вам придется использовать разные имена методов."
        }
    ]
}