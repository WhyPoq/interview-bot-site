{
    "category_full_form": "Программист_Мобильный разработчик_iOS_Objective-C",
    "category_human_form": "Мобильный разработчик_Objective-C",
    "category_filename_form": "программист_мобильный-разработчик_ios_objective-c",
    "questions": [
        {
            "question": "Объясните, когда используется NSArray вместо NSSet.",
            "right_answer": "NSArray быстрее, чем NSSet, для хранения и итерации, поэтому NSArray предпочтительнее, чем NSSet. Однако NSArray следует избегать при проверке на включение. Множества используют хэш-значения для поиска элементов, в то время как массивы перебирают свое содержимое для поиска объекта. Если вам нужны итерация и проверка, выберите NSSet. Но если вы планируете сохранить упорядоченную коллекцию и проверить включение, сохраните две коллекции, NSArray и NSSet, с теми же объектами."
        },
        {
            "question": "Как представлен класс 'IMPLEMENTATION' в Objective-C?",
            "right_answer": "В Objective-C класс 'IMPLEMENTATION' представлен директивой @implementation и заканчивается @end."
        },
        {
            "question": "Что такое расширение класса? Зачем нам они нужны?",
            "right_answer": "Objective-C позволяет добавлять собственные методы к существующим классам с помощью категорий и расширений классов. Расширения классов расширяют внутреннюю реализацию."
        },
        {
            "question": "Какова основная разница между вызовами функций и сообщениями?",
            "right_answer": "Основное различие между вызовом функции и сообщением заключается в том, что функция и ее аргументы связаны в скомпилированном коде, в то время как сообщение и объект-получатель не связаны до тех пор, пока программа не начнет выполняться и сообщение не будет отправлено."
        },
        {
            "question": "Каковы основные преимущества Objective-C?",
            "right_answer": "Основные преимущества Objective-C: Динамическая типизация, Устоявшийся, Стабильность, Поддержка более старых версий."
        },
        {
            "question": "Что такое член isa?",
            "right_answer": "Объекты Objective-C в основном являются структурами C. Каждый из них содержит поле, называемое isa, которое является указателем на класс, экземпляром которого является объект (так объект и среда выполнения Objective-C знают, какого типа объект это)."
        },
        {
            "question": "Объясните блоки Objective-C.",
            "right_answer": "Блоки Objective-C - это функции на уровне языка, которые позволяют создавать сегменты кода, которые могут быть переданы методам или функциям, как если бы они были значениями. Блоки являются объектами, поэтому их можно добавлять в коллекции, такие как NSDictionary и NSArray. Они также могут захватывать значения из окружающей области видимости, поэтому они похожи на замыкания и лямбды в других языках программирования."
        },
        {
            "question": "Что произойдет, если мы отправим любое сообщение объекту, который был освобожден?",
            "right_answer": "Вызов release для объекта не обязательно означает, что он будет освобожден. Это просто уменьшает счетчик удержания объекта. Объект будет освобожден только когда счетчик удержания достигнет 0 (и даже тогда объект может находиться в пуле автовысвобождения и все еще не быть освобожденным). Таким образом, вы можете освободить объект, но все еще иметь ссылку на него. Затем он может быть автоматически освобожден. И затем вы отправляете ему сообщение - но, возможно, объект уже является мусором."
        },
        {
            "question": "Объясните преимущества и недостатки категорий.",
            "right_answer": "Преимущества категорий заключаются в том, что вы можете расширить любой класс, даже те, для которых нет исходного кода, и категории предоставляют вам способ структурировать код в различных компиляционных единицах с локальной группировкой. Недостаток заключается в том, что вы не можете безопасно переопределить методы, которые уже определены классом или другой категорией."
        },
        {
            "question": "Каково назначение категории в Objective-C?",
            "right_answer": "Назначение категории в Objective-C заключается в расширении существующего класса путем добавления поведения, которое полезно только в определенных ситуациях. Для добавления такого расширения к существующим классам Objective-C предоставляет расширения и категории. Синтаксис, используемый для определения категории, - это ключевое слово @interface"
        },
        {
            "question": "Как dispatch_once управляет тем, чтобы запускаться только один раз?",
            "right_answer": "dispatch_once() - это синхронный процесс, и все методы GCD выполняют действия асинхронно (к примеру, dispatch_sync() синхронен). Вся идея dispatch_once() заключается в том, чтобы «выполнить что-то один раз и только один раз», именно это мы и делаем. dispatch_once используется для гарантии того, что что-то происходит ровно один раз, независимо от того, насколько насильственным становится поток программы."
        },
        {
            "question": "Объясните определение класса в Objective-C?",
            "right_answer": "Определение класса начинается с ключевого слова @interface, за которым следует имя интерфейса (класса), и тело класса, закрытое парой фигурных скобок. В Objective-C все классы извлекаются из базового класса с именем NSObject. Он предоставляет основные методы, такие как выделение памяти и инициализация."
        },
        {
            "question": "Какие преимущества использования сессии?",
            "right_answer": "Существует множество преимуществ использования сессии, как указано ниже:\n\n- Она используется для хранения данных пользователя на протяжении всего приложения.\n- Очень легко реализовать и хранить любой тип объекта в программе.\n- Отдельные сущности данных пользователя могут быть хранены отдельно при необходимости.\n- Сессия безопасна, и объекты хранятся на сервере времени выполнения."
        },
        {
            "question": "Что такое id?",
            "right_answer": "id - это указатель на любой тип, но в отличие от void * он всегда указывает на объект Objective-C. Например, вы можете добавить что угодно типа id в NSArray, но эти объекты должны реагировать на retain и release."
        },
        {
            "question": "Как работает механизм обмена сообщениями в Objective-C?",
            "right_answer": "Обмен сообщениями в Objective-C не привязан к реализации метода до времени выполнения. Компилятор преобразует выражение сообщения в вызов функции обмена сообщениями, objc_msgSend(). Эта функция соединяет получателя и имя метода, указанное в сообщении."
        }
    ]
}