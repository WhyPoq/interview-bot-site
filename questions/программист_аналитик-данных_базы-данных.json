{
    "category_full_form": "Программист_Аналитик данных_Базы данных",
    "category_human_form": "Аналитик данных_Базы данных",
    "category_filename_form": "программист_аналитик-данных_базы-данных",
    "questions": [
        {
            "question": "Что такое 1NF в СУБД?",
            "right_answer": "1NF известна как Первая Нормальная Форма. Это самая простая форма процесса нормализации, которая утверждает, что домен атрибута должен содержать только атомарные значения. Цель этого - удалить дублирующиеся столбцы, присутствующие в таблице."
        },
        {
            "question": "Объясните роль SQL в фазе трансформации ETL.",
            "right_answer": "SQL (Structured Query Language) играет критическую роль в фазе трансформации процесса ETL (Extract, Transform, Load). В этой фазе данные, извлеченные из исходных систем, подвергаются значительным изменениям, перестройке и обогащению, чтобы сделать их пригодными для анализа и отчетности. SQL используется для выполнения различных задач трансформации, что делает его фундаментальным инструментом в ETL. Вот основные роли SQL в фазе трансформации ETL: 1. Очистка и валидация данных: - SQL-запросы используются для выявления и устранения проблем качества данных, таких как отсутствующие значения, дубликаты и выбросы. - Правила валидации и ограничения могут быть применены с помощью SQL для обеспечения точности и согласованности данных. 2. Агрегация данных: - SQL позволяет агрегировать данные, такие как расчет сумм, средних значений, количеств и других статистических показателей. Это полезно для суммирования данных для отчетности и анализа. 3. Фильтрация данных: - SQL предоставляет возможность фильтровать и выбирать определенные строки данных на основе критериев. Это полезно для исключения нерелевантных или ошибочных данных из анализа. 4. Трансформация данных: - SQL поддерживает различные операции трансформации данных, включая: - Преобразование типов данных: Изменение типов данных для соответствия целевой схеме. - Обработка строк: Извлечение подстрок, объединение строк и применение регулярных выражений. - Операции с датой и временем: Извлечение компонентов, форматирование дат и выполнение арифметики дат. - Числовые вычисления: Выполнение математических операций над числовыми значениями. - Условная логика: Применение условных операторов для вывода новых значений или флагов. 5. Обогащение данных: - SQL можно использовать для обогащения данных путем их объединения с справочными данными или внешними источниками. Это может добавить контекст к данным и позволить более полный анализ. 6. Нормализация и денормализация данных: - SQL используется для нормализации или денормализации данных по мере необходимости для удовлетворения требований целевой модели данных. Нормализация уменьшает избыточность данных, а денормализация может улучшить производительность запросов. 7. Обработка иерархических данных: - SQL может управлять иерархическими структурами данных с использованием общих выражений таблиц (CTE) и рекурсивных запросов. Это ценно для обработки иерархических данных, таких как организационные структуры или категории продуктов. 8. Обработка временных рядов данных: - SQL крайне важен для обработки временных рядов данных, включая расчет скользящих средних, суммирование и выполнение сравнений на основе времени. 9. Маскирование данных и анонимизация: - SQL можно использовать для реализации техник маскирования данных и анонимизации для защиты конфиденциальной информации при обеспечении возможности анализа нечувствительных данных. 10. Дедупликация данных: - SQL может идентифицировать и устранять дублирующиеся записи из набора данных, обеспечивая точность данных и избегая двойного подсчета. 11. Обработка ошибок: - SQL-запросы могут включать механизмы обработки ошибок для регистрации и управления ошибками или несоответствиями трансформации данных. 12. Пользовательские бизнес-правила: - SQL позволяет организациям применять пользовательские бизнес-правила и логику во время трансформации данных для соответствия данных конкретным бизнес-требованиям. SQL является выразительным и гибким, что делает его универсальным инструментом для задач трансформации данных в ETL. Он позволяет инженерам данных и аналитикам определять сложную логику трансформации, которая может адаптироваться к конкретным потребностям организации и обрабатываемых данных. SQL-запросы, написанные во время фазы трансформации, могут быть протестированы, задокументированы и контролироваться по версиям для обеспечения целостности и надежности процесса ETL."
        },
        {
            "question": "Объясните разницу между функциями COUNT(), SUM(), AVG() и MAX().",
            "right_answer": "Функции COUNT(), SUM(), AVG() и MAX() являются агрегатными функциями в SQL, которые используются для выполнения вычислений над наборами значений в столбце. Однако они служат разным целям и возвращают разные типы результатов."
        },
        {
            "question": "Почему использование СУБД рекомендуется? Объясните, перечислив некоторые из его основных преимуществ?",
            "right_answer": "Некоторые из основных преимуществ СУБД - это контроль избыточности, обмен данными, возможность создания резервных копий и восстановления, обеспечение целостности ограничений и независимость данных."
        },
        {
            "question": "Что такое модель E-R в СУБД?",
            "right_answer": "Модель E-R известна как модель сущность-связь в СУБД, основанная на концепции сущностей и отношений, существующих между этими сущностями."
        },
        {
            "question": "Как можно обновить данные в таблице с помощью SQL?",
            "right_answer": "Вы можете обновить данные в таблице с помощью SQL, используя оператор UPDATE. Оператор UPDATE позволяет изменять существующие записи в таблице на основе указанных условий. Вот базовый синтаксис для обновления данных в таблице: UPDATE table_name SET column1 = new_value1, column2 = new_value2, ... WHERE condition;"
        },
        {
            "question": "Какие существуют различные типы объединений в SQL?",
            "right_answer": "Существует 4 типа объединений в SQL: Inner Join, Left Join, Right Join, Full Join."
        },
        {
            "question": "Объясните сущность, тип сущности и набор сущностей в СУБД?",
            "right_answer": "Сущность - это объект, место или вещь, которая имеет независимое существование в реальном мире и о которой можно хранить данные в базе данных. Тип сущности - это коллекция сущностей, которые имеют одинаковые атрибуты. Набор сущностей - это коллекция сущностей одного типа."
        },
        {
            "question": "Какие основные типы данных SQL?",
            "right_answer": "SQL поддерживает различные типы данных для представления различных видов данных в базе данных. Основные типы данных SQL можно классифицировать по нескольким группам на основе их характеристик."
        },
        {
            "question": "Какие основные команды SQL для извлечения данных?",
            "right_answer": "Основные команды SQL для извлечения данных используются для запроса и извлечения данных из базы данных. Эти команды позволяют вам указать данные, которые вы хотите извлечь, отфильтровать и отсортировать. Основные команды SQL для извлечения данных включают: SELECT, FROM, WHERE, ORDER BY, LIMIT (или FETCH FIRST), GROUP BY, HAVING, DISTINCT"
        },
        {
            "question": "Объясните SQL-инъекцию и методы ее предотвращения.",
            "right_answer": "SQL-инъекция - это злонамеренная техника, используемая злоумышленниками для эксплуатации уязвимостей в обработке SQL-запросов приложением. Она возникает, когда приложение позволяет включать пользовательские данные в SQL-запросы без должной валидации или очистки. Злоумышленники могут манипулировать полями ввода, чтобы внедрить вредоносный SQL-код, что может привести к несанкционированному доступу к базе данных или к нарушениям данных. SQL-инъекция представляет собой серьезную угрозу безопасности, которая может привести к краже данных, порче данных и другим злонамеренным действиям. Многоуровневый подход, объединяющий валидацию ввода, параметризованные запросы и тестирование безопасности, может значительно снизить риск уязвимостей SQL-инъекции."
        },
        {
            "question": "Что такое условие HAVING и в чем отличие от условия WHERE?",
            "right_answer": "Условие HAVING в SQL используется для фильтрации результатов запроса GROUP BY на основе агрегатных функций или сводной статистики. Оно позволяет применять условия к группам строк, созданным с помощью условия GROUP BY. По сути, условие HAVING фильтрует набор результатов после группировки и агрегации."
        },
        {
            "question": "Объясните разницу между функциями окон ROW_NUMBER(), RANK() и DENSE_RANK().",
            "right_answer": "Вот табличное сравнение различий между функциями окон ROW_NUMBER(), RANK() и DENSE_RANK(): ROW_NUMBER(): Присваивает уникальное целое число каждой строке в наборе результатов, без пропусков. Если у нескольких строк одинаковые значения, им присваиваются разные номера строк. RANK(): Присваивает уникальный ранг каждой строке в наборе результатов, с возможными пропусками для строк с одинаковыми значениями. Последующие строки получают тот же ранг, если у них одинаковые значения. DENSE_RANK(): Присваивает уникальный ранг каждой строке в наборе результатов, без пропусков для строк с одинаковыми значениями. Последующие строки получают тот же ранг, если у них одинаковые значения."
        },
        {
            "question": "Что такое SQL, и почему это важно для специалистов по данным?",
            "right_answer": "SQL (Structured Query Language) - это специализированный язык для управления и анализа данных в реляционных базах данных. Он необходим для задач, таких как извлечение данных, их преобразование, анализ, моделирование, интеграция и отчетность. SQL обеспечивает эффективную обработку данных, контроль качества и обслуживание баз данных, что делает его фундаментальным инструментом для работы со структурированными данными в различных отраслях."
        },
        {
            "question": "Как можно использовать Git и GitHub для проектов баз данных?",
            "right_answer": "Использование Git и GitHub в ваших проектах баз данных приносит прозрачность, сотрудничество и контроль версий в разработке баз данных. Это помогает оптимизировать процесс разработки, обеспечивает качество кода и предоставляет историю изменений, которая может быть ценной для аудита и устранения неполадок."
        }
    ]
}