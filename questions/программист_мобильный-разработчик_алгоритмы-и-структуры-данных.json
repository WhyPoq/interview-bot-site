{
    "category_full_form": "Программист_Мобильный разработчик_Алгоритмы и структуры данных",
    "category_human_form": "Мобильный разработчик_Алгоритмы и структуры данных",
    "category_filename_form": "программист_мобильный-разработчик_алгоритмы-и-структуры-данных",
    "questions": [
        {
            "question": "Что такое зубчатый массив?",
            "right_answer": "Это массив, элементы которого сами являются массивами и могут иметь разные размеры и размеры."
        },
        {
            "question": "Что такое структура данных B-дерево? Каковы применения для B-деревьев?",
            "right_answer": "B-дерево - это тип m-путевого дерева, которое часто используется для доступа к диску. B-дерево порядка m может содержать только m-1 ключей и m дочерних узлов. Одной из основных причин использования B-дерева является его способность хранить большое количество ключей в одном узле, а также большие значения ключей, при этом сохраняя относительно небольшую высоту дерева. Реальные применения структуры данных B-дерево включают доступ к данным, хранящимся на дисках в больших базах данных, поиск данных в наборе данных за значительно меньшее время, многоуровневую индексацию и использование большинством серверов."
        },
        {
            "question": "Что такое структура данных связанный список?",
            "right_answer": "Это один из самых часто задаваемых вопросов на собеседованиях по структурам данных, где интервьюер ожидает, что вы дадите исчерпывающий ответ. Постарайтесь объяснить как можно больше, а не заканчивать свой ответ одним предложением! Это линейная структура данных или последовательность объектов данных, где элементы не хранятся в смежных ячейках памяти. Элементы связаны с использованием указателей для формирования цепочки. Каждый элемент является отдельным объектом, называемым узлом. У каждого узла есть два элемента: поле данных и ссылка на следующий узел. Точка входа в связанный список называется головой. Если список пуст, то голова является нулевой ссылкой, а последний узел имеет ссылку на нуль. Связанный список - это динамическая структура данных, где количество узлов не фиксировано, и список имеет возможность увеличиваться и уменьшаться по требованию. Он применяется в случаях, когда: Мы имеем дело с неизвестным количеством объектов или не знаем, сколько элементов в списке Нам нужны операции вставки/удаления элементов из списка за постоянное время, как в вычислениях в реальном времени, где критична предсказуемость времени Не требуется случайный доступ к любым элементам Алгоритм требует структуры данных, где объекты должны храниться независимо от их физического адреса в памяти Нам нужно вставлять элементы в середину списка, как в очереди с приоритетом Некоторые реализации - это стеки и очереди, графы, каталог имен, динамическое выделение памяти и выполнение арифметических операций над длинными целыми числами."
        },
        {
            "question": "Перечислите некоторые приложения структуры данных очередь.",
            "right_answer": "Для приоритизации задач в следующих сценариях: в качестве списков ожидания для общего ресурса в принтере, ЦП, системах колл-центров или загрузки изображений; где первый вошедший обрабатывается первым. В асинхронной передаче данных; например, в каналах, вводе-выводе файлов и сокетах. В качестве буферов в приложениях, таких как MP3-плееры и CD-плееры. Для поддержания плейлиста в медиа-плеерах (добавление или удаление песен)."
        },
        {
            "question": "Как элементы двумерного массива хранятся в памяти?",
            "right_answer": "Порядок по строкам: - В порядке по строкам все строки двумерного массива хранятся в памяти непрерывным образом. Сначала полностью сохраняется первая строка массива, затем вторая строка массива и так далее до последней строки. Порядок по столбцам: В порядке по столбцам все столбцы двумерного массива хранятся в памяти в том же порядке. Первый столбец массива полностью сохраняется в памяти, за которым следует вторая строка массива и так далее до того момента, когда последний столбец массива полностью записан в памяти."
        },
        {
            "question": "Как обратиться ко всем элементам одномерного массива?",
            "right_answer": "Используя индексированный цикл, мы можем получить доступ ко всем элементам одномерного массива. Счетчик уменьшается от 0 до максимального размера массива, n, минус один. Счетчик цикла используется в качестве индекса массива для обращения ко всем элементам одномерного массива последовательно."
        },
        {
            "question": "Учитывая целое число “n”, напишите функцию для вычисления n-го числа Фибоначчи",
            "right_answer": "Динамическое программирование включает в себя разделение сложной задачи на более простые подзадачи и сохранение решения для каждой подзадачи. Таким образом, программисту не нужно повторно вычислять решение. Использование последовательности Фибоначчи может сократить время выполнения программы. Для ответа на этот вопрос вам следует быть уверенным в алгоритмах и программировании, так как существует множество различных методов написания этой последовательности. Пример: public long fibonacci(int x) { if (x < 0) return – 1; if (x == 0) return 0; long[] cache = new long[x + 1]; for (int i = 1; i < cache.length; i++) {cache[i] = -1;} cache[1] = 1; return fibonacci(x, cache);} private long fibonacci(int x, long[] cache) { if (cache[x] > -1) return cache[x]; cache[x] = fibonacci(x – 1, cache) + fibonacci(x – 2, cache); return cache[x];}"
        },
        {
            "question": "Что такое структуры данных?",
            "right_answer": "Структура данных - это механический или логический способ организации данных в программе. Организация данных определяет, как программа работает. Существует множество типов структур данных, каждая из которых имеет свои собственные применения. При проектировании кода необходимо уделить особое внимание способу организации данных. Если данные не хранятся эффективно или неправильно структурированы, то общая производительность кода будет снижена."
        },
        {
            "question": "Что такое стек?",
            "right_answer": "Стек - это абстрактный тип данных, который определяет линейную структуру данных, как в реальном физическом стеке или кучах, где вы можете взять только верхний элемент стека, чтобы убрать вещи. Таким образом, вставка (push) и удаление (pop) элементов происходит только в одном конце, называемом вершиной стека, с определенным порядком: LIFO (Last In First Out) или FILO (First In Last Out)."
        },
        {
            "question": "Можете ли вы объяснить разницу между структурой файла и структурой хранения?",
            "right_answer": "Структура файла: Представление данных во вторичной или вспомогательной памяти, такой как жесткий диск или флеш-накопители, которая хранит данные, оставаясь неизменной до ручного удаления, известно как представление структуры файла. Структура хранения: В этом типе данные хранятся в основной памяти, т.е. ОЗУ, и удаляются, когда функция, использующая эти данные, полностью завершается. Разница заключается в том, что структура хранения имеет данные, хранящиеся в памяти компьютерной системы, в то время как структура файла имеет данные, хранящиеся во вспомогательной памяти."
        },
        {
            "question": "Что такое граф в структуре данных?",
            "right_answer": "Это тип нелинейной структуры данных, состоящий из вершин или узлов, соединенных ребрами или дугами для хранения или извлечения данных. Ребра могут быть направленными или ненаправленными."
        },
        {
            "question": "Где можно использовать структуру данных стек?",
            "right_answer": "Вычисление выражений, Обратное отслеживание, Управление памятью, Вызов и возврат функций"
        },
        {
            "question": "Что такое AVL-дерево?",
            "right_answer": "AVL-дерево (Adelson, Velskii и Landi) - это сбалансированное по высоте двоичное дерево поиска, в котором разница высот левого и правого поддеревьев любого узла меньше или равна одному. Это контролирует высоту двоичного дерева поиска, не позволяя ему искривляться. Оно используется при работе с большим набором данных, с постоянным обрезанием при вставке и удалении данных."
        },
        {
            "question": "Каково требование к объекту, чтобы его можно было использовать в качестве ключа или значения в HashMap?",
            "right_answer": "Объект ключа или значения, который используется в HashMap, должен реализовать методы equals() и hashcode(). Хэш-код используется при вставке объекта ключа в карту, а метод equals используется при попытке извлечения значения из карты."
        },
        {
            "question": "В чем разница между PUSH и POP?",
            "right_answer": "С точки зрения вопросов на собеседовании по структурам данных, это один из самых часто задаваемых вопросов. Акронимы означают операции Pushing и Popping, выполняемые на стеке. Это способы хранения и извлечения данных. PUSH используется для добавления элемента в стек, в то время как POP используется для удаления элемента. PUSH принимает два аргумента: имя стека, в который нужно добавить данные, и значение записи, которое нужно добавить. POP требуется только имя стека. Когда стек заполнен и выполняется еще одна команда PUSH, возникает ошибка переполнения стека, что означает, что стек больше не может вместить последний PUSH. В POP возникает ошибка недостатка стека, когда вы пытаетесь POP пустой стек."
        }
    ]
}