{
    "category_full_form": "Программист_DevOps инженер_CI/CD",
    "category_human_form": "DevOps инженер_CI/CD",
    "category_filename_form": "программист_devops-инженер_cicd",
    "questions": [
        {
            "question": "Что такое Gitflow и в чем его отличие от разработки на основе ствола?",
            "right_answer": "Gitflow - это рабочий процесс для Git, который широко использует ветви. В Gitflow весь код сливается в ветку develop, а не в основную ветку, которая служит краткой версией истории проекта. Функции разрабатываются на специальных ветках «feature branches» (обычно с префиксом feature/). Точно так же релизы также создают отдельную ветку release/. По сравнению с разработкой на основе ствола, Gitflow более сложен и имеет больший шанс вызвать конфликты слияния, поэтому он потерял популярность среди разработчиков."
        },
        {
            "question": "Какие популярные инструменты CI/CD существуют?",
            "right_answer": "Некоторые популярные инструменты CI/CD включают в себя: Jenkins, CircleCI, Bamboo, Team City, Codefresh"
        },
        {
            "question": "Как тестирование вписывается в CI?",
            "right_answer": "Тестирование является неотъемлемой частью CI. Основное преимущество, которое команды получают от CI, - это непрерывная обратная связь. Разработчики настраивают тесты в CI, чтобы проверить, что их код ведет себя согласно ожиданиям. Без тестирования не было бы обратной связи для определения, находится ли приложение в состоянии, готовом к выпуску."
        },
        {
            "question": "Почему автоматизированное тестирование необходимо для CI/CD?",
            "right_answer": "Для обеспечения качества кода автоматизация является важной характеристикой конвейера CI/CD. Процесс автоматизации тестирования используется на протяжении всего процесса разработки программного обеспечения для выявления зависимостей и других проблем, отправки изменений в различные среды и развертывания приложений в производственную среду. В рамках своей роли контроля качества автоматизация оценивает все, начиная от использования API и производительности, заканчивая безопасностью. Таким образом, все изменения, внесенные членами команды, интегрируются всесторонне и реализуются правильно.\n\nС помощью автоматизированного тестирования мы можем запускать тесты одновременно на нескольких серверах/контейнерах, что приводит к более быстрому процессу тестирования.\nАвтоматизированное тестирование обеспечивает большую последовательность. Автоматизация программного обеспечения устраняет человеческие ошибки и предвзятость, и гарантирует, что оно ведет себя ожидаемым образом.\nДля удовлетворения изменяющихся требований инструменты и фреймворки в конвейере CI/CD должны быстро адаптироваться. Следить за обновлениями и быть гибким сложно с ручным тестированием. Однако большинство конфигураций выполняются автоматически при наличии автоматизированных тестов. Это позволяет быстро переходить на новые среды.\nМаксимизация рабочей силы является ключевым фактором успешного проекта разработки. Автоматизация тестирования освобождает инженеров для работы над другими задачами высокой ценности.\nКонвейеры CI/CD требуют всего усилия по тестированию при внесении малых изменений. Проверка незначительных изменений непрерывно проще с автоматизированным тестированием."
        },
        {
            "question": "Как взаимодействуют инструменты DevOps?",
            "right_answer": "Ниже показан общий логический поток, который автоматизирует процесс для обеспечения плавной доставки. Организации могут использовать различные потоки в зависимости от своих потребностей."
        },
        {
            "question": "Назовите несколько типов тестов, используемых в разработке программного обеспечения",
            "right_answer": "Существует больше типов тестов, чем мы можем пересчитать на пальцах обеих рук, но наиболее распространенные из них: модульные тесты, интеграционные тесты, тесты end-to-end, статические тесты, тесты безопасности, тесты smoke"
        },
        {
            "question": "Что такое этап сборки?",
            "right_answer": "Этап сборки отвечает за создание бинарного, контейнерного или исполняемого программного обеспечения для проекта. Этот этап проверяет, что приложение может быть собрано и предоставляет тестируемый артефакт."
        },
        {
            "question": "Сколько времени должна занимать сборка?",
            "right_answer": "Разработчики должны получить результаты из своего CI-конвейера менее чем за 10 минут. Это самое длительное время, на которое практично ждать результатов."
        },
        {
            "question": "Каково различие между хостингом и облачной платформой CI/CD?",
            "right_answer": "Хостинговый CI-сервер должен управляться как любой другой сервер. Сначала его необходимо установить, настроить и поддерживать. Обновления и патчи должны быть применены для обеспечения безопасности сервера. Наконец, сбои в CI-сервере могут блокировать разработку и останавливать развертывание. С другой стороны, облачная платформа CI не требует обслуживания. Нет необходимости устанавливать или настраивать что-либо, поэтому организации могут сразу начать использовать их. Облачное хранилище предоставляет всю необходимую мощность, поэтому масштабируемость не является проблемой. Наконец, надежность платформы гарантирована SLA."
        },
        {
            "question": "Что такое покрытие тестами?",
            "right_answer": "Покрытие тестами - это метрика, которая измеряет, насколько кодовая база покрыта тестами. 100% покрытие означает, что каждая строка кода проверяется как минимум одним тестовым случаем."
        },
        {
            "question": "Объясните Docker.",
            "right_answer": "Как следует из его названия, Docker - это платформа контейнеризации, которая упаковывает приложения и их зависимости вместе в контейнеры, чтобы гарантировать бесперебойную работу приложений в различных средах. Контейнеры Docker - это целые файловые системы, которые содержат все компоненты для запуска программного обеспечения: код, системные инструменты, среду выполнения, системные библиотеки и т. д. Любое программное обеспечение, которое можно установить на сервер, можно упаковать в контейнер Docker. Это гарантирует, что программное обеспечение всегда работает одинаково в любой среде."
        },
        {
            "question": "Что такое ветка Git?",
            "right_answer": "Ветка Git - это независимая линия разработки, обычно создаваемая для работы над функцией. Ветки позволяют разработчикам писать код, не влияя на работу других членов команды."
        },
        {
            "question": "Что такое репозиторий Git?",
            "right_answer": "Репозиторий Git отслеживает каждый файл в программном проекте. Репозиторий служит индексом для всех файлов и изменений в проекте, позволяя разработчикам перемещаться к любой точке в истории проекта."
        },
        {
            "question": "Требуется ли для CI/CD знание какого-либо языка программирования?",
            "right_answer": "Что касается CI/CD, для его использования не требуется знание какого-либо языка программирования или языка сценариев. Не обязательно использовать какой-либо язык программирования или сценариев при использовании инструмента на основе графического интерфейса, такого как Azure DevOps (ADO). Использование шаблонов ARM в Azure DevOps требует знания сценариев. Поэтому все зависит от инструментов и различных способов настройки CI/CD."
        },
        {
            "question": "В чем разница между тестированием end-to-end и приемочным тестированием?",
            "right_answer": "Тестирование end-to-end обычно включает в себя тестирование приложения с использованием пользовательского интерфейса для имитации взаимодействия пользователя. Поскольку это требует запуска приложения в полностью похожей на производственную среде, тестирование end-to-end дает разработчикам наибольшее уверенность в том, что система работает правильно. Приемочное тестирование - это практика проверки критериев приемки. Критерии приемки - это документ с правилами и поведением, которому приложение должно следовать, чтобы удовлетворить потребности пользователей. Приложение, которое удовлетворяет всем критериям приемки, по определению удовлетворяет бизнес-потребности пользователей. Путаница возникает из-за того, что приемочное тестирование реализует проверку критериев приемки с помощью тестирования end-to-end. То есть, приемочный тест состоит из серии сценариев тестирования end-to-end, которые воспроизводят условия и поведение, выраженные в критериях приемки."
        }
    ]
}