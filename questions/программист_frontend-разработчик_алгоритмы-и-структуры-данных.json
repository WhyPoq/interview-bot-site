{
    "category_full_form": "Программист_Frontend разработчик_Алгоритмы и структуры данных",
    "category_human_form": "Frontend разработчик_Алгоритмы и структуры данных",
    "category_filename_form": "программист_frontend-разработчик_алгоритмы-и-структуры-данных",
    "questions": [
        {
            "question": "Каковы преимущества связанного списка перед массивом? В каких сценариях мы используем связанный список, а в каких массив?",
            "right_answer": "Преимущества связанного списка перед массивом включают более простую вставку и удаление, динамическую структуру данных, отсутствие потери памяти и более простую реализацию определенных структур данных. Связанные списки используются, когда количество элементов заранее неизвестно, часто выполняются операции добавления или удаления, и когда элементы нужно вставлять в середину списка. Массивы используются, когда требуется случайный доступ к элементам, количество элементов известно заранее, важна скорость при итерации по элементам и эффективность использования памяти."
        },
        {
            "question": "Когда следует применять бинарный поиск?",
            "right_answer": "Руководитель по найму может задать такой вопрос, чтобы оценить ваши навыки принятия решений. Отвечайте уверенно и приводите пример из реального мира, применимый к компании, в которой вы хотите работать. Пример: «Вы можете использовать алгоритм бинарного поиска с упорядоченным и отсортированным списком элементов. Поиск начнется в середине списка, а затем будет определено, продолжать ли поиск в верхней части или в нижней части». "
        },
        {
            "question": "Каковы преимущества двоичного поиска по сравнению с линейным поиском?",
            "right_answer": "В отсортированном списке двоичный поиск эффективнее линейного поиска, потому что выполняет меньше сравнений. Двоичный поиск работает за время O(log n) по сравнению с O(n) временем линейного поиска."
        },
        {
            "question": "Определите структуру данных Segment Tree и ее применения.",
            "right_answer": "Segment Tree - это бинарное дерево, которое используется для хранения интервалов или сегментов. Segment Tree состоит из узлов, представляющих интервалы. Segment Tree используется при наличии нескольких запросов диапазона к массиву и изменениях элементов массива."
        },
        {
            "question": "Помогают ли динамические выделения памяти в управлении данными? Как?",
            "right_answer": "Динамическое выделение памяти хранит простые структурированные типы данных во время выполнения. Оно имеет возможность объединять отдельно выделенные структурированные блоки для формирования составных структур, которые расширяются и сжимаются по мере необходимости, тем самым помогая управлять данными блоков данных произвольного размера, в произвольном порядке."
        },
        {
            "question": "Что такое hashmap в структуре данных?",
            "right_answer": "Hashmap - это структура данных, которая использует реализацию структуры данных хэш-таблицы, которая позволяет получить доступ к данным за постоянное время (O(1)) сложности, если у вас есть ключ"
        },
        {
            "question": "Сравните различные реализации приоритетной очереди",
            "right_answer": "В следующей таблице содержится асимптотический анализ различных реализаций приоритетной очереди:\n\nОперации    peek    insert    delete\nСвязанный список    O(1)    O(n)    O(1)\nБинарная куча    O(1)    O(log n)    O(log n)\nБинарное дерево поиска    O(1)    O(log n)    O(log n)"
        },
        {
            "question": "Что такое зубчатый массив?",
            "right_answer": "Это массив, элементы которого сами являются массивами и могут иметь разные размеры и размеры."
        },
        {
            "question": "Что такое сортировка слиянием? Как она работает?",
            "right_answer": "Сортировка слиянием - это алгоритм разделяй и властвуй для сортировки данных. Он работает путем слияния и сортировки смежных данных для создания более крупных отсортированных списков, которые затем рекурсивно сливаются для формирования еще более крупных отсортированных списков, пока у вас не будет один отсортированный список."
        },
        {
            "question": "Определите Красно-черное дерево и его применения",
            "right_answer": "Красно-черные деревья - это тип самобалансирующегося двоичного дерева поиска. Рудольф Байер изобрел его в 1972 году и назвал его 'симметричными двоичными B-деревьями'. Красно-черное дерево - это двоичное дерево, в котором каждый узел имеет атрибут цвета, либо красный, либо черный. Путем сравнения цветов узлов на любом простом пути от корня к листу красно-черные деревья гарантируют, что ни один путь не будет более чем вдвое длиннее другого, обеспечивая тем самым общий баланс дерева. Красно-черные деревья похожи на двоичные деревья в том, что они оба хранят свои данные в двоичных форматах дополнения двойки. Однако у красно-черных деревьев есть одно важное преимущество перед двоичными деревьями: они быстрее доступны. Поскольку красно-черные деревья так быстро доступны, их часто используют для хранения больших объемов данных. Красно-черные деревья могут использоваться для хранения любого типа данных, который может быть представлен в виде набора значений. Каждое красно-черное дерево подчиняется следующим правилам: Каждый узел либо красный, либо черный. Корень дерева всегда черный. Нет двух красных узлов, которые являются смежными. На каждом пути от узла к любому из его потомков NULL одинаковое количество черных узлов. Все листовые узлы черные. Вот некоторые приложения в реальном времени для структуры данных Красно-черное дерево: Большинство функций библиотек самобалансирующихся BST на C++ или Java используют Красно-черные деревья. Используется для реализации планирования процессора Linux. Также используется для снижения временной сложности в алгоритме кластеризации K-средних в машинном обучении. MySQL также использует Красно-черное дерево для индексов таблиц с целью сокращения времени поиска и вставки."
        },
        {
            "question": "Что такое AVL-дерево?",
            "right_answer": "AVL-дерево (Adelson, Velskii и Landi) - это сбалансированное по высоте двоичное дерево поиска, в котором разница высот левого и правого поддеревьев любого узла меньше или равна одному. Это контролирует высоту двоичного дерева поиска, не позволяя ему искривляться. Оно используется при работе с большим набором данных, с постоянным обрезанием при вставке и удалении данных."
        },
        {
            "question": "Что такое обход дерева?",
            "right_answer": "Обход дерева - это процесс посещения всех узлов дерева."
        },
        {
            "question": "Что такое бинарные деревья?",
            "right_answer": "Бинарное дерево - это структура данных дерева, состоящая из узлов, каждый из которых имеет двух потомков, известных как левый и правый узлы. Дерево начинается с одного узла, называемого корнем."
        },
        {
            "question": "Каковы применения графовой структуры данных?",
            "right_answer": "Транспортные сети, где станции представлены как вершины, а маршруты как рёбра графа\nГрафики электро- или водоснабжения, где вершины - точки подключения, а рёбра - провода или трубы, их соединяющие\nГрафы социальных сетей для определения потока информации и точек роста (рёбра и вершины)\nНейронные сети, где вершины представляют нейроны, а рёбра - синапсы между ними"
        },
        {
            "question": "Что такое структура данных очередь? Каковы применения очереди?",
            "right_answer": "Очередь - это линейная структура данных, которая позволяет пользователям хранить элементы в списке систематическим образом. Элементы добавляются в очередь сзади, пока она не заполнится, после чего они удаляются из очереди с передней стороны. Очереди часто используются в ситуациях, когда пользователи хотят удерживать элементы в течение длительного времени, например, во время процесса оформления заказа. Хорошим примером очереди является любая очередь клиентов на ресурс, где первый клиент обслуживается первым."
        }
    ]
}