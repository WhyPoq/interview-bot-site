{
    "category_full_form": "Программист_Full Stack разработчик_Frontend часть_React",
    "category_human_form": "Full Stack разработчик_React",
    "category_filename_form": "программист_full-stack-разработчик_frontend-часть_react",
    "questions": [
        {
            "question": "Как обрабатывать асинхронные действия в Redux Thunk?",
            "right_answer": "Чтобы использовать Redux Thunk, вам нужно импортировать его как промежуточное ПО. Создатели действий должны возвращать не только объект, но и функцию, которая принимает диспетчер в качестве параметра."
        },
        {
            "question": "Что такое React Context?",
            "right_answer": "React Context - это функция, которая предоставляет способ передачи данных через дерево компонентов без ручной передачи props на каждом уровне. Она позволяет создать глобальное состояние, к которому можно обратиться из любого компонента в дереве, независимо от его положения. Context полезен, когда вам нужно обмениваться данными между несколькими компонентами, которые не прямо связаны через props."
        },
        {
            "question": "Что такое менеджер состояния и с какими из них вы работали или знаете?",
            "right_answer": "Менеджер состояния - это инструмент или библиотека, которая помогает управлять состоянием приложения. Он предоставляет централизованное хранилище или контейнер для хранения и управления данными, к которым могут обращаться и обновлять их различные компоненты в приложении. Менеджер состояния решает несколько проблем. Во-первых, это хорошая практика разделять данные и связанную с ними логику от компонентов. Во-вторых, при использовании локального состояния и передаче его между компонентами код может стать запутанным из-за потенциальной глубокой вложенности компонентов. Имея глобальное хранилище, мы можем получать доступ и изменять данные из любого компонента. Вместе с React Context, Redux или MobX часто используются в качестве библиотек управления состоянием."
        },
        {
            "question": "Каковы правила создания пользовательского хука?",
            "right_answer": "Начинайте название хука с 'use'. Используйте существующие хуки при необходимости. Не вызывайте хуки условно. Извлекайте повторяющуюся логику в пользовательский хук. Пользовательские хуки должны быть чистыми функциями. Пользовательские хуки могут возвращать значения или другие хуки. Называйте пользовательский хук описательно."
        },
        {
            "question": "В чем разница между useMemo и useCallback?",
            "right_answer": "useMemo используется для кэширования результата вычисления, в то время как useCallback используется для кэширования самой функции. useMemo кэширует вычисленное значение и возвращает его на последующих рендерах, если зависимости не изменились. useCallback кэширует саму функцию и возвращает тот же экземпляр, пока зависимости не изменились."
        },
        {
            "question": "Как получить доступ к элементу DOM?",
            "right_answer": "Ссылки создаются с помощью React.createRef() или хука useRef() и присоединяются к элементам React через атрибут ref. Обращаясь к созданной ссылке, мы можем получить доступ к элементу DOM, используя ref.current."
        },
        {
            "question": "Что такое SSR (Server-Side Rendering)?",
            "right_answer": "Серверный рендеринг (SSR) - это техника, используемая для отрисовки страниц на сервере и отправки полностью отрисованной страницы клиенту для отображения. Она позволяет серверу генерировать полный HTML-код веб-страницы, включая ее динамическое содержимое, и отправлять его клиенту в качестве ответа на запрос."
        },
        {
            "question": "Какие архитектурные решения для React вы знаете?",
            "right_answer": "Существует несколько архитектурных решений и шаблонов для создания проектов на React. Некоторые популярные включают: MVC, Flux, Atomic Design, Container and Component Pattern и Feature-Sliced Design."
        },
        {
            "question": "Какие React хуки вы знаете?",
            "right_answer": "useState: Используется для управления состоянием в функциональных компонентах. useEffect: Используется для выполнения побочных эффектов в функциональных компонентах, таких как получение данных или подписка на события. useContext: Используется для доступа к значению контекста React внутри функционального компонента. useRef: Используется для создания изменяемых ссылок на элементы или значения, которые сохраняются между рендерами. useCallback: Используется для мемоизации функций, чтобы предотвратить ненужные повторные рендеры. useMemo: Используется для мемоизации значений для улучшения производительности путем кэширования дорогостоящих вычислений. useReducer: Используется для управления состоянием с помощью функции редуктора, аналогично тому, как работает Redux. useLayoutEffect: Похож на useEffect, но эффект выполняется синхронно после всех мутаций DOM. Эти хуки предоставляют мощные инструменты для управления состоянием, обработки побочных эффектов и повторного использования логики в функциональных компонентах React."
        },
        {
            "question": "Что такое линтеры?",
            "right_answer": "Линтеры - это инструменты, используемые для проверки исходного кода на потенциальные ошибки, баги, стилистические несоответствия и проблемы поддерживаемости. Они помогают соблюдать стандарты кодирования и обеспечивают качество и последовательность кода в рамках кодовой базы."
        },
        {
            "question": "Для чего используется useCallback и как она работает?",
            "right_answer": "Хук useCallback вернет мемоизированную версию обратного вызова, которая изменится только в случае изменения значений одной из зависимостей. Это полезно при передаче обратных вызовов в оптимизированные дочерние компоненты, которые полагаются на равенство ссылок для предотвращения ненужных перерисовок. const callbackValue = useCallback(() => computeFunc(paramA, paramB), [paramA, paramB]);"
        },
        {
            "question": "Какие особенности использования useState?",
            "right_answer": "useState возвращает значение состояния и функцию для его обновления. Во время первоначального рендеринга возвращенное состояние соответствует значению, переданному в качестве первого аргумента. Функция setState используется для обновления состояния. Она принимает новое значение состояния в качестве параметра и добавляет перерисовку компонента в очередь. Функция setState также может принимать функцию обратного вызова в качестве параметра, которая принимает предыдущее значение состояния в качестве параметра."
        },
        {
            "question": "Какой паттерн реализует Mobx?",
            "right_answer": "Mobx реализует паттерн Observer, также известный как Publish-Subscribe паттерн."
        },
        {
            "question": "Какой паттерн реализует Redux?",
            "right_answer": "Redux реализует паттерн Flux, который является предсказуемым паттерном управления состоянием для приложений. Он помогает управлять состоянием приложения, вводя однонаправленный поток данных и централизованное хранилище для состояния приложения."
        },
        {
            "question": "Что такое props drilling?",
            "right_answer": "Props drilling относится к процессу передачи пропсов через несколько уровней вложенных компонентов, даже если некоторые промежуточные компоненты не используют эти пропсы напрямую. Это может привести к сложной и громоздкой структуре кода."
        }
    ]
}