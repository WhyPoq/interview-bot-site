{
    "category_full_form": "Программист_Backend разработчик_JavaScript_язык JavaScript",
    "category_human_form": "Backend разработчик_JavaScript",
    "category_filename_form": "программист_backend-разработчик_javascript_язык-javascript",
    "questions": [
        {
            "question": "Что означает строгий режим в javascript и каковы характеристики строгого режима в javascript?",
            "right_answer": "В ECMAScript 5 была добавлена новая функция под названием JavaScript Strict Mode, которая позволяет вам писать код или функцию в 'строгой' операционной среде. В большинстве случаев этот язык 'не особенно строг' в отношении генерации ошибок. Однако в 'строгом режиме' будут сгенерированы все формы ошибок, включая скрытые ошибки. В результате отладка становится намного проще. Таким образом, шансы программиста на допущение ошибки снижаются. Характеристики строгого режима в javascript: Дублирование аргументов не разрешено разработчиками. В строгом режиме вы не сможете использовать ключевое слово JavaScript в качестве имени параметра или функции. Ключевое слово 'use strict' используется для определения строгого режима в начале скрипта. Строгий режим поддерживается всеми браузерами. Инженерам не разрешается создавать глобальные переменные в 'строгом режиме'."
        },
        {
            "question": "Что такое деструктуризация объекта?",
            "right_answer": "Деструктуризация объекта - это новый способ извлечения элементов из объекта или массива."
        },
        {
            "question": "Что такое стрелочные функции?",
            "right_answer": "Стрелочные функции были введены в версии ES6 javascript. Они предоставляют нам новый и более короткий синтаксис для объявления функций. Стрелочные функции могут использоваться только как функциональное выражение."
        },
        {
            "question": "Что такое генераторные функции?",
            "right_answer": "Введенные в версии ES6, генераторные функции являются особого класса функций."
        },
        {
            "question": "Что вы подразумеваете под шаблонами проектирования JavaScript?",
            "right_answer": "Шаблоны проектирования JavaScript - это повторяемые подходы к ошибкам, которые иногда возникают при создании браузерных приложений на JavaScript. Они действительно помогают нам сделать наш код более стабильным. Они в основном делятся на 3 категории: Шаблон создания объектов, Структурный шаблон проектирования, Поведенческий шаблон проектирования."
        },
        {
            "question": "Объясните Scope и Scope Chain в JavaScript.",
            "right_answer": "Scope в JS определяет доступность переменных и функций в различных частях кода."
        },
        {
            "question": "Каково различие между ключевыми словами var и let в JavaScript?",
            "right_answer": "Некоторые различия: С самого начала ключевое слово 'var' использовалось в программировании на JavaScript, в то время как ключевое слово 'let' было добавлено только в 2015 году. Ключевое слово 'var' имеет область видимости функции. В любом месте функции переменная, указанная с помощью var, доступна, но в случае с 'let' область видимости переменной, объявленной с ключевым словом 'let', ограничена блоком, в котором она объявлена. Давайте начнем с области видимости блока. В ECMAScript 2015 let и const поднимаются, но не инициализируются. Ссылка на переменную в блоке до объявления переменной приводит к ошибке ReferenceError, потому что переменная находится в 'временной зоне мертвых' с начала блока до обработки объявления."
        },
        {
            "question": "Укажите некоторые преимущества JavaScript.",
            "right_answer": "У JavaScript есть много преимуществ. Некоторые из них: JavaScript выполняется как на стороне клиента, так и на стороне сервера. Существует множество фронтенд-фреймворков, которые вы можете изучить и использовать. Однако, если вы хотите использовать JavaScript на бэкенде, вам нужно будет изучить NodeJS. В настоящее время это единственный фреймворк JavaScript, который можно использовать на бэкенде. JavaScript - простой язык для изучения. Веб-страницы теперь имеют больше функциональности благодаря JavaScript. Для конечного пользователя JavaScript работает довольно быстро."
        },
        {
            "question": "Является ли JavaScript языком передачи по ссылке или передачи по значению?",
            "right_answer": "Данные переменной всегда являются ссылкой для объектов, поэтому это всегда передача по значению. В результате, если вы предоставите объект и измените его члены внутри метода, изменения продолжатся за его пределами. В этом случае это кажется передачей по ссылке. Однако, если вы измените значения переменной объекта, изменение не будет длиться, что демонстрирует, что это действительно передача по значению."
        },
        {
            "question": "Для чего используется конструкторная функция в JavaScript?",
            "right_answer": "Конструкторные функции используются для создания объектов в JavaScript."
        },
        {
            "question": "В чем разница между операторами «==» и «===»?",
            "right_answer": "Оба являются операторами сравнения. Разница между этими операторами заключается в том, что «==» используется для сравнения значений, в то время как «===» используется для сравнения как значений, так и типов."
        },
        {
            "question": "Объясните WeakSet в javascript.",
            "right_answer": "В javascript Set - это коллекция уникальных и упорядоченных элементов. Как и Set, WeakSet также является коллекцией уникальных и упорядоченных элементов с некоторыми ключевыми различиями: Weakset содержит только объекты и никакие другие типы. Объект внутри weakset ссылается слабо. Это означает, что если объект внутри weakset не имеет ссылки, он будет собран сборщиком мусора. В отличие от Set, WeakSet имеет только три метода: add(), delete() и has(). const newSet = new Set([4, 5, 6, 7]); console.log(newSet);// Выводит Set {4,5,6,7} const newSet2 = new WeakSet([3, 4, 5]); //Выдает ошибку let obj1 = {message:\"Hello world\"}; const newSet3 = new WeakSet([obj1]); console.log(newSet3.has(obj1)); // true"
        },
        {
            "question": "Объясните передачу по значению и передачу по ссылке.",
            "right_answer": "В JavaScript примитивные типы данных передаются по значению, а не примитивные типы данных передаются по ссылке."
        },
        {
            "question": "Каково различие между клиентским и серверным JavaScript?",
            "right_answer": "Клиентский JavaScript состоит из двух частей: основного языка и предопределенных объектов для выполнения JavaScript в браузере. JavaScript для клиента автоматически включается в HTML-страницы. Во время выполнения браузер понимает этот скрипт. Серверный JavaScript включает выполнение кода JavaScript на сервере в ответ на запросы клиента. Он обрабатывает эти запросы и передает соответствующий ответ клиенту, который может включать клиентский JavaScript для последующего выполнения в браузере."
        },
        {
            "question": "Объясните Замыкания в JavaScript.",
            "right_answer": "Замыкания - это способность функции запоминать переменные и функции, объявленные в её внешней области видимости."
        }
    ]
}