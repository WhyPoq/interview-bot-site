{
	"category_full_form": "Программист_Backend разработчик_Базы данных_MongoDB",
	"category_human_form": "Backend разработчик_MongoDB",
	"category_filename_form": "программист_backend-разработчик_базы-данных_mongodb",
	"questions": [
		{
			"question": "Какова роль Oplog в репликации MongoDB?",
			"right_answer": "Oplog (сокращение от 'operation log') - это ограниченная коллекция, которая записывает все операции записи в основном узле набора реплик. Вторичные узлы используют oplog для репликации изменений и поддержания согласованности данных с основным узлом. Он играет ключевую роль в процессах репликации и аварийного восстановления."
		},
		{
			"question": "Можете ли вы объяснить процесс настройки операций чтения и записи в условиях высокой нагрузки?",
			"right_answer": "В условиях высокой нагрузки вы можете оптимизировать операции чтения и записи, настраивая параметры конфигурации MongoDB, используя соответствующие индексы и применяя механизмы кэширования, такие как Redis или Memcached."
		},
		{
			"question": "Что такое ограниченные коллекции в MongoDB?",
			"right_answer": "Ограниченные коллекции - это коллекции фиксированного размера, которые поддерживают порядок вставки данных. Как только коллекция достигает своего размерного предела, старые данные автоматически перезаписываются новыми данными. Они часто используются для ведения журналов и отслеживания событий."
		},
		{
			"question": "Можете ли вы объяснить выборы набора реплик в MongoDB?",
			"right_answer": "Выборы набора реплик происходят, когда первичный узел в наборе реплик становится недоступным. В таких случаях участники набора реплик голосуют, чтобы выбрать нового первичного узла. Узел с наибольшим количеством голосов становится новым первичным, обеспечивая доступность данных и непрерывность обслуживания."
		},
		{
			"question": "Какова роль ключа шардирования в MongoDB?",
			"right_answer": "Ключ шардирования определяет, как данные распределяются по нескольким шардам (разделам базы данных) в шардированном кластере. MongoDB использует поле в документе, чтобы определить, какой шард должен хранить документ. Выбор подходящего ключа шардирования критичен для равномерного распределения данных и эффективных запросов."
		},
		{
			"question": "Как вставить данные в коллекцию MongoDB?",
			"right_answer": "Вы можете вставить данные в коллекцию MongoDB, используя метод `insertOne()` или `insertMany()`. Вы предоставляете документ или массив документов для вставки."
		},
		{
			"question": "Можете ли вы объяснить концепцию шардинга в MongoDB?",
			"right_answer": "Шардинг в MongoDB - это стратегия, используемая для горизонтального распределения данных по множеству серверов или кластеров, эффективно управляя обширными наборами данных и тяжелыми рабочими нагрузками. В этом подходе данные разделяются на отдельные подмножества, известные как шарды, и маршрутизатор запросов MongoDB направляет запросы к соответствующему шарду по мере необходимости."
		},
		{
			"question": "Можете ли вы объяснить роль алгоритмов консенсуса в управлении кластером MongoDB?",
			"right_answer": "MongoDB использует алгоритм консенсуса Raft для репликации выборов наборов и выбора лидера. Raft обеспечивает поддержание кластера в согласованном состоянии и способность восстановления после сбоев."
		},
		{
			"question": "Можете ли вы объяснить конвейер агрегации в MongoDB?",
			"right_answer": "Конвейер агрегации - это мощная структура для выполнения преобразований данных и вычислений над данными, хранящимися в MongoDB. Он состоит из этапов, каждый из которых обрабатывает и преобразует данные перед их передачей на следующий этап. Обычно используется для сложного анализа данных и операций агрегации."
		},
		{
			"question": "Как MongoDB обрабатывает транзакции?",
			"right_answer": "MongoDB ввел многодокументные транзакции в версии 4.0, позволяя выполнять транзакции, соответствующие ACID. Транзакции гарантируют, что серия операций завершится успешно или неудачно, обеспечивая целостность данных."
		},
		{
			"question": "Можете ли вы объяснить, как MongoDB обрабатывает большие наборы данных?",
			"right_answer": "MongoDB может обрабатывать большие наборы данных с помощью горизонтального масштабирования (шардинга), оптимизированных индексов и эффективных механизмов хранения, таких как WiredTiger. Он также предоставляет инструменты для разделения данных и их распределения."
		},
		{
			"question": "Какие стратегии существуют для обеспечения согласованности данных в распределенных развертываниях MongoDB?",
			"right_answer": "В распределенных развертываниях MongoDB вы можете достичь согласованности данных с помощью различных стратегий: Read Preference, Write Concern, Transactions."
		}
	]
}
