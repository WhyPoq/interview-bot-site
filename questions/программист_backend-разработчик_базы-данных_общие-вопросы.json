{
	"category_full_form": "Программист_Backend разработчик_Базы данных_Общие вопросы",
	"category_human_form": "Backend разработчик_Базы данных",
	"category_filename_form": "программист_backend-разработчик_базы-данных_общие-вопросы",
	"questions": [
		{
			"question": "Объясните термины «Атрибут» и «Отношения»",
			"right_answer": "Атрибут описывается как свойства или характеристики сущности. Например, идентификатор сотрудника, имя сотрудника, возраст и т. д. могут быть атрибутами сущности Сотрудник. Отношение - это двумерная таблица, содержащая ряды и столбцы, где каждая строка представляет запись отношения. Здесь строки также известны как «Кортежи», а столбцы известны как «Атрибуты»."
		},
		{
			"question": "Что такое слабый набор сущностей?",
			"right_answer": "Слабый набор сущностей - это тот, чей первичный ключ состоит из его частичного ключа, а также первичного ключа родительской сущности. Это происходит потому, что у набора сущностей может не быть достаточно атрибутов для формирования первичного ключа."
		},
		{
			"question": "Определите сущность, тип сущности и набор сущностей.",
			"right_answer": "Сущность может быть чем угодно, будь то место, класс или объект, который имеет независимое существование в реальном мире. Тип сущности представляет собой набор сущностей, у которых есть сходные атрибуты. Набор сущностей в базе данных представляет собой коллекцию сущностей определенного типа сущности."
		},
		{
			"question": "Объясните Первичный ключ и Составной ключ.",
			"right_answer": "Первичный ключ - это столбец таблицы, данные каждой строки которого уникально идентифицируются. В каждой строке таблицы должен быть первичный ключ, и ни две строки не могут иметь одинаковый первичный ключ. Значение первичного ключа никогда не может быть пустым, и его нельзя изменить или обновить. Составной ключ - это форма кандидатского ключа, где набор столбцов уникально идентифицирует каждую строку в таблице."
		},
		{
			"question": "Что вы понимаете под функциональной зависимостью?",
			"right_answer": "Отношение считается находящимся в функциональной зависимости, когда один атрибут уникально определяет другой атрибут."
		},
		{
			"question": "Когда функциональная зависимость считается полностью функционально зависимой?",
			"right_answer": "Для того чтобы соответствовать критериям полностью функциональной зависимости, отношение должно удовлетворять требованию функциональной зависимости. Функциональная зависимость 'A' и 'B' считается полностью функционально зависимой, когда удаление любого атрибута, скажем 'X', из 'A' означает, что зависимость больше не существует."
		},
		{
			"question": "Что такое VDL и SDL?",
			"right_answer": "VDL - это Язык Определения Представлений, который представляет представления пользователей и их сопоставление с концептуальной схемой. SDL - это Язык Определения Хранилища, который определяет сопоставление между двумя схемами."
		},
		{
			"question": "Как улучшить производительность запроса с помощью поиска индексов?",
			"right_answer": "Поиск индексов помогает улучшить производительность запроса путем:\n\nИспользования оптимизатора запросов для согласования запросов с рабочей нагрузкой.\nНаблюдения за производительностью и эффектом индекса и распределения запросов."
		},
		{
			"question": "Что такое транзакция базы данных?",
			"right_answer": "Последовательность операций, которая изменяет согласованное состояние базы данных на другое, известна как транзакция базы данных. После завершения транзакции либо успешное завершение отражается в системе, либо транзакция завершается неудачно и изменения не отражаются."
		},
		{
			"question": "Каковы преимущества и недостатки представлений в базе данных?",
			"right_answer": "Преимущества представлений: Поскольку нет физического местоположения, где хранятся данные в представлении, оно генерирует вывод, не тратя ресурсы. Доступ к данным ограничен, поскольку не позволяет выполнять команды вроде вставки, обновления и удаления. Недостатки представлений: Представление становится неактуальным, если мы удаляем таблицу, связанную с этим представлением. При создании представления для больших таблиц занимается много места в памяти."
		},
		{
			"question": "Объясните термины «Запись», «Поле» и «Таблица» в контексте базы данных.",
			"right_answer": "Запись: Запись - это набор значений или полей конкретной сущности. Например, сотрудник, счет заработной платы и т. д. Поле: Поле относится к области внутри записи, которая зарезервирована для определенных данных. Например, идентификатор сотрудника. Таблица: Таблица - это набор записей определенных типов. Например, таблица Сотрудник - это набор записей, связанных со всеми сотрудниками."
		},
		{
			"question": "Что вы понимаете под 'Атомарностью' и 'Агрегацией'?",
			"right_answer": "Атомарность - это условие, при котором либо все действия транзакции выполняются, либо ни одно. Это означает, что при незавершенной транзакции сама система управления базами данных отменит эффекты, выполненные незавершенной транзакцией. Агрегация - это концепция выражения отношений с коллекцией сущностей и их взаимосвязей."
		},
		{
			"question": "Что такое DML Compiler?",
			"right_answer": "Компилятор DML переводит операторы DML на языке запросов в инструкции низкого уровня, и сгенерированная инструкция может быть понята Query Evaluation Engine."
		},
		{
			"question": "Объясните важность разделения баз данных.",
			"right_answer": "Важность разделения баз данных заключается в следующем: Улучшает производительность запросов и управляемость. Упрощает общие административные задачи. Является ключевым инструментом для создания систем с крайне высокими требованиями к доступности. Позволяет получить доступ к большой части одного раздела."
		}
	]
}
