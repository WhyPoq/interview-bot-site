{
    "category_full_form": "Программист_Frontend разработчик_Webpack",
    "category_human_form": "Frontend разработчик_Webpack",
    "category_filename_form": "программист_frontend-разработчик_webpack",
    "questions": [
        {
            "question": "Объясните концепцию разделения кода в Webpack.",
            "right_answer": "Разделение кода - это техника, используемая в Webpack для разделения кода на более мелкие фрагменты, которые могут быть загружены по требованию. Это помогает сократить время начальной загрузки приложения, загружая только необходимый код для начального просмотра и загружая дополнительный код по мере необходимости. Webpack достигает разделения кода через динамические импорты или путем настройки точек входа для конкретных фрагментов."
        },
        {
            "question": "Как можно обрабатывать CSS в Webpack?",
            "right_answer": "Webpack предлагает несколько способов обработки CSS, включая: CSS loaders, CSS preprocessors и извлечение CSS."
        },
        {
            "question": "Что такое Webpack?",
            "right_answer": "Webpack - это мощный модульный упаковщик для приложений на JavaScript. Он берет модули с зависимостями и генерирует статические ресурсы, которые могут быть обслужены браузером. Он упрощает процесс управления и упаковки различных ресурсов, таких как JavaScript, CSS и изображения, обеспечивая эффективное использование ресурсов и улучшая производительность приложения."
        },
        {
            "question": "Что такое loader в Webpack?",
            "right_answer": "Лоадеры в Webpack - это преобразования, применяемые к исходным файлам при их добавлении в граф зависимостей. Они позволяют вам предварительно обрабатывать файлы перед их упаковкой. Например, вы можете использовать лоадеры для транспиляции TypeScript в JavaScript, преобразования SCSS в CSS или оптимизации и сжатия изображений. Лоадеры настраиваются в файле конфигурации Webpack и указываются с помощью правил."
        },
        {
            "question": "Как Webpack обрабатывает зависимости?",
            "right_answer": "Webpack использует граф зависимостей для управления зависимостями. Он начинает с точки входа и рекурсивно следует за зависимостями модулей, чтобы построить полный граф. Каждый модуль рассматривается как отдельная сущность и может иметь свои собственные зависимости. Webpack анализирует граф и объединяет все зависимости в один или несколько выходных файлов."
        },
        {
            "question": "Какие различия между Webpack 4 и Webpack 5?",
            "right_answer": "Webpack 5 внес несколько значительных нововведений и улучшений по сравнению с Webpack 4, включая улучшенную скорость сборки, модульную федерацию и модули ресурсов."
        },
        {
            "question": "Как можно настроить Webpack?",
            "right_answer": "Webpack можно настроить с помощью файла конфигурации на JavaScript (webpack.config.js). В этом файле вы определяете различные параметры, такие как точки входа, пути вывода, загрузчики, плагины и оптимизационные параметры. Webpack предоставляет гибкую систему конфигурации, которая позволяет настраивать процесс сборки в соответствии с конкретными требованиями вашего проекта."
        },
        {
            "question": "Каковы основные особенности Webpack?",
            "right_answer": "Webpack предлагает несколько ключевых функций, которые делают его популярным выбором среди разработчиков: сборка модулей, разделение кода, загрузчики и плагины."
        },
        {
            "question": "Какова цель Webpack Dev Server?",
            "right_answer": "Webpack Dev Server - это сервер разработки, который обеспечивает простой способ тестирования и отладки приложений во время разработки. Он предлагает функции, такие как горячая замена модулей (HMR), которая позволяет видеть изменения мгновенно без обновления всей страницы. Сервер разработки также обеспечивает оптимизированный процесс сборки для более быстрых итераций разработки."
        },
        {
            "question": "Как можно оптимизировать размер пакетов Webpack?",
            "right_answer": "Для оптимизации размера пакетов Webpack можно использовать несколько стратегий: Минификация, Tree shaking, Разделение кода, Использование динамических импортов."
        }
    ]
}