{
    "category_full_form": "Программист_Backend разработчик_Python_Flask",
    "category_human_form": "Backend разработчик_Flask",
    "category_filename_form": "программист_backend-разработчик_python_flask",
    "questions": [
        {
            "question": "Какой длины может быть идентификатор в Flask Python?",
            "right_answer": "В Flask Python идентификатор может быть любой длины, так как Python чувствителен к регистру, поэтому он будет различать заглавные и строчные буквы. Также есть зарезервированные ключевые слова, которые не могут быть использованы пользователями."
        },
        {
            "question": "Что такое Flask blueprint?",
            "right_answer": "Flask blueprint - это способ организации вашего приложения Flask на более мелкие, модульные компоненты. Blueprint может определять маршруты, шаблоны и статические файлы, и может быть зарегистрирован в приложении для создания более крупного и сложного приложения."
        },
        {
            "question": "Как можно запросить соединения с базой данных в Flask?",
            "right_answer": "Создание и закрытие соединений с базой данных постоянно - очень неэффективно. Поскольку соединения с базой данных инкапсулируют транзакцию, необходимо обеспечить, чтобы соединение использовалось только одним запросом за раз. Фреймворк Flask позволяет пользователям запрашивать базы данных тремя способами: before_request(), after_request() и teardown_request()."
        },
        {
            "question": "Для чего используется jsonify() в Flask?",
            "right_answer": "Jsonify - одна из функций модуля flask.json. Он преобразует данные в JSON и инкапсулирует их в объект ответа с mime-типом application/JSON. Он загружается непосредственно из модуля flask, а не из самого flask. Другими словами, jsonify() - это вспомогательный метод Flask для корректного возврата данных JSON. Mime-тип application/JSON устанавливается с помощью jsonify(), в то время как json.dumps() просто возвращает строку данных JSON. Это может иметь непредвиденные последствия. Функция jsonify() полезна в приложениях Flask, потому что она автоматически устанавливает правильные заголовки ответа и тип контента для JSON-ответов, и позволяет легко возвращать данные в формате JSON из обработчиков маршрутов. Это упрощает и удобнее создание API, возвращающих данные JSON."
        },
        {
            "question": "С какими базами данных совместим Flask?",
            "right_answer": "В качестве бэкэнд базы данных Flask поддерживает SQLite и MySQL. Для поддержки различных баз данных используются DbAdapters. В Flask есть SQLDbAdapter, который позволяет подключаться к различным SQL базам данных с использованием Flask-SQLAlchemy, включая MySQL, Oracle, PostgreSQL, SQLite, Sybase, Firebird и другие. Также есть MongoDbAdapter, который позволяет подключаться к базам данных MongoDB с использованием Flask-MongoEngine."
        },
        {
            "question": "Какова разница между Flask и Django?",
            "right_answer": "Flask - это WSGI-фреймворк, позволяет использовать несколько типов баз данных, использует SQL Alchemy, имеет разнообразный стиль работы, поддерживает API, не поддерживает динамические HTML-страницы, имеет поддержку визуальной отладки и не предлагает встроенного инструмента для запуска. Django - это полноценный веб-фреймворк, не поддерживает несколько типов баз данных, использует встроенный ORM, имеет монолитный стиль работы, имеет традиционную структуру проекта, не имеет поддержки API, принимает динамические страницы, не имеет поддержки визуальной отладки, и Django-admin позволяет начать создание веб-приложений без внешнего ввода."
        },
        {
            "question": "Что вы понимаете под шаблонными движками в Flask?",
            "right_answer": "Шаблонные движки используются, когда мы хотим создать веб-приложения, разделенные на различные компоненты. Они используются для серверных приложений, которые не созданы как API и работают на одном сервере. Шаблоны также позволяют быстро отображать серверные данные, которые должны быть предоставлены приложению, такие как тело, навигация, подвал, панель управления и т. д. Ejs, Jade, Pug, Mustache, HandlebarsJS, Jinja2 и Blade - некоторые популярные шаблонные движки."
        },
        {
            "question": "Как создать RESTful приложение в Flask?",
            "right_answer": "Flask Restful - это плагин Flask, который позволяет создавать REST API на Python с использованием Flask в качестве бэкэнда. Для создания REST API необходимо выполнить следующие шаги: Импортировать модули и запустить программу. Создать конечные точки REST API Определить методы запроса Реализовать обработчики конечных точек Сериализовать данные Обработка ошибок Протестировать конечные точки с использованием различных инструментов, таких как Postman"
        },
        {
            "question": "Что такое Flask-WTF и каковы его характеристики?",
            "right_answer": "WTF, также известный как WT Forms в Flask, является типом интерактивного пользовательского интерфейса. WTF - это встроенный модуль Flask, который позволяет создавать формы по-другому в веб-приложениях Flask. Flask-WTF разработан для простого подключения к WTForms и хорошо работает с Flask-WTF. Flask WTF включает следующие функции: доступна интеграция с веб-формами. Он поставляется с маркером CSRF, это крайне безопасная форма. Защита CSRF на глобальном уровне Поставляется с возможностью интеграции интернационализации. Также есть поддержка Captcha. В этом модуле есть загрузчик файлов, который работает с Flask Uploads."
        },
        {
            "question": "Что вы подразумеваете под объектом Thread-Local в Flask Python?",
            "right_answer": "Объект, связанный с текущим идентификатором потока и сохраненный в специализированной структуре, называется объектом, специфичным для потока. Внутренне Flask Python использует объекты, специфичные для потока, чтобы пользователю не приходилось передавать объекты из одной функции в другую в рамках запроса для обеспечения безопасности потоков."
        },
        {
            "question": "Что такое маршрутизация в Flask?",
            "right_answer": "Маршрутизация приложения означает сопоставление URL-адресов с определенной функцией, которая будет обрабатывать логику для этого URL-адреса. Современные веб-фреймворки используют более содержательные URL-адреса, чтобы помочь пользователям запомнить их и упростить навигацию."
        },
        {
            "question": "Что такое Flask-SQLAlchemy?",
            "right_answer": "Flask-SQLAlchemy - это расширение Flask, которое предоставляет простой в использовании интерфейс для работы с SQL-базами данных в приложениях Flask."
        },
        {
            "question": "Что такое логирование в Flask?",
            "right_answer": "Логирование в Flask предоставляет множество возможностей и гибкости разработчикам приложений Flask. Оно также позволяет разработчикам создавать сложную систему логирования событий для приложений Flask и включает все необходимые функции и классы. В Flask используется та же стандартизированная библиотека логирования Python. Во время логирования модули Python могут взаимодействовать и вносить свой вклад."
        },
        {
            "question": "Как обрабатывать файлы cookie в Flask?",
            "right_answer": "Метод set_cookie() объекта ответа в Flask используется для установки файлов cookie. Метод make_response() функции представления может быть использован для создания объекта ответа. На ПК клиента файлы cookie хранятся как текстовые файлы. Файлы cookie используются для отслеживания онлайн-действий пользователя и предоставления рекомендаций на основе предпочтений пользователя для улучшения его онлайн-опыта. Файлы cookie хранятся на компьютере клиента сервером и связаны с запросом клиента к серверу во всех последующих транзакциях до истечения срока действия файла cookie или до его удаления со стороны конкретной веб-страницы сервера."
        },
        {
            "question": "Объясните Контекст Приложения и Контекст Запроса в Flask?",
            "right_answer": "Контекст Приложения: Контекст Приложения - это контекст, в котором работает приложение Flask. Он создается при запуске приложения и уничтожается при завершении работы приложения. Контекст приложения хранит конфигурацию и другое глобальное состояние приложения. Контекст Запроса: Контекст Запроса - это контекст, в котором обрабатывается запрос. Он создается при поступлении запроса и уничтожается по завершении запроса. Контекст Запроса хранит информацию о текущем запросе, такую как метод запроса, URL, заголовки и данные формы."
        }
    ]
}