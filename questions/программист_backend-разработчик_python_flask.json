{
    "category_full_form": "Программист_Backend разработчик_Python_Flask",
    "category_human_form": "Backend разработчик_Flask",
    "category_filename_form": "программист_backend-разработчик_python_flask",
    "questions": [
        {
            "question": "Какова разница между Flask и Django?",
            "right_answer": "Flask - это WSGI-фреймворк, позволяет использовать несколько типов баз данных, использует SQL Alchemy, имеет разнообразный стиль работы, поддерживает API, не поддерживает динамические HTML-страницы, имеет поддержку визуальной отладки и не предлагает встроенного инструмента для запуска. Django - это полноценный веб-фреймворк, не поддерживает несколько типов баз данных, использует встроенный ORM, имеет монолитный стиль работы, имеет традиционную структуру проекта, не имеет поддержки API, принимает динамические страницы, не имеет поддержки визуальной отладки, и Django-admin позволяет начать создание веб-приложений без внешнего ввода."
        },
        {
            "question": "Что делает url_for в Flask?",
            "right_answer": "Метод url_for() используется для динамической генерации URL-адреса к определенной функции. После первого аргумента, который является именем выбранной функции, мы можем отправить любое количество именованных аргументов, соответствующих переменной части URL-адреса. Эта функция полезна, поскольку позволяет нам создавать URL-адреса динамически, а не жестко закодировать их в шаблоны."
        },
        {
            "question": "Что такое наследование шаблонов в Flask?",
            "right_answer": "Наследование шаблонов - это мощная функция шаблонизатора Jinja в Flask. Jinja - это шаблонизатор веб-страниц на языке программирования Python. Мы заметили, что все веб-страницы сайта имеют одинаковый футер, навигационную панель и другие элементы. Вместо того чтобы создавать одинаковый футер и навигационную панель на каждой странице отдельно, мы используем наследование шаблонов, которое позволяет нам создать общую часть для всех веб-страниц (например, футер, навигационную панель) только один раз и избавляет от необходимости писать HTML, head и title теги много раз."
        },
        {
            "question": "Зачем мы используем Flask(__name__) в Flask?",
            "right_answer": "Параметр __name__ является встроенной переменной Python, которая устанавливается в имя текущего модуля. Когда мы передаем __name__ в качестве аргумента конструктору класса Flask, это помогает Flask определить, где находятся ресурсы, такие как шаблоны и статические файлы."
        },
        {
            "question": "Объясните, как можно получить доступ к сеансам в Flask?",
            "right_answer": "Продолжительность между тем, когда клиент входит в систему и выходит из сервера, называется сеансом. Сеанс Flask - это утилита Flask, которая обеспечивает поддержку сеансов на стороне сервера в разработанном приложении Flask. Это плагин, который предоставляет вашему приложению возможность сеансов на стороне сервера. Данные, которые должны быть сохранены в сеансе, сохраняются во временном каталоге на сервере. Когда нам нужно сохранить значительное количество данных между запросами в Flask, мы можем использовать объекты сеанса."
        },
        {
            "question": "Для чего используется jsonify() в Flask?",
            "right_answer": "Jsonify - одна из функций модуля flask.json. Он преобразует данные в JSON и инкапсулирует их в объект ответа с mime-типом application/JSON. Он загружается непосредственно из модуля flask, а не из самого flask. Другими словами, jsonify() - это вспомогательный метод Flask для корректного возврата данных JSON. Mime-тип application/JSON устанавливается с помощью jsonify(), в то время как json.dumps() просто возвращает строку данных JSON. Это может иметь непредвиденные последствия. Функция jsonify() полезна в приложениях Flask, потому что она автоматически устанавливает правильные заголовки ответа и тип контента для JSON-ответов, и позволяет легко возвращать данные в формате JSON из обработчиков маршрутов. Это упрощает и удобнее создание API, возвращающих данные JSON."
        },
        {
            "question": "Что такое Flask-Bcrypt?",
            "right_answer": "Flask-Bcrypt - это расширение Flask, которое предоставляет функционал хеширования паролей и их верификации для приложений Flask."
        },
        {
            "question": "Что такое Flask?",
            "right_answer": "Flask - это микровеб-фреймворк, который предоставляет API для создания веб-приложений. Фреймворк Flask также легче изучать из-за своего разнообразного стиля работы. Flask основан на наборе инструментов WSGI (Web Server Gateway Interface) и движке шаблонов Jinja2. Он очень гибок для реализации простого веб-приложения. Кроме того, Flask обеспечивает визуальное отладку, что дает больший контроль над компонентом."
        },
        {
            "question": "Как работает загрузка файлов в Flask?",
            "right_answer": "Процесс отправки двоичных или обычных файлов на сервер известен как загрузка файлов. Flask упрощает для нас загрузку файлов. Все, что нам нужно, это HTML-форма с включенным шифрованием multipart/form-data. Объект request.files[] используется серверным скриптом Flask для получения файла из объекта запроса. Файл сохраняется в выбранное местоположение на сервере после успешной загрузки. Вы можете получить имя целевого файла, выполнив следующее. request.files['file'] = name.filename"
        },
        {
            "question": "Каковы особенности Flask Python?",
            "right_answer": "Встроенный веб-сервер и отладчик, совместимость с большинством последних технологий, высокая масштабируемость и гибкость для простых веб-приложений, интегрированная поддержка модульного тестирования, защита куки в клиентских сессиях, отправка RESTful запросов, совместимость с Google App Engine, поддержка Unicode, соответствие интерфейсу веб-сервера шлюза (WSGI)"
        },
        {
            "question": "Какие HTTP методы предоставляет Python Flask?",
            "right_answer": "Для обработки HTTP запросов Flask использует ряд декораторов. Протокол HTTP является основой интернет-коммуникации данных. Этот протокол определяет ряд техник для получения информации из определенного URL. Различные HTTP методы: GET, POST, PUT, DELETE, HEAD."
        },
        {
            "question": "Что такое Flask-WTF и каковы его характеристики?",
            "right_answer": "WTF, также известный как WT Forms в Flask, является типом интерактивного пользовательского интерфейса. WTF - это встроенный модуль Flask, который позволяет создавать формы по-другому в веб-приложениях Flask. Flask-WTF разработан для простого подключения к WTForms и хорошо работает с Flask-WTF. Flask WTF включает следующие функции: доступна интеграция с веб-формами. Он поставляется с маркером CSRF, это крайне безопасная форма. Защита CSRF на глобальном уровне Поставляется с возможностью интеграции интернационализации. Также есть поддержка Captcha. В этом модуле есть загрузчик файлов, который работает с Flask Uploads."
        },
        {
            "question": "Какой является порт и порт по умолчанию для Flask?",
            "right_answer": "Локальный хост по умолчанию для Flask - 127.0.0.1, а порт по умолчанию - 5000."
        },
        {
            "question": "Как можно включить отладку в Flask Python?",
            "right_answer": "Когда отладка включена, любые изменения в коде приложения немедленно обновляются на этапе разработки, что устраняет необходимость перезапуска сервера. Установка флага на объекты приложений. Обход флага в качестве параметра для запуска. Если пользователь включает поддержку отладки, сервер будет перезагружать его при изменении кода, и пользователю не нужно будет перезапускать после каждого внесенного изменения в код. #Метод 1 app.debug = True #Метод 2 app.run('host' = localhost, debug = True)"
        },
        {
            "question": "С какими базами данных совместим Flask?",
            "right_answer": "В качестве бэкэнд базы данных Flask поддерживает SQLite и MySQL. Для поддержки различных баз данных используются DbAdapters. В Flask есть SQLDbAdapter, который позволяет подключаться к различным SQL базам данных с использованием Flask-SQLAlchemy, включая MySQL, Oracle, PostgreSQL, SQLite, Sybase, Firebird и другие. Также есть MongoDbAdapter, который позволяет подключаться к базам данных MongoDB с использованием Flask-MongoEngine."
        }
    ]
}