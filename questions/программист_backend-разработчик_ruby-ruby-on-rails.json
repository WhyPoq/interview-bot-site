{
    "category_full_form": "Программист_Backend разработчик_Ruby + Ruby on Rails",
    "category_human_form": "Backend разработчик_Ruby + Ruby on Rails",
    "category_filename_form": "программист_backend-разработчик_ruby-ruby-on-rails",
    "questions": [
        {
            "question": "Объясните концепцию символов в Ruby.",
            "right_answer": "Символы в Ruby - это легкие, неизменяемые объекты, которые часто используются в качестве идентификаторов или ключей. Они обозначаются двоеточием, за которым следует имя, например, :symbol_name. В отличие от строк, которые могут быть изменены (или изменены) во время выполнения программы, символы неизменяемы. Это означает, что после создания символа его нельзя изменить. Эта неизменяемость делает символы эффективными для операций сравнения, поскольку два символа с одинаковым именем всегда идентичны, в то время как две строки с одинаковым содержимым могут не быть. Символы часто используются в качестве ключей в хэшах, потому что они более эффективны по памяти, чем строки. Когда вы используете символ несколько раз, он ссылается на один и тот же объект в памяти, в то время как каждое использование строки с одинаковым содержимым ссылается на разные объекты."
        },
        {
            "question": "Как Ruby управляет памятью и сборкой мусора?",
            "right_answer": "Ruby использует комбинацию техник управления памятью и сборки мусора. Он использует маркерно-свиповый сборщик мусора, который идентифицирует и освобождает память, которая больше не используется программой. Объекты, к которым больше нет доступа через ссылки, считаются подходящими для сборки мусора. Интерпретатор Ruby отслеживает ссылки на объекты. Когда использование памяти достигает определенного порога, сборщик мусора запускается для очистки неиспользуемых объектов и освобождения памяти."
        },
        {
            "question": "В чем разница между символом и переменными?",
            "right_answer": "Символ отличается от переменных следующим образом.\n\nОн больше похож на строку, чем на переменную.\nСтрока в Ruby является изменяемой, в то время как символ - нет.\nТребуется создать только одну копию символа.\nВ Ruby символы часто используются для соотнесения с перечислениями (enums)."
        },
        {
            "question": "Что такое замыкание в Ruby и как оно используется?",
            "right_answer": "Замыкание в Ruby - это самодостаточный пакет кода, который может быть выполнен позже, сохраняя контекст, в котором он был создан. Это комбинация функции и окружающей лексической области, что позволяет ему запоминать переменные и значения даже после завершения выполнения внешней функции. Замыкания часто используются в сценариях, таких как обратные вызовы, когда вы хотите определить поведение, которое будет выполнено в будущем, но при этом иметь доступ к переменным из области определения."
        },
        {
            "question": "Обсудите цель использования RVM и rbenv для управления версиями Ruby.",
            "right_answer": "RVM (Ruby Version Manager) и rbenv - это инструменты, используемые для управления несколькими версиями Ruby на одной системе. Они позволяют разработчикам легко переключаться между разными версиями Ruby, обеспечивая совместимость с различными проектами. RVM предоставляет изолированные gemsets для каждой версии Ruby, в то время как rbenv использует легкий подход путем манипулирования переменной PATH. Эти инструменты необходимы для поддержания чистой среды разработки."
        },
        {
            "question": "Объясните роль подкаталога app/controllers и app/helpers.",
            "right_answer": "Это важный вопрос на собеседовании по Ruby.\n\nApp/controllers: Контроллер обрабатывает веб-запрос пользователя. Rails ищут классы контроллеров в подкаталоге контроллеров.\nApp/helpers: Любые вспомогательные классы, необходимые для помощи видам, моделям и классам контроллеров, хранятся в подкаталоге помощников."
        },
        {
            "question": "Опишите концепцию метаклассов (eigenclasses) в Ruby.",
            "right_answer": "В Ruby у каждого объекта есть метакласс (также известный как eigenclass или singleton class). Это специальный, скрытый класс, который специфичен для этого объекта. Метакласс является частью объектной модели Ruby и используется для хранения синглтон методов. Синглтон методы - это методы, которые определены для одного объекта, а не для класса. Это означает, что они могут быть вызваны для этого объекта, но не для других объектов того же класса."
        },
        {
            "question": "Объясните концепцию 'Crystal', статически типизированного языка, вдохновленного Ruby, и его отношение к Ruby.",
            "right_answer": "Crystal черпает вдохновение из синтаксиса Ruby и стремится объединить дружелюбный подход Ruby с производительностью языков, таких как C или C++. Хотя Crystal имеет сходства с Ruby, это отдельный язык, разработанный для высокопроизводительных приложений с надежными гарантиями времени компиляции."
        },
        {
            "question": "Каковы соглашения об именовании?",
            "right_answer": "Это важный вопрос на собеседовании по Ruby."
        },
        {
            "question": "Объясните концепцию методических хуков (method_missing, method_added, method_removed).",
            "right_answer": "Методические хуки в Ruby - это специальные методы, которые срабатывают при наступлении определенных событий, связанных с методами. method_missing вызывается, когда вызывается неопределенный метод. method_added вызывается при добавлении нового метода в класс. method_removed вызывается при удалении метода из класса. Эти хуки обеспечивают мощные возможности метапрограммирования, позволяя динамически реагировать на события, связанные с методами, или изменять их."
        },
        {
            "question": "Перечислите, что может делать миграция Rails.",
            "right_answer": "Миграция Rails может выполнять следующие действия: Создание таблицы, Переименование столбца, Изменение столбца, Удаление столбца, Удаление таблицы, Переименование таблицы, Добавление столбца."
        },
        {
            "question": "Как создать и опубликовать свой собственный Ruby Gem?",
            "right_answer": "Для создания и публикации Ruby Gem вам нужно выполнить следующие шаги: Создать файл gemspec, описывающий ваш gem. Написать код вашего gem и структурировать его в соответствии с соглашениями. Использовать команду 'gem build' для создания файла gem из вашего gemspec. Использовать 'gem push' для публикации вашего gem на RubyGems.org, центральном репозитории gem. Этот процесс позволяет вам делиться вашим кодом и библиотеками с другими участниками сообщества Ruby."
        },
        {
            "question": "Обсудите глобальный блокировщик интерпретатора (GIL) и его влияние на производительность Ruby.",
            "right_answer": "Глобальный блокировщик интерпретатора (GIL) - это мьютекс в интерпретаторе CPython (основная реализация Ruby), который предотвращает одновременное выполнение нескольких нативных потоков Python (или Ruby) в одном процессе. Это означает, что даже на многоядерных системах только один поток может выполнять код Ruby одновременно. GIL может ограничить потенциальные выигрыши в производительности при использовании нескольких ядер ЦП для определенных видов нагрузки, связанных с задачами, требующими большой вычислительной мощности."
        },
        {
            "question": "Опишите назначение метода 'prepend' в Ruby и как он влияет на поиск методов.",
            "right_answer": "Метод prepend в Ruby используется для добавления модуля в цепочку наследования класса. Однако он вставляет модуль с более высоким приоритетом, чем сам класс. Это означает, что методы, определенные в присоединенном модуле, имеют приоритет над методами с тем же именем в классе. Это полезно для внедрения поведения в класс без полного переопределения его существующих методов. Методы присоединенного модуля вызываются раньше, чем методы класса во время поиска методов."
        },
        {
            "question": "Обсудите растущее значение Ruby в области робототехники и автоматизации.",
            "right_answer": "Роль Ruby в робототехнике и автоматизации развивается. Хотя это не основной язык для программирования низкого уровня в робототехнике, его можно использовать для интерфейсов управления более высокого уровня, автоматизации сценариев и логики координации. Его простота использования и универсальность делают его подходящим для создания приложений, взаимодействующих с робототехническими системами и автоматизирующих различные задачи."
        }
    ]
}