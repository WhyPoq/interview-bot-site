{
    "category_full_form": "Программист_DevOps инженер_Контейнеризация и оркестрация",
    "category_human_form": "DevOps инженер_Контейнеризация и оркестрация",
    "category_filename_form": "программист_devops-инженер_контейнеризация-и-оркестрация",
    "questions": [
        {
            "question": "Каковы преимущества использования контейнеров и оркестрации в производственной среде?",
            "right_answer": "Преимущества использования контейнеров и оркестрации в производственной среде\n\nСогласованность и Переносимость: Контейнеры обеспечивают согласованную среду на различных хостах, работающих под управлением одной и той же операционной системы контейнера, независимо от базовой инфраструктуры. Это приводит к переносимости, позволяя разработчикам перемещать приложения из одной среды в другую без необходимости модификации кода или проверки совместимости.\n\nГибкость: Контейнеры позволяют разработчикам быстро развертывать и масштабировать приложения, что значительно повышает гибкость процесса разработки. Это позволяет командам развертывать приложения порциями меньшего размера, снижая риски, связанные с развертыванием крупных масштабов. В результате разработчики могут быстро реагировать на изменяющиеся бизнес-потребности, выпуская новые функции и обновления.\n\nИспользование ресурсов: Контейнеризация позволяет более эффективно использовать ресурсы хоста. С помощью оркестрации контейнеров планировщик может динамически выделять ресурсы контейнерам на основе шаблонов использования. Это приводит к более эффективному использованию ресурсов, что снижает затраты и улучшает производительность приложения.\n\nБолее быстрое развертывание: Контейнеры могут сократить время, необходимое для развертывания новых приложений, до 90%. С помощью оркестрации контейнеров разработчики могут быстро и легко развертывать и управлять контейнерами без ручного вмешательства, что может значительно сэкономить время. Это, в свою очередь, приводит к более быстрой инновации и более частым выпускам программного обеспечения.\n\nУлучшенная масштабируемость: Оркестрация контейнеров позволяет разработчикам легко масштабировать приложения горизонтально или вертикально для удовлетворения изменяющихся требований к трафику. Реплицируя контейнеры на нескольких хостах, разработчики могут обеспечить бесперебойную работу приложений даже при высоких нагрузках.\n\nНапример, недавнее исследование показывает, что компании, использующие контейнеризацию и оркестрацию, достигли:\n\nСокращение времени развертывания приложений на 85%\nСнижение затрат на инфраструктуру на 74%\nНа 70% быстрее поставляются новые функции и обновления\nВ целом, контейнеры и оркестрация преобразуют способ, которым компании создают, развертывают и управляют приложениями, что приводит к более эффективному использованию ресурсов, более быстрой скорости разработки и улучшенным бизнес-результатам."
        },
        {
            "question": "Как получить количество контейнеров, работающих, приостановленных и остановленных?",
            "right_answer": "Вы можете использовать следующую команду, чтобы получить подробную информацию о установленном на вашей системе Docker. $ docker info"
        },
        {
            "question": "Вы использовали Kubernetes? Если да, то какой из них вы предпочли бы среди Docker и Kubernetes?",
            "right_answer": "Будьте очень честны в таких вопросах. Если вы использовали Kubernetes, расскажите о своем опыте работы с Kubernetes и Docker Swarm. Укажите ключевые области, где вы считали, что Docker Swarm был более эффективным, и наоборот. Посмотрите этот блог, чтобы понять различия между Docker и Kubernetes."
        },
        {
            "question": "Знаете ли вы о балансировке нагрузки между контейнерами и хостами? Как это работает?",
            "right_answer": "При использовании сервиса Docker с несколькими контейнерами на разных хостах, вам придется столкнуться с необходимостью балансировки входящего трафика. Балансировка нагрузки и HAProxy в основном используются для распределения входящего трафика между различными доступными (здоровыми) контейнерами. Если один контейнер выйдет из строя, другой контейнер должен автоматически начать работу, и трафик должен быть перенаправлен на этот новый работающий контейнер. Балансировка нагрузки и HAProxy работают в соответствии с этим принципом."
        },
        {
            "question": "Как войти в репозиторий Docker?",
            "right_answer": "Вы можете использовать следующую команду для входа в hub.docker.com: $ docker login Вам будет предложено ввести имя пользователя и пароль, введите их и поздравляем, вы вошли в систему."
        },
        {
            "question": "Где, по вашему мнению, используется Docker?",
            "right_answer": "Когда задают такой вопрос, отвечайте, говоря о применении Docker. Docker используется в следующих областях: упрощение конфигурации, управление кодовым конвейером, повышение производительности разработчика, изоляция приложений, возможности отладки, многопользовательские приложения, быстрая развертка."
        },
        {
            "question": "Является ли хорошей практикой запуск Docker compose в продакшене?",
            "right_answer": "Да, использование Docker compose в продакшене является лучшим практическим применением Docker compose. Когда вы определяете приложения с помощью compose, вы можете использовать это определение compose на различных этапах продакшена, таких как CI, стейджинг, тестирование и т. д."
        },
        {
            "question": "Как вы отслеживаете контейнеризованные приложения? Какие метрики вы отслеживаете?",
            "right_answer": "Когда речь идет о мониторинге контейнеризованных приложений, я обычно использую комбинацию инструментов, чтобы убедиться, что все работает без сбоев. Вот несколько ключевых метрик, которые я отслеживаю: использование ЦП и памяти, перезапуски контейнеров, сетевой трафик и логи."
        },
        {
            "question": "Могу ли я использовать JSON вместо YAML для моего файла compose в Docker?",
            "right_answer": "Вы можете использовать JSON вместо YAML для вашего файла compose, чтобы использовать JSON файл с compose, укажите имя JSON файла для использования, например: $ docker-compose -f docker-compose.json up"
        },
        {
            "question": "В чем отличие Docker от других методов контейнеризации?",
            "right_answer": "Контейнеры Docker очень легко развертывать на любой облачной платформе. Они позволяют запускать больше приложений на одном и том же оборудовании по сравнению с другими технологиями, облегчают быстрое создание готовых к запуску контейнеризованных приложений разработчиками и упрощают управление и развертывание приложений. Вы даже можете делиться контейнерами со своими приложениями."
        },
        {
            "question": "Существует ли способ определить состояние контейнера Docker?",
            "right_answer": "Существует шесть возможных состояний, в которых контейнер может находиться в любой момент - Created, Running, Paused, Restarting, Exited, Dead. Используйте следующую команду для проверки состояния Docker в любой момент: $ docker ps. Вышеприведенная команда по умолчанию отображает только запущенные контейнеры. Чтобы просмотреть все контейнеры, используйте следующую команду: $ docker ps -a"
        },
        {
            "question": "Когда использовать “.dockerfile_name” и когда использовать полный путь?",
            "right_answer": "Используйте “.dockerfile_name” когда Dockerfile находится в том же каталоге, и используйте полный путь, если он находится в другом месте."
        },
        {
            "question": "Что такое пространство имен Docker?",
            "right_answer": "Пространство имен - одна из функций Linux и важное понятие контейнеров. Пространство имен добавляет слой изоляции в контейнерах. Docker предоставляет различные пространства имен для обеспечения портативности и невлияния на базовую систему хоста. Несколько типов пространств имен, поддерживаемых Docker - PID, Mount, IPC, User, Network"
        },
        {
            "question": "Что такое Docker Container?",
            "right_answer": "Контейнеры Docker включают в себя приложение и все его зависимости. Они разделяют ядро с другими контейнерами, работая как изолированные процессы в пользовательском пространстве на хост-операционной системе. Контейнеры Docker не привязаны к какой-либо конкретной инфраструктуре: они работают на любом компьютере, на любой инфраструктуре и в любом облаке. Контейнеры Docker в основном являются экземплярами выполнения образов Docker."
        },
        {
            "question": "Превзойдет ли облако использование контейнеризации?",
            "right_answer": "Контейнеры Docker становятся все более популярными, но в то же время облачные сервисы демонстрируют хорошую конкуренцию. На мой взгляд, Docker никогда не будет заменен облаком. Использование облачных сервисов с контейнеризацией определенно усилит игру. Организации должны учитывать свои требования и зависимости и принимать решение, что для них лучше. Большинство компаний интегрировали Docker с облаком. Таким образом, они могут извлечь максимальную пользу из обеих технологий."
        }
    ]
}