{
    "category_full_form": "Программист_DevOps инженер_Контейнеризация и оркестрация",
    "category_human_form": "DevOps инженер_Контейнеризация и оркестрация",
    "category_filename_form": "программист_devops-инженер_контейнеризация-и-оркестрация",
    "questions": [
        {
            "question": "Может ли контейнер перезапуститься самостоятельно?",
            "right_answer": "Нет, контейнер не может перезапуститься самостоятельно. По умолчанию флаг -restart установлен в значение false."
        },
        {
            "question": "Вы использовали Kubernetes? Если да, то какой из них вы предпочли бы среди Docker и Kubernetes?",
            "right_answer": "Будьте очень честны в таких вопросах. Если вы использовали Kubernetes, расскажите о своем опыте работы с Kubernetes и Docker Swarm. Укажите ключевые области, где вы считали, что Docker Swarm был более эффективным, и наоборот. Посмотрите этот блог, чтобы понять различия между Docker и Kubernetes."
        },
        {
            "question": "Можно ли удалить приостановленный контейнер из Docker?",
            "right_answer": "Ответ - нет. Вы не можете удалить приостановленный контейнер. Контейнер должен быть в состоянии остановленного перед тем, как его можно будет удалить."
        },
        {
            "question": "Каков ваш опыт работы с Kubernetes? Как вы использовали его в производственной среде?",
            "right_answer": "У меня обширный опыт работы с Kubernetes в производственных средах. На предыдущей работе в компании XYZ мы использовали Kubernetes для управления нашей микросервисной архитектурой, и это оказалось революционным для нашей команды. Мы смогли автоматизировать развертывание, масштабирование и управление нашими контейнерами, что упростило поддержку нашей инфраструктуры и обеспечило высокую доступность и масштабируемость наших сервисов. Одним из основных преимуществ было сокращение времени развертывания. До использования Kubernetes наш процесс развертывания был ручным и затратным по времени. С Kubernetes мы смогли автоматизировать его, сократив время развертывания с часов до нескольких минут. Еще одним значительным преимуществом была масштабируемость наших сервисов. Мы могли легко масштабировать наши сервисы вверх или вниз в зависимости от спроса, без простоев. Эта гибкость позволила нам последовательно удовлетворять потребности наших клиентов, даже во время пиковых нагрузок. Мы также смогли улучшить наши возможности мониторинга и логирования. Kubernetes предоставляет надежные инструменты мониторинга и логирования, что позволило нам быстро выявлять и устранять проблемы. В целом, наш опыт работы с Kubernetes был чрезвычайно положительным. Он помог нам оптимизировать наш процесс развертывания, улучшить нашу масштабируемость и доступность, а также улучшить наши возможности мониторинга и логирования."
        },
        {
            "question": "В чем разница между виртуализацией и контейнеризацией?",
            "right_answer": "Контейнеры обеспечивают изолированную среду для запуска приложения. Весь пользовательский пространство явно выделен для приложения. Любые изменения, внесенные в контейнер, никогда не отражаются на хосте или даже на других контейнерах, работающих на том же хосте. Контейнеры являются абстракцией уровня приложения. Каждый контейнер - это отдельное приложение. В то время как виртуализация, гипервизоры предоставляют целую виртуальную машину для гостя (включая ядро). Виртуальные машины являются абстракцией уровня аппаратного обеспечения. Каждая виртуальная машина - это физическая машина."
        },
        {
            "question": "Что лучше: непосредственно удалить контейнер с помощью команды rm или сначала остановить контейнер, а затем удалить его?",
            "right_answer": "Всегда лучше сначала остановить контейнер, а затем удалить его с помощью команды remove."
        },
        {
            "question": "Как вы перечислите все запущенные контейнеры?",
            "right_answer": "Следующая команда перечисляет все запущенные контейнеры: $ docker ps"
        },
        {
            "question": "Какие распространенные ошибки следует избегать при развертывании контейнеризованных приложений в производство?",
            "right_answer": "Развертывание контейнеризованных приложений в производство может быть сложным. Вот некоторые распространенные ошибки, которые следует избегать, чтобы обеспечить успешное развертывание: Неправильное мониторинг контейнеров, Перераспределение ресурсов, Недостаточная безопасность контейнеров, Конфликты зависимостей, Недостаточное тестирование в среде, подобной производственной."
        },
        {
            "question": "Если вы хотите использовать базовое изображение и внести изменения или настроить его, как вы это делаете?",
            "right_answer": "Вы загружаете изображение с Docker Hub на свою локальную систему"
        },
        {
            "question": "Как вы обеспечиваете соблюдение регулятивных требований при использовании контейнеризованных приложений?",
            "right_answer": "Как DevOps инженер с обширным опытом работы с контейнеризованными приложениями, обеспечение соблюдения регулятивных требований всегда является для меня приоритетом. Вот шаги, которые я предпринимаю для обеспечения соблюдения регулятивных требований: выявление регулятивных требований, разработка мер безопасности, непрерывный мониторинг, регулярные оценки и аудиты, регулярное обучение и информирование."
        },
        {
            "question": "Является ли хорошей практикой запуск Docker compose в продакшене?",
            "right_answer": "Да, использование Docker compose в продакшене является лучшим практическим применением Docker compose. Когда вы определяете приложения с помощью compose, вы можете использовать это определение compose на различных этапах продакшена, таких как CI, стейджинг, тестирование и т. д."
        },
        {
            "question": "Где, по вашему мнению, используется Docker?",
            "right_answer": "Когда задают такой вопрос, отвечайте, говоря о применении Docker. Docker используется в следующих областях: упрощение конфигурации, управление кодовым конвейером, повышение производительности разработчика, изоляция приложений, возможности отладки, многопользовательские приложения, быстрая развертка."
        },
        {
            "question": "Знаете ли вы, зачем используется docker system prune? Что он делает?",
            "right_answer": "$ docker system prune\n\nДанный команда используется для удаления всех остановленных контейнеров, всех неиспользуемых сетей, всех висячих образов и всех кэшей сборки. Это одна из самых полезных команд docker."
        },
        {
            "question": "Каков жизненный цикл контейнера Docker?",
            "right_answer": "У контейнеров Docker следующий жизненный цикл: Создание контейнера, Запуск контейнера, Приостановка контейнера (по желанию), Возобновление работы контейнера (по желанию), Запуск контейнера, Остановка контейнера, Перезапуск контейнера, Прекращение работы контейнера, Уничтожение контейнера"
        },
        {
            "question": "На каких платформах работает Docker?",
            "right_answer": "Docker работает на различных административных версиях Linux: Ubuntu 12.04, 13.04 и т. д., Fedora 19/20+, RHEL 6.5+, CentOS 6+, Gentoo, ArchLinux, openSUSE 12.3+, CRUX 3.0+. Также его можно использовать в производстве с облачными платформами, такими как Amazon EC2, Amazon ECS, Google Compute Engine, Microsoft Azure, Rackspace."
        }
    ]
}