{
    "category_full_form": "Программист_Backend разработчик_C# + .NET Core",
    "category_human_form": "Backend разработчик_C# + .NET Core",
    "category_filename_form": "программист_backend-разработчик_c-net-core",
    "questions": [
        {
            "question": "Что такое класс Hash table в C#?",
            "right_answer": "Класс Hash table представляет собой коллекцию пар ключ/значение, организованных на основе хэш-кода ключа."
        },
        {
            "question": "В чем разница между directcast и ctype?",
            "right_answer": "Если объект должен иметь тип времени выполнения, аналогичный другому объекту, то используется DirectCast для преобразования. Когда преобразование происходит между выражением и типом, то используется Ctype."
        },
        {
            "question": "Что произойдет, если имена методов в унаследованных интерфейсах конфликтуют?",
            "right_answer": "Проблема может возникнуть, когда методы из различных интерфейсов ожидают разные данные. Но когда речь идет о самом компиляторе, проблем не должно возникнуть."
        },
        {
            "question": "Можно ли использовать команду “this” в статическом методе?",
            "right_answer": "Нет. Это потому что только статические переменные/методы могут быть использованы в статическом методе."
        },
        {
            "question": "Как наследовать класс в другой класс в C#?",
            "right_answer": "В C#, двоеточие можно использовать как оператор наследования. Вам нужно поставить двоеточие и следовать за ним именем класса."
        },
        {
            "question": "Что такое мультикастинг делегатов в C#?",
            "right_answer": "Мультикастинг делегатов позволяет пользователям указывать на более чем один метод в одном вызове."
        },
        {
            "question": "Обсудите различные методы передачи параметров в методе.",
            "right_answer": "Различные методы передачи параметров в метод включают в себя -\n\nВыходные параметры: Позволяют методу возвращать более одного значения.\nПараметры значений: Формальное значение копирует и сохраняет значение фактического аргумента, что позволяет манипулировать формальным параметром без влияния на значение фактического параметра.\nПараметры ссылки: Адрес памяти фактического параметра сохраняется в формальном аргументе, что означает, что любое изменение формального параметра будет отражаться и на фактическом аргументе."
        },
        {
            "question": "Что такое конструкторы?",
            "right_answer": "Конструктор - это функция-член с тем же именем, что и его класс. Конструктор автоматически вызывается при создании объекта. При инициализации класса он конструирует все значения членов данных."
        },
        {
            "question": "В чем разница между параметрами out и ref?",
            "right_answer": "Когда аргумент передается как ref, он должен быть инициализирован перед передачей в метод. Параметр out, с другой стороны, не требуется инициализировать перед передачей в метод."
        },
        {
            "question": "Что вы понимаете под свойствами Get и Set Accessor?",
            "right_answer": "В C# Get и Set называются аксессорами, потому что они используют свойства. Такие закрытые поля доступны через аксессоры."
        },
        {
            "question": "В чем разница между read-only и константами?",
            "right_answer": "Во время компиляции константные переменные объявляются и инициализируются. Позже невозможно изменить это конкретное значение. С другой стороны, read-only используется после присвоения значения во время выполнения."
        },
        {
            "question": "Что такое объект?",
            "right_answer": "Объект - это экземпляр класса, который можно использовать для доступа к методам класса. Ключевое слово 'New' можно использовать для создания объекта."
        },
        {
            "question": "Как можно отсортировать элементы массива в порядке убывания?",
            "right_answer": "Вы можете использовать метод Sort() и затем метод Reverse()."
        },
        {
            "question": "В чем разница между операторами “is” и “as” в C#?",
            "right_answer": "Оператор “is” может использоваться для проверки совместимости объекта с заданным типом, и результат возвращается как логическое значение. Оператор “as” может использоваться для приведения объекта к типу или классу."
        },
        {
            "question": "Напишите особенности обобщений в C#?",
            "right_answer": "Обобщения - это техника улучшения вашей программы различными способами, включая создание обобщенных классов и повторное использование кода."
        }
    ]
}