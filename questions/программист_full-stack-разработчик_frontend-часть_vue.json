{
    "category_full_form": "Программист_Full Stack разработчик_Frontend часть_Vue",
    "category_human_form": "Full Stack разработчик_Vue",
    "category_filename_form": "программист_full-stack-разработчик_frontend-часть_vue",
    "questions": [
        {
            "question": "Что такое хранилище vuex?",
            "right_answer": "Хранилище Vuex - это в основном контейнер, который содержит состояние вашего приложения. Создание хранилища довольно просто."
        },
        {
            "question": "Нужно ли заменять весь локальный стейт на vuex?",
            "right_answer": "Нет, если часть стейта строго принадлежит одному компоненту, то вполне можно оставить его как локальный стейт. То есть, даже если vuex используется в приложении, это не означает, что нужно хранить весь локальный стейт в хранилище vuex. Кроме того, код становится более громоздким и косвенным, хотя это делает мутации стейта более явными и отлаживаемыми."
        },
        {
            "question": "Что такое vuetify?",
            "right_answer": "Vuetify - это семантический компонентный материал для Vue. Он стремится предоставить чистые, семантические и многократно используемые компоненты, которые облегчают создание приложений."
        },
        {
            "question": "Что такое Dev Tools и для чего он предназначен?",
            "right_answer": "DevTools - это расширение браузера, позволяющее вам проверять и отлаживать ваши приложения Vue в более удобном интерфейсе."
        },
        {
            "question": "Как настроить vuejs в webpack?",
            "right_answer": "Вы можете настроить vueJS в webpack, используя псевдоним, как показано ниже,\n\nmodule.exports = {\n  // ...\n  resolve: {\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js' // 'vue/dist/vue.common.js' для webpack 1\n    }\n  }\n}"
        },
        {
            "question": "Что такое пресеты?",
            "right_answer": "Пресет Vue CLI - это JSON-объект, который содержит заранее определенные параметры и плагины для создания нового проекта без интерактивных подсказок для их выбора. Во время создания проекта (используя vue create), пресеты будут сохранены в ~/.vuerc, который можно изменить в любое время."
        },
        {
            "question": "Могу ли я использовать локальные пресеты?",
            "right_answer": "Да, Vue CLI загрузит локальные пресеты, если значение для опции --preset является относительным или абсолютным путем к файлу, или заканчивается на .json. То есть, вы можете работать с локальными пресетами напрямую. Эти локальные пресеты позволяют избежать повторной загрузки пресета в удаленный репозиторий для тестирования."
        },
        {
            "question": "Какие принципы применяет vuex?",
            "right_answer": "Vuex применяет следующие высокоуровневые принципы: Состояние уровня приложения должно быть централизовано в хранилище, Состояние должно изменяться только путем совершения мутаций (т. е. для синхронных транзакций), Действия должны использоваться для асинхронных транзакций."
        },
        {
            "question": "Что такое мутации?",
            "right_answer": "Мутации Vuex аналогичны любым событиям с типом строки и обработчиком. Функция обработчика - это место, где мы выполняем фактические изменения состояния, и она будет получать состояние в качестве первого аргумента."
        },
        {
            "question": "Как реализовать локализацию чисел?",
            "right_answer": "Вы можете локализовать число с помощью форматов определения (например, валюта и т. д.)"
        },
        {
            "question": "Как вы компонуете действия?",
            "right_answer": "Вы можете написать несколько действий вместе, чтобы обрабатывать более сложные асинхронные потоки, либо цепляя обещания, либо используя async/await. Например, store.dispatch может обрабатывать Promise, возвращаемый обработчиком запущенного действия, и также возвращает Promise."
        },
        {
            "question": "Как вызвать наблюдателей при инициализации?",
            "right_answer": "Вы можете использовать опцию immediate: true, чтобы вызвать наблюдателей при создании экземпляра Vue (или компонента). То есть эта опция вызовет обратный вызов немедленно с текущим значением выражения."
        },
        {
            "question": "Как выполнять мутации в компонентах?",
            "right_answer": "Вы можете выполнять мутации в компонентах с помощью this.$store.commit('имя мутации') или помощника mapMutations для сопоставления методов компонента с вызовами store.commit."
        },
        {
            "question": "Можно ли использовать пользовательское имя внедрения для модулей CSS?",
            "right_answer": "Вы можете настроить имя внедренного вычисляемого свойства, указав значение атрибута модуля. Это поможет избежать перезаписи внедренных стилей, если у вас есть более одного тега <style> в одном компоненте *.vue."
        },
        {
            "question": "Могу ли я использовать строгий режим в производственной среде?",
            "right_answer": "Нет, не рекомендуется использовать строгий режим в производственной среде. Строгий режим запускает синхронный глубокий наблюдатель за деревом состояний для обнаружения неправильных мутаций, и это может быть довольно дорого, когда вы выполняете большое количество мутаций. То есть, это может повлиять на производительность, если вы включите его в режиме производства. Поэтому это должно обрабатываться с помощью средств сборки, const store = new Vuex.Store({ // ... strict: process.env.NODE_ENV !== 'production' })"
        }
    ]
}