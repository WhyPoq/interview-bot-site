{
    "category_full_form": "Программист_Full Stack разработчик_Frontend часть_Vue",
    "category_human_form": "Full Stack разработчик_Vue",
    "category_filename_form": "программист_full-stack-разработчик_frontend-часть_vue",
    "questions": [
        {
            "question": "Что такое Composition API?",
            "right_answer": "Composition API - это набор дополнительных API на основе функций, которые позволяют гибкое объединение логики компонентов."
        },
        {
            "question": "Что такое слоты?",
            "right_answer": "Vue реализует API распределения контента, используя элемент <slot> в качестве точек распределения для контента, созданного после текущего черновика спецификации веб-компонентов."
        },
        {
            "question": "Что такое плагин vuex?",
            "right_answer": "Плагин vuex - это опция, которая предоставляет хуки для каждой мутации. Это обычная функция, которая принимает хранилище в качестве единственного аргумента. Вы можете создать свой собственный плагин или использовать встроенные плагины."
        },
        {
            "question": "Что такое Dev Tools и для чего он предназначен?",
            "right_answer": "DevTools - это расширение браузера, позволяющее вам проверять и отлаживать ваши приложения Vue в более удобном интерфейсе."
        },
        {
            "question": "Как реализовать локализацию чисел?",
            "right_answer": "Вы можете локализовать число с помощью форматов определения (например, валюта и т. д.)"
        },
        {
            "question": "Как вы компонуете действия?",
            "right_answer": "Вы можете написать несколько действий вместе, чтобы обрабатывать более сложные асинхронные потоки, либо цепляя обещания, либо используя async/await. Например, store.dispatch может обрабатывать Promise, возвращаемый обработчиком запущенного действия, и также возвращает Promise."
        },
        {
            "question": "Как получить доступ к родительскому экземпляру?",
            "right_answer": "$parent объект ссылается на непосредственную внешнюю область видимости. Родитель будет доступен как this.$parent для дочернего элемента, и дочерний элемент будет добавлен в массив $children родителя. Это устанавливает отношение родитель-ребенок между двумя экземплярами (родитель и ребенок). Вы можете получить доступ к данным и свойствам родителя аналогично $root."
        },
        {
            "question": "Можно ли использовать пользовательское имя внедрения для модулей CSS?",
            "right_answer": "Вы можете настроить имя внедренного вычисляемого свойства, указав значение атрибута модуля. Это поможет избежать перезаписи внедренных стилей, если у вас есть более одного тега <style> в одном компоненте *.vue."
        },
        {
            "question": "Как вы следите за изменениями объекта маршрута?",
            "right_answer": "Вы можете настроить наблюдатель на $route в вашем компоненте. Он отслеживает изменения маршрута и, когда они происходят, устанавливает свойство сообщения."
        },
        {
            "question": "Какова особенность обработки значений null в аргументах динамической директивы?",
            "right_answer": "Значения динамических аргументов ожидаются в виде строк, но допускается использование null в качестве специального значения, которое явно указывает на то, что привязка должна быть удалена. Другие типы будут рассматриваться как ошибки и вызовут предупреждение. Таким образом, значение null можно применять для v-bind и v-on."
        },
        {
            "question": "Как создать реактивные объекты?",
            "right_answer": "В версии 3.0 вы можете создать реактивный объект с помощью API reactive()."
        },
        {
            "question": "Какие методы жизненного цикла есть в VueJS?",
            "right_answer": "Хуки жизненного цикла - это окно в то, как работает используемая вами библиотека за кулисами. Используя эти хуки, вы будете знать, когда ваш компонент создается, добавляется в DOM, обновляется или уничтожается."
        },
        {
            "question": "Что такое коммит в стиле объекта?",
            "right_answer": "Вы также можете зафиксировать мутацию, используя непосредственно объект, который имеет свойство тип."
        },
        {
            "question": "Что такое компоненты и приведите пример?",
            "right_answer": "Компоненты - это многоразовые экземпляры Vue с именем. Они принимают те же параметры, что и новый Vue, такие как data, computed, watch, methods и lifecycle hooks (за исключением нескольких специфических параметров корня, таких как el). Пример компонента - это компонент button-counter, который отображает кнопку, увеличивающую счетчик при нажатии."
        },
        {
            "question": "Можно ли передавать параметры для фильтров?",
            "right_answer": "Да, вы можете передавать аргументы для фильтра, аналогично функции JavaScript. Общая структура параметров фильтра будет следующей, {{ message | filterA('arg1', arg2) }}."
        }
    ]
}