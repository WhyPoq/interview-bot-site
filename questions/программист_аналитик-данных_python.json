{
    "category_full_form": "Программист_Аналитик данных_Python",
    "category_human_form": "Аналитик данных_Python",
    "category_filename_form": "программист_аналитик-данных_python",
    "questions": [
        {
            "question": "Как создаются классы в Python?",
            "right_answer": "Ключевое слово class в Python используется для создания класса."
        },
        {
            "question": "Что такое PYTHONPATH?",
            "right_answer": "Это переменная среды, которая используется при импорте модуля. При импорте модуля PYTHONPATH проверяется, чтобы увидеть, присутствуют ли импортированные модули в различных папках. Она используется интерпретатором для определения, какой модуль загружать."
        },
        {
            "question": "Как использовать print() без перехода на новую строку?",
            "right_answer": "Решение зависит от версии Python, которую вы используете.\n\nPython v2\n\n>>print(“Hi. ”),\n\n>>print(“How are you?”)\n\nВывод: Hi. How are you?\n\nPython v3\n\n>>print(“Hi”,end=“ ”)\n\n>>print(“How are you?”)\n\nВывод: Hi. How are you?"
        },
        {
            "question": "Что такое GIL?",
            "right_answer": "Термин GIL означает Глобальный блокировщик интерпретатора. Это мьютекс, который помогает синхронизации потоков, предотвращая взаимные блокировки путем ограничения доступа к объектам Python. GIL помогает с многозадачностью (а не параллельным вычислениям)."
        },
        {
            "question": "Как достигается многопоточность в Python?",
            "right_answer": "Многопоточность обычно подразумевает, что несколько потоков выполняются параллельно. Глобальный замок интерпретатора Python не позволяет более одного потока удерживать интерпретатор Python в определенный момент времени. Поэтому многопоточность в Python достигается через переключение контекста. Это совершенно отличается от мультипроцессинга, который фактически открывает несколько процессов по всем потокам."
        },
        {
            "question": "Как в Python управляется память?",
            "right_answer": "Управление памятью в Python осуществляется частным кучей. Частная куча содержит все объекты Python и структуры данных. Эта секретная куча недоступна программисту. Вместо этого об этом заботится интерпретатор Python. Python также включает в себя встроенный сборщик мусора, который перерабатывает всю неиспользуемую память и делает ее доступной для кучи. Управление памятью в Python отвечает за выделение кучи для объектов Python. Основной API предоставляет программистам доступ к некоторым инструментам программирования."
        },
        {
            "question": "Что такое PIP?",
            "right_answer": "PIP обозначает Python Installer Package. Он используется для установки различных модулей Python. Это утилита командной строки, которая создает унифицированный интерфейс для установки различных модулей Python. Он ищет пакет в интернете и устанавливает его в рабочий каталог без необходимости какого-либо вмешательства пользователя."
        },
        {
            "question": "Как происходит объединение dataframe в Pandas?",
            "right_answer": "Способ объединения dataframe в Pandas зависит от типа и полей объединяемых dataframe. Если данные имеют идентичные поля, они объединяются вдоль оси 0, в противном случае они объединяются вдоль оси 1."
        },
        {
            "question": "Что делает оператор 'is'?",
            "right_answer": "Оператор 'is' сравнивает идентификатор двух объектов."
        },
        {
            "question": "Как объединить фреймы данных в Pandas?",
            "right_answer": "Это один из самых часто задаваемых вопросов на собеседованиях по Python. Вот способы, с помощью которых можно объединить фреймы данных в Pandas: Конкатенация их путем вертикального стекинга двух фреймов данных. Конкатенация их путем горизонтального стекинга двух фреймов данных. Объединение их в один столбец"
        },
        {
            "question": "Что такое наследование в Python?",
            "right_answer": "Наследование позволяет одному классу получить все члены другого класса (например, атрибуты и методы). Наследование обеспечивает повторное использование кода, что упрощает разработку и поддержку приложений."
        },
        {
            "question": "В чем разница между .pyc и .py?",
            "right_answer": ".py файлы являются файлами исходного кода для Python. Байт-код python файлов хранится в файлах .pyc, которые создаются при импорте кода из другого источника. Интерпретатор экономит время, преобразуя файлы .py в файлы .pyc."
        },
        {
            "question": "Как оставить только два наиболее часто встречающихся значения как они есть и заменить все остальное на 'другое' в серии?",
            "right_answer": ">> #Input\n\n>>import pandas as pd\n\n>>np.random.RandomState(100)\n\n>>ser = pd.Series(np.random.randint(1, 5, [12]))\n\n>> #Solution\n\n>>print('Top 2 Freq:', ser.value_counts())\n\n>>ser[~ser.isin(ser.value_counts().index[:2])] = 'Other’\n\n>>ser"
        },
        {
            "question": "Что такое docstrings?",
            "right_answer": "Docstrings - это строковая документация. Внутри тройных кавычек находятся эти docstrings. Они не присваиваются никакой переменной и, следовательно, могут использоваться как комментарии."
        },
        {
            "question": "В Python функции являются объектами первого класса. Что вы делаете из этого?",
            "right_answer": "Это означает, что функцию можно обращаться как к объекту. Вы можете присваивать их переменным или передавать их в качестве аргументов другим функциям. Вы даже можете возвращать их из других функций."
        }
    ]
}