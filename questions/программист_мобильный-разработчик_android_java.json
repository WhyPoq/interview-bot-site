{
    "category_full_form": "Программист_Мобильный разработчик_Android_Java",
    "category_human_form": "Мобильный разработчик_Java",
    "category_filename_form": "программист_мобильный-разработчик_android_java",
    "questions": [
        {
            "question": "Объясните интерфейс Externalizable.",
            "right_answer": "Интерфейс Externalizable помогает контролировать процесс сериализации. Интерфейс 'externalisable' включает методы readExternal и writeExternal."
        },
        {
            "question": "Можем ли мы изменить область видимости переопределенного метода в подклассе?",
            "right_answer": "Нет, мы не можем изменить область видимости переопределенного метода в подклассе."
        },
        {
            "question": "Что вы понимаете под экземплярной переменной и локальной переменной?",
            "right_answer": "Экземплярные переменные и локальные переменные - это два типа переменных в Java. Экземплярные переменные объявляются внутри класса, но вне любого метода. Они используются для хранения данных, которые специфичны для объекта. Локальные переменные, с другой стороны, объявляются внутри метода и используются для хранения временных данных, которые требуются только внутри этого метода. Одним из основных различий между экземплярными переменными и локальными переменными является их область видимости. Экземплярные переменные имеют более широкую область видимости, чем локальные переменные. Второе различие между экземплярными переменными и локальными переменными заключается в их инициализации. Экземплярные переменные инициализируются автоматически значениями по умолчанию, если они не инициализированы явно, в то время как локальные переменные должны быть инициализированы явно перед использованием."
        },
        {
            "question": "В чем разница между созданием строки с использованием new() и литерала?",
            "right_answer": "Оператор new() всегда создает новый объект в куче памяти при создании объекта String. Строковый пул может вернуть существующий объект, если мы создаем объект, используя синтаксис строкового литерала, такой как \"Baeldung\"."
        },
        {
            "question": "Какие различные способы использования потоков?",
            "right_answer": "Существует два способа определения и реализации потока в Java. Это реализация интерфейса Runnable и расширение класса Thread."
        },
        {
            "question": "Можем ли мы перегрузить статический метод?",
            "right_answer": "Нет, Java не поддерживает перегрузку статического метода. Процесс вызовет ошибку с сообщением 'статический метод не может быть обращен'."
        },
        {
            "question": "Зачем используются обобщения в программировании на Java?",
            "right_answer": "Обобщения обеспечивают безопасность типов на этапе компиляции. Безопасность типов на этапе компиляции позволяет пользователям обнаруживать ненужные недопустимые типы на этапе компиляции. Обобщенные методы и классы помогают программистам указать одно объявление метода, набор связанных методов или связанные типы с доступным объявлением класса."
        },
        {
            "question": "Что произойдет, если статический модификатор не указан в сигнатуре главного метода в Java?",
            "right_answer": "Главная функция вызывается JVM даже до создания объектов, поэтому даже если код успешно компилируется, все равно возникнет ошибка во время выполнения."
        },
        {
            "question": "Что такое ключевое слово final в Java?",
            "right_answer": "Термин final - это предопределенное слово в Java, которое используется при объявлении значений переменных. Когда значение объявляется с использованием ключевого слова final, то значение переменной остается постоянным на протяжении выполнения программы."
        },
        {
            "question": "Что такое JIT компилятор?",
            "right_answer": "JIT компилятор относится к компилятору Just in Time. Это самый простой способ выполнения компьютерного кода, который происходит во время выполнения программы, а не до ее выполнения. Обычно он использует перевод байт-кода в машинный код. Затем он выполняется непосредственно."
        },
        {
            "question": "Можно ли вызывать конструктор класса внутри другого конструктора?",
            "right_answer": "Да, класс может включать любое количество конструкторов, и каждый конструктор может вызывать другие, используя функцию вызова this(). Первая строка конструктора должна быть либо this() или this(args). Перегрузка конструкторов - это то, как это называется."
        },
        {
            "question": "Почему синхронизация необходима? Объясните на примере.",
            "right_answer": "Попытки нескольких потоков получить доступ к одним и тем же ресурсам в многопоточном программном обеспечении часто приводят к неожиданным и неправильным результатам. Поэтому необходимо обеспечить через какую-то форму синхронизации, что только один поток может получить доступ к ресурсу в любой момент времени. Java предлагает метод настройки потоков и синхронизации их операций с помощью синхронизированных блоков. Ключевое слово synchronized в Java используется для идентификации синхронизированных блоков. В Java синхронизированный блок связан с объектом. Только один поток может выполняться внутри синхронизированных блоков, так как все они синхронизированы на одном и том же объекте. До тех пор, пока поток внутри синхронизированного блока не выйдет из блока, все остальные потоки, пытающиеся войти в блок, блокируются."
        },
        {
            "question": "Когда можно использовать ключевое слово 'super'?",
            "right_answer": "В основном, ключевое слово super используется для обращения к родительскому классу. Когда в родительском и дочернем классах есть одинаковые поля, тогда можно использовать ключевое слово super для доступа к данным родительского класса."
        },
        {
            "question": "Почему метод main статический в Java?",
            "right_answer": "Функция main() в Java по умолчанию является статической, что позволяет компилятору вызывать ее до или после создания объекта класса. Функция main() - это место, где компилятор начинает выполнение программы в каждой программе на Java. Таким образом, метод main() должен быть вызван компилятором. Если метод main() разрешено сделать нестатическим, то JVM должна создать экземпляр его класса при вызове функции."
        },
        {
            "question": "Какие различия между конструктором и методом класса в Java?",
            "right_answer": "Инициализация состояния объекта выполняется конструкторами. Функция Object() { [native code] }, как и методы, содержит группу операторов (или инструкций), которые выполняются при создании объекта. Метод - это группа операторов, которые работают вместе для выполнения определенной задачи и возвращают результат вызывающему. Метод может работать и без возврата чего-либо."
        }
    ]
}