{
    "category_full_form": "Программист_Full Stack разработчик_Backend часть_Node.js",
    "category_human_form": "Full Stack разработчик_Node.js",
    "category_filename_form": "программист_full-stack-разработчик_backend-часть_nodejs",
    "questions": [
        {
            "question": "Что такое REPL? Для каких целей его используют?",
            "right_answer": "REPL расшифровывается как (READ, EVAL, PRINT, LOOP). Node js поставляется с встроенной средой REPL. Это позволяет легко создавать приложения с интерфейсом командной строки (CLI)."
        },
        {
            "question": "Как Node.js обрабатывает дочерние потоки?",
            "right_answer": "Node.js, по своей сути, является процессом с одним потоком. Он не предоставляет разработчику доступ к дочерним потокам и методам управления потоками. Технически, Node.js создает дочерние потоки для определенных задач, таких как асинхронный ввод/вывод, но они работают в фоновом режиме и не выполняют никакого кода приложения на JavaScript, а также не блокируют основной цикл событий. Если в приложении Node.js требуется поддержка потоков, существуют инструменты, позволяющие ее включить, такие как модуль ChildProcess. Фактически, в Node.js 12 есть экспериментальная поддержка потоков."
        },
        {
            "question": "Какой обычно является первым аргументом, передаваемым в обработчик обратного вызова Node.js?",
            "right_answer": "Основные модули Node.js, а также большинство опубликованных сообществом, следуют шаблону, согласно которому первым аргументом для любого обработчика обратного вызова является необязательный объект ошибки. Если ошибки нет, аргумент будет равен null или undefined."
        },
        {
            "question": "Объясните, почему время выполнения кода в Google Chrome значительно больше, чем в Node.js, хотя оба используют движок JavaScript v8.",
            "right_answer": "В веб-браузере, таком как Chrome, объявление переменной i вне области видимости любой функции делает ее глобальной и, следовательно, привязывает ее к свойству объекта window. В результате выполнения этого кода в веб-браузере требуется повторно разрешать свойство i внутри плотно населенного пространства имен window на каждой итерации цикла for. В Node.js, однако, объявление любой переменной вне области видимости любой функции привязывает ее только к собственной области модуля (а не к объекту window), что делает ее намного проще и быстрее разрешить. Следует также отметить, что использование let вместо var в объявлении цикла for может сократить время выполнения цикла более чем на 50%. Но такое изменение предполагает, что вы знаете разницу между let и var и будет ли это влиять на поведение вашего конкретного цикла."
        },
        {
            "question": "Как Node.js поддерживает многоядерные платформы и полностью ли использует все ресурсы процессора?",
            "right_answer": "Поскольку Node.js по умолчанию является однопоточным приложением, оно будет работать на одном процессорном ядре и не будет полностью использовать все ресурсы многопроцессорной системы. Однако Node.js предоставляет поддержку для развертывания на многопроцессорных системах, чтобы более полно использовать аппаратное обеспечение. Модуль Cluster является одним из основных модулей Node.js и позволяет запускать несколько рабочих процессов Node.js, которые будут использовать один и тот же порт."
        },
        {
            "question": "В чем разница между setTimeout и setImmediate в Node.js?",
            "right_answer": "setTimeout добавляет обратный вызов в очередь функций для выполнения после завершения всех текущих выполняющихся и ожидающих обработчиков событий, в то время как setImmediate проверяет очередь обработчиков событий ввода-вывода и выполняет обратный вызов немедленно после обработки всех событий ввода-вывода в текущем снимке."
        },
        {
            "question": "Что такое 'callback hell' и как его можно избежать?",
            "right_answer": "'Callback hell' относится к сильно вложенным обратным вызовам, которые стали неудобными или нечитаемыми. Основным методом решения проблемы 'callback hell' была модуляризация, при которой обратные вызовы разбиваются на независимые функции. Другим решением является использование промисов, которые позволяют передачу ошибок и цепочку вызовов. Генераторы также могут использоваться для разрешения зависимостей выполнения между различными обратными вызовами, но более актуальным решением является использование async/await."
        },
        {
            "question": "Какой предпочтительный метод разрешения необработанных исключений в Node.js?",
            "right_answer": "Необработанные исключения в Node.js могут быть перехвачены на уровне процесса, присоединив обработчик для события uncaughtException."
        }
    ]
}