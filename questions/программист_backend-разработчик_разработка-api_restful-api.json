{
    "category_full_form": "Программист_Backend разработчик_Разработка API_RESTful API",
    "category_human_form": "Backend разработчик_RESTful API",
    "category_filename_form": "программист_backend-разработчик_разработка-api_restful-api",
    "questions": [
        {
            "question": "Что такое ресурс?",
            "right_answer": "В REST ресурс - это объект с меткой и доступный на сервере. Ресурсы состоят из связанных данных, списка методов и отношений с другими ресурсами на сервере."
        },
        {
            "question": "Что такое HTTP статус-коды и их значение?",
            "right_answer": "Код 200: успех. Код 201: ресурс был успешно создан. Код 204: нет содержимого в теле ответа. Код 404: метод недоступен."
        },
        {
            "question": "Как можно протестировать RESTful веб-сервисы?",
            "right_answer": "RESTful веб-сервисы можно протестировать с помощью инструментов, таких как Swagger и Postman, которые позволяют пользователям проверять параметры запросов, заголовки ответов и заголовки, документацию конечных точек, а также преобразовывать конечные точки в XML и JSON."
        },
        {
            "question": "Что такое URI?",
            "right_answer": "URI расшифровывается как 'Унифицированный идентификатор ресурса'."
        },
        {
            "question": "Как обеспечить безопасность REST API?",
            "right_answer": "REST API можно обеспечить безопасностью с помощью мер безопасности, таких как аутентификация и авторизация, валидация сервера API, шифрование TSl/SSL, ограничение скорости для атак DDoS, и конфиденциальная информация, такая как имя пользователя, пароль или токен аутентификации, не должна быть видна в URI"
        },
        {
            "question": "Что такое AJAX?",
            "right_answer": "AJAX расшифровывается как Асинхронный JavaScript и XML."
        },
        {
            "question": "Какой максимальный размер полезной нагрузки можно отправить в методах POST?",
            "right_answer": "Теоретически, нет такого максимального предела для размера полезной нагрузки, которую можно отправить в методах POST. Однако полезные нагрузки большего размера могут потреблять большую полосу пропускания. Таким образом, сервер может занять больше времени на обработку запроса."
        },
        {
            "question": "Как связан JAXB с RESTful веб-API?",
            "right_answer": "JAXB - это Java-архитектура, используемая для привязки XML в RESTful веб-API."
        },
        {
            "question": "Что такое 'Options' в REST API?",
            "right_answer": "Это метод HTTP, используемый для получения поддерживаемых HTTP-опций или операций, которые помогают клиентам выбирать опции в REST API. Механизм Cross-Origin Resource Sharing (CORS) использует метод опции REST."
        },
        {
            "question": "Каковы особенности RESTful веб-сервисов?",
            "right_answer": "RESTful веб-сервисы имеют следующие уникальные особенности: разделение клиент-сервер, поддержка коммуникации, легковесность, унифицированный интерфейс, отсутствие состояния, слоистая система, возможность кэширования, код по требованию"
        },
        {
            "question": "Какие языки разметки используются для представления ресурсов в REST API?",
            "right_answer": "Ресурсы в REST API представляются с помощью XML (расширяемый язык разметки) и JSON (JavaScript Object Notation)."
        },
        {
            "question": "Различные типы архитектур API",
            "right_answer": "Существуют еще две архитектуры API, используемые: SOAP (Simple Object Access Protocol) и RPC (Remote Procedure Call)"
        },
        {
            "question": "Каковы преимущества REST?",
            "right_answer": "HTTP упрощает реализацию REST. REST легко вписывается в существующую инфраструктуру веб-приложений, поэтому их можно легко реализовать с помощью REST. Технологии веб-форматов XML и JSON делают REST легким для изучения. Коммуникация между клиентом и сервером является без состояния, поэтому интеграция легко строится и масштабируется, а также управляется во времени. Архитектура REST может адаптироваться к огромному разнообразию случаев благодаря своей гибкости. Легкая архитектура REST позволяет создавать приложения быстрее по сравнению с другими типами API. REST легко тестировать в браузере с помощью инструментов тестирования API."
        },
        {
            "question": "Что такое 'Ресурс'?",
            "right_answer": "'Ресурс' определяется как объект типа, который включает изображение, HTML-файл, текстовые данные и любой тип динамических данных."
        },
        {
            "question": "Почему REST-сервисы легко масштабируются?",
            "right_answer": "REST-сервисы масштабируются благодаря отсутствию состояния, поскольку они не хранят данные на сервере, даже если они запрашиваются, и не требуют много коммуникации."
        }
    ]
}