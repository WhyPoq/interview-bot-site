{
    "category_full_form": "Программист_Backend разработчик_Java + Spring",
    "category_human_form": "Backend разработчик_Java + Spring",
    "category_filename_form": "программист_backend-разработчик_java-spring",
    "questions": [
        {
            "question": "Почему индекс массива в Java начинается с 0?",
            "right_answer": "Расстояние от начала массива - это просто смещение. Нет расстояния, потому что первый элемент находится в начале массива. Следовательно, смещение равно 0."
        },
        {
            "question": "Что такое ClassLoader?",
            "right_answer": "ClassLoader в Java - это подсистема виртуальной машины Java, предназначенная для загрузки файлов классов при выполнении программы; ClassLoader первым загружает исполняемый файл."
        },
        {
            "question": "Перечислите особенности языка программирования Java?",
            "right_answer": "Несколько значимых особенностей языка программирования Java: Простота, Защищенная функция, ООП, Независимая платформа."
        },
        {
            "question": "Что произойдет, если статический модификатор не указан в сигнатуре метода main в Java?",
            "right_answer": "Функция main вызывается JVM даже до создания объектов, поэтому даже если код успешно компилируется, все равно возникнет ошибка во время выполнения."
        },
        {
            "question": "Что вы понимаете под экземплярной переменной и локальной переменной?",
            "right_answer": "Экземплярные переменные и локальные переменные - это два типа переменных в Java. Экземплярные переменные объявляются внутри класса, но вне любого метода. Они используются для хранения данных, которые специфичны для объекта. Локальные переменные, с другой стороны, объявляются внутри метода и используются для хранения временных данных, которые требуются только внутри этого метода. Одним из основных различий между экземплярными переменными и локальными переменными является их область видимости. Экземплярные переменные имеют более широкую область видимости, чем локальные переменные. Вторым различием между экземплярными переменными и локальными переменными является их инициализация. Экземплярные переменные инициализируются автоматически значениями по умолчанию, если они не инициализированы явно, в то время как локальные переменные должны быть инициализированы явно перед использованием."
        },
        {
            "question": "Что вы понимаете под экземплярной переменной и локальной переменной?",
            "right_answer": "Обычно экземплярные переменные объявляются в классе, но вне методов, в то время как локальная переменная объявляется внутри блоков кода."
        },
        {
            "question": "Различия между кучей и стековой памятью в Java",
            "right_answer": "Куча и стек - два типа памяти в Java, используемые для хранения данных. Куча используется для хранения объектов, в то время как стек используется для хранения локальных переменных и вызовов методов. Одним из основных различий между кучей и стековой памятью является их выделение и освобождение. Куча выделяется при создании объекта и освобождается, когда на этот объект больше нет ссылок. Стековая память, с другой стороны, выделяется при вызове метода и освобождается при возврате из метода. Еще одно различие между кучей и стековой памятью заключается в их размере. Куча больше стековой памяти, потому что используется для хранения объектов. Стековая память меньше, потому что используется только для хранения локальных переменных и вызовов методов."
        },
        {
            "question": "Что такое final метод?",
            "right_answer": "Final метод в Java - это метод, который не может быть переопределен в подклассе."
        },
        {
            "question": "Почему перегрузка методов не возможна путем изменения типа возвращаемого значения в Java?",
            "right_answer": "Это невозможно изменением типа возвращаемого значения в Java, потому что тип возвращаемого значения метода не является частью его сигнатуры."
        },
        {
            "question": "Почему Java динамична?",
            "right_answer": "Java разработана для адаптации к изменяющейся среде. Программы на Java включают большое количество информации о времени выполнения, которая используется для разрешения доступа к объектам в реальном времени."
        },
        {
            "question": "Что такое Java Virtual Machine?",
            "right_answer": "Это абстрактная машина, которая обеспечивает среду выполнения для запуска программ на Java. JVM интерпретирует скомпилированный Java-код и выполняет его на базовой операционной системе."
        },
        {
            "question": "Что такое Конструктор Копирования в Java?",
            "right_answer": "Конструктор Копирования в Java - это конструктор, который инициализирует объект через другой объект того же класса."
        },
        {
            "question": "Какой из String или StringBuffer следует предпочесть, когда требуется выполнить много обновлений в данных?",
            "right_answer": "Поскольку StringBuilder быстрее, чем StringBuffer, рекомендуется использовать его везде, где это возможно. Однако объекты StringBuffer являются лучшим выбором, если требуется потокобезопасность."
        },
        {
            "question": "Будет ли программа работать, если мы напишем static public void main?",
            "right_answer": "Да, программа успешно выполнится, если написано так. Потому что в Java нет конкретного правила для порядка спецификаторов"
        },
        {
            "question": "Сколько типов конструкторов используется в Java?",
            "right_answer": "В Java используется два типа конструкторов.\nПараметризованные конструкторы: Параметризованный конструктор принимает параметры, с помощью которых пользователи могут инициализировать переменные экземпляра. Пользователи могут динамически инициализировать переменные класса во время создания экземпляра класса.\nКонструкторы по умолчанию: Этот тип не принимает никаких параметров; вместо этого он создает переменные класса со значениями по умолчанию. Он используется в основном для создания объектов."
        }
    ]
}