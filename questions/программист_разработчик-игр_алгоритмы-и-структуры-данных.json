{
    "category_full_form": "Программист_Разработчик игр_Алгоритмы и структуры данных",
    "category_human_form": "Разработчик игр_Алгоритмы и структуры данных",
    "category_filename_form": "программист_разработчик-игр_алгоритмы-и-структуры-данных",
    "questions": [
        {
            "question": "Что такое структура данных очередь?",
            "right_answer": "Очередь - это абстрактный тип данных, который определяет линейную структуру данных или упорядоченный список, используя операцию First In First Out (FIFO) для доступа к элементам. Операции вставки могут выполняться только в одном конце, называемом REAR, а операции удаления могут выполняться только в другом конце, называемом FRONT."
        },
        {
            "question": "Что такое структура данных бинарного дерева поиска? Каковы применения для бинарных деревьев поиска?",
            "right_answer": "Бинарное дерево поиска - это структура данных, которая хранит элементы в отсортированном порядке. В бинарном дереве поиска каждый узел хранит ключ и значение. Ключ используется для доступа к элементу, а значение используется для определения, присутствует ли элемент или нет. Ключ может быть любого типа значения, такого как целое число, число с плавающей запятой, символьная строка или даже комбинация этих типов. Значение может быть любого типа элементов, таких как целое число, число с плавающей запятой, символьная строка или даже комбинация этих типов. Когда узел добавляется в дерево, его ключ используется для доступа к элементу, хранящемуся в этом узле. Когда узел удаляется из дерева, его ключ используется для доступа к элементу, хранящемуся в этом узле. Бинарное дерево поиска - это особый тип бинарного дерева, в котором есть определенный порядок элементов. У него три основные характеристики: Все элементы в левом поддереве узла должны иметь значение меньше или равное значению родительского узла, и все элементы в правом поддереве узла должны иметь значение больше или равное значению родительского узла. И левое, и правое поддеревья также должны быть бинарными деревьями поиска. Вот некоторые применения для структуры данных бинарного дерева: Она используется для индексации и многоуровневой индексации. Она используется для реализации различных алгоритмов поиска. Она помогает организовать отсортированный поток данных."
        },
        {
            "question": "Расскажите о различных типах структур данных массивов",
            "right_answer": "Существует несколько различных типов массивов: \n\nОдномерный массив: Одномерный массив хранит свои элементы в смежных областях памяти, обращаясь к ним с использованием одного индексного значения. Это линейная структура данных, содержащая все элементы в последовательности. \nДвумерный массив: Двумерный массив - это табличный массив, который включает строки и столбцы и хранит данные. Двумерный массив M × N создается путем группировки M строк и N столбцов в N столбцов и строк. \nТрехмерный массив: Трехмерный массив - это сетка, которая имеет строки, столбцы и глубину в качестве третьего измерения. Он состоит из куба с строками, столбцами и глубиной в качестве третьего измерения. У трехмерного массива три индекса для позиции в определенной строке, столбце и глубине. Глубина (измерение или слой) - это первый индекс, индекс строки - второй индекс, а индекс столбца - третий индекс."
        },
        {
            "question": "Что такое постфиксное выражение?",
            "right_answer": "Постфиксное выражение состоит из операторов и операндов, при этом оператор следует после операндов. То есть, в постфиксном выражении оператор идет после операндов. Каков правильный постфиксный вид? Правильная постфиксная фраза - A B + C *."
        },
        {
            "question": "Что такое структура данных AVL-дерево, какие операции и вращения в нем существуют? Какие приложения используют AVL-деревья?",
            "right_answer": "AVL-деревья - это сбалансированные по высоте двоичные деревья поиска, названные в честь их изобретателей Адельсона, Вельски и Ландиса. AVL-дерево сравнивает высоты левого и правого поддеревьев и гарантирует, что разница между ними меньше единицы. Мы можем выполнять операции вставки и удаления в AVL-деревьях, а также существуют четыре вращения для балансировки дерева. AVL-деревья используются во встроенных наборах данных, словарях, приложениях баз данных и приложениях, требующих улучшенного поиска."
        },
        {
            "question": "Какие примеры алгоритмов разделяй и властвуй?",
            "right_answer": "Быстрая сортировка - это название алгоритма сортировки. Метод выбирает опорный элемент и переставляет элементы массива так, чтобы все элементы, меньшие выбранного опорного элемента, переходили на левую сторону опоры, а все элементы, более значительные, чем опорный элемент, перемещались на правую сторону. Сортировка слиянием также является алгоритмом сортировки. Алгоритм делит массив на две половины, сортирует их рекурсивно, а затем объединяет две отсортированные половины. Целью является определение ближайшей пары точек в коллекции точек на плоскости x-y. Проблему можно решить за время O(n2), вычисляя расстояния между каждой парой точек и сравнивая их, чтобы определить самое короткое расстояние."
        },
        {
            "question": "Что такое структура данных связанный список? Какие приложения у связанного списка?",
            "right_answer": "Связанный список можно представить как серию связанных узлов (или элементов), соединенных ссылками (или путями). Каждая ссылка представляет собой вход в связанный список, и каждая запись указывает на следующий узел в последовательности. Порядок, в котором узлы добавляются в список, определяется порядком их создания. Ниже приведены некоторые приложения структуры данных связанный список: Стек, Очередь, бинарные деревья и графы реализуются с использованием связанных списков. Динамическое управление памятью операционной системы. Планирование по круговому алгоритму для задач операционной системы. Прямая и обратная операции в браузере."
        },
        {
            "question": "Когда следует применять бинарный поиск?",
            "right_answer": "Руководитель по найму может задать такой вопрос, чтобы оценить ваши навыки принятия решений. Отвечайте уверенно и приводите пример из реального мира, применимый к компании, в которой вы хотите устроиться. Пример: «Вы можете использовать алгоритм бинарного поиска с упорядоченным и отсортированным списком элементов. Поиск начнется в середине списка, а затем будет определено, продолжать ли поиск в верхней части или в нижней части»."
        },
        {
            "question": "Зачем нам нужно проводить анализ алгоритмов?",
            "right_answer": "Проблему можно решить несколькими способами, используя несколько алгоритмов решения. Анализ алгоритмов предоставляет оценку требуемых ресурсов алгоритма для решения конкретной вычислительной задачи. Также определяется количество временных и пространственных ресурсов, необходимых для выполнения. Временная сложность алгоритма количественно оценивает количество времени, затраченного на выполнение алгоритма в зависимости от длины ввода. Пространственная сложность количественно оценивает количество пространства или памяти, занимаемое алгоритмом, в зависимости от длины ввода."
        },
        {
            "question": "Что такое зубчатый массив?",
            "right_answer": "Это массив, элементы которого сами являются массивами и могут иметь разные размеры и размеры."
        },
        {
            "question": "Связанные списки считаются линейными или нелинейными структурами данных?",
            "right_answer": "Связанные списки считаются как линейными, так и нелинейными структурами данных в зависимости от применения, для которого они используются. Когда используются для стратегий доступа, их считают линейной структурой данных. Когда используются для хранения данных, их считают нелинейной структурой данных."
        },
        {
            "question": "Объясните разницу между линейной структурой данных и иерархической структурой данных.",
            "right_answer": "Линейные структуры данных и иерархические структуры данных описывают отношения между элементами данных, но отличаются в том, как данные взаимодействуют. Линейные структуры данных организуют данные в одноуровневую последовательность. Иерархические структуры данных организуют данные в многоуровневую конфигурацию."
        },
        {
            "question": "Каковы преимущества связанного списка перед массивом? В каких сценариях мы используем связанный список, а в каких массив?",
            "right_answer": "Преимущества связанного списка перед массивом включают более простую вставку и удаление, динамическую структуру данных, отсутствие потери памяти и более простую реализацию определенных структур данных. Связанные списки используются, когда заранее неизвестно количество элементов, есть частые операции добавления или удаления, и когда элементы нужно вставлять в середину списка. Массивы используются, когда требуется случайный доступ к элементам, количество элементов известно заранее, и когда важны скорость и эффективность использования памяти."
        },
        {
            "question": "Дано целое число “n”, напишите функцию для вычисления n-го числа Фибоначчи.",
            "right_answer": "Динамическое программирование включает в себя разделение сложной задачи на более простые подзадачи и сохранение решения для каждой подзадачи. Таким образом, программисту не нужно повторно вычислять решение. Использование последовательности Фибоначчи может сократить время выполнения программы. Для ответа на этот вопрос вам следует быть уверенным в алгоритмах и программировании, так как существует множество различных методов написания этой последовательности. Пример: public long fibonacci(int x) { if (x < 0) return – 1; if (x == 0) return 0; long[] cache = new long[x + 1]; for (int i = 1; i < cache.length; i++) {cache[i] = -1;} cache[1] = 1; return fibonacci(x, cache);} private long fibonacci(int x, long[] cache) { if (cache[x] > -1) return cache[x]; cache[x] = fibonacci(x – 1, cache) + fibonacci(x – 2, cache); return cache[x];}"
        },
        {
            "question": "В чем разница между массивом и связным списком?",
            "right_answer": "Массив - это коллекция элементов данных одного типа. Связный список - это коллекция сущностей, известных как узлы. Узел делится на две секции: данные и адрес. Он хранит элементы данных в одной памяти. Он хранит элементы в случайном порядке или где угодно в памяти. Размер памяти массива фиксирован и не может быть изменен во время выполнения. Размер памяти связного списка выделяется во время выполнения. Элементы массива не зависят друг от друга. Элементы связного списка зависят друг от друга. Доступ к элементу в массиве проще и быстрее. В связном списке доступ к элементу занимает время. Использование памяти неэффективно в случае массива. Использование памяти эффективно в случае связных списков. Операции, такие как вставка и удаление, занимают больше времени в массиве. Операции, такие как вставка и удаление, выполняются быстрее в связном списке."
        }
    ]
}