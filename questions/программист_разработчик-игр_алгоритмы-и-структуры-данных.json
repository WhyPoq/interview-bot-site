{
	"category_full_form": "Программист_Разработчик игр_Алгоритмы и структуры данных",
	"category_human_form": "Разработчик игр_Алгоритмы и структуры данных",
	"category_filename_form": "программист_разработчик-игр_алгоритмы-и-структуры-данных",
	"questions": [
		{
			"question": "Что такое структура данных очередь?",
			"right_answer": "Очередь - это абстрактный тип данных, который определяет линейную структуру данных или упорядоченный список, используя операцию First In First Out (FIFO) для доступа к элементам. Операции вставки могут выполняться только в одном конце, называемом REAR, а операции удаления могут выполняться только в другом конце, называемом FRONT."
		},
		{
			"question": "Что такое структура данных бинарного дерева поиска? Каковы применения для бинарных деревьев поиска?",
			"right_answer": "Бинарное дерево поиска - это структура данных, которая хранит элементы в отсортированном порядке. В бинарном дереве поиска каждый узел хранит ключ и значение. Ключ используется для доступа к элементу, а значение используется для определения, присутствует ли элемент или нет. Ключ может быть любого типа значения, такого как целое число, число с плавающей запятой, символьная строка или даже комбинация этих типов. Значение может быть любого типа элементов, таких как целое число, число с плавающей запятой, символьная строка или даже комбинация этих типов. Когда узел добавляется в дерево, его ключ используется для доступа к элементу, хранящемуся в этом узле. Когда узел удаляется из дерева, его ключ используется для доступа к элементу, хранящемуся в этом узле. Бинарное дерево поиска - это особый тип бинарного дерева, в котором есть определенный порядок элементов. У него три основные характеристики: Все элементы в левом поддереве узла должны иметь значение меньше или равное значению родительского узла, и все элементы в правом поддереве узла должны иметь значение больше или равное значению родительского узла. И левое, и правое поддеревья также должны быть бинарными деревьями поиска. Вот некоторые применения для структуры данных бинарного дерева: Она используется для индексации и многоуровневой индексации. Она используется для реализации различных алгоритмов поиска. Она помогает организовать отсортированный поток данных."
		},
		{
			"question": "Что такое постфиксное выражение?",
			"right_answer": "Постфиксное выражение состоит из операторов и операндов, при этом оператор следует после операндов. То есть, в постфиксном выражении оператор идет после операндов. Каков правильный постфиксный вид? Правильная постфиксная фраза - A B + C *."
		},
		{
			"question": "Что такое структура данных AVL-дерево, какие операции и вращения в нем существуют? Какие приложения используют AVL-деревья?",
			"right_answer": "AVL-деревья - это сбалансированные по высоте двоичные деревья поиска, названные в честь их изобретателей Адельсона, Вельски и Ландиса. AVL-дерево сравнивает высоты левого и правого поддеревьев и гарантирует, что разница между ними меньше единицы. Мы можем выполнять операции вставки и удаления в AVL-деревьях, а также существуют четыре вращения для балансировки дерева. AVL-деревья используются во встроенных наборах данных, словарях, приложениях баз данных и приложениях, требующих улучшенного поиска."
		},
		{
			"question": "Что такое структура данных связанный список? Какие приложения у связанного списка?",
			"right_answer": "Связанный список можно представить как серию связанных узлов (или элементов), соединенных ссылками (или путями). Каждая ссылка представляет собой вход в связанный список, и каждая запись указывает на следующий узел в последовательности. Порядок, в котором узлы добавляются в список, определяется порядком их создания. Ниже приведены некоторые приложения структуры данных связанный список: Стек, Очередь, бинарные деревья и графы реализуются с использованием связанных списков. Динамическое управление памятью операционной системы. Планирование по круговому алгоритму для задач операционной системы. Прямая и обратная операции в браузере."
		},
		{
			"question": "Когда следует применять бинарный поиск?",
			"right_answer": "Руководитель по найму может задать такой вопрос, чтобы оценить ваши навыки принятия решений. Отвечайте уверенно и приводите пример из реального мира, применимый к компании, в которой вы хотите устроиться. Пример: «Вы можете использовать алгоритм бинарного поиска с упорядоченным и отсортированным списком элементов. Поиск начнется в середине списка, а затем будет определено, продолжать ли поиск в верхней части или в нижней части»."
		},
		{
			"question": "Зачем нам нужно проводить анализ алгоритмов?",
			"right_answer": "Проблему можно решить несколькими способами, используя несколько алгоритмов решения. Анализ алгоритмов предоставляет оценку требуемых ресурсов алгоритма для решения конкретной вычислительной задачи. Также определяется количество временных и пространственных ресурсов, необходимых для выполнения. Временная сложность алгоритма количественно оценивает количество времени, затраченного на выполнение алгоритма в зависимости от длины ввода. Пространственная сложность количественно оценивает количество пространства или памяти, занимаемое алгоритмом, в зависимости от длины ввода."
		},
		{
			"question": "Связанные списки считаются линейными или нелинейными структурами данных?",
			"right_answer": "Связанные списки считаются как линейными, так и нелинейными структурами данных в зависимости от применения, для которого они используются. Когда используются для стратегий доступа, их считают линейной структурой данных. Когда используются для хранения данных, их считают нелинейной структурой данных."
		},
		{
			"question": "Объясните разницу между линейной структурой данных и иерархической структурой данных.",
			"right_answer": "Линейные структуры данных и иерархические структуры данных описывают отношения между элементами данных, но отличаются в том, как данные взаимодействуют. Линейные структуры данных организуют данные в одноуровневую последовательность. Иерархические структуры данных организуют данные в многоуровневую конфигурацию."
		},
		{
			"question": "Каковы преимущества связанного списка перед массивом? В каких сценариях мы используем связанный список, а в каких массив?",
			"right_answer": "Преимущества связанного списка перед массивом включают более простую вставку и удаление, динамическую структуру данных, отсутствие потери памяти и более простую реализацию определенных структур данных. Связанные списки используются, когда заранее неизвестно количество элементов, есть частые операции добавления или удаления, и когда элементы нужно вставлять в середину списка. Массивы используются, когда требуется случайный доступ к элементам, количество элементов известно заранее, и когда важны скорость и эффективность использования памяти."
		}
	]
}
