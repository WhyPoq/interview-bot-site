{
    "category_full_form": "Программист_Разработчик игр_Алгоритмы и структуры данных",
    "category_human_form": "Разработчик игр_Алгоритмы и структуры данных",
    "category_filename_form": "программист_разработчик-игр_алгоритмы-и-структуры-данных",
    "questions": [
        {
            "question": "Объясните процесс хранения переменной в памяти.",
            "right_answer": "Переменная хранится в памяти в зависимости от необходимого объема памяти. Вот шаги, которые следуют для хранения переменной: Сначала назначается необходимый объем памяти. Затем он хранится на основе используемой структуры данных. Использование концепций, таких как динамическое выделение, обеспечивает высокую эффективность и доступность хранилищ в реальном времени в соответствии с требованиями."
        },
        {
            "question": "Что такое структура данных массив? Каковы применения массивов?",
            "right_answer": "Структура данных массив - это структура данных, которая используется для хранения данных эффективным и удобным способом доступа. Она похожа на список в том, что хранит данные в последовательности. Однако структура данных массив отличается от списка тем, что может содержать гораздо больше данных, чем список. Структура данных массив создается путем объединения нескольких массивов вместе. Затем каждому массиву присваивается уникальный идентификатор, и данные каждого массива хранятся в порядке их создания. Структуры данных массивы часто используются в базах данных и других компьютерных системах для эффективного хранения больших объемов данных. Они также полезны для хранения информации, к которой часто обращаются, такой как большие объемы текста или изображений."
        },
        {
            "question": "Что такое структура данных стек? Каковы применения стека?",
            "right_answer": "Стек - это структура данных, которая используется для представления состояния приложения в определенный момент времени. Стек состоит из серии элементов, которые добавляются в верхнюю часть стека, а затем удаляются с верхушки. Это линейная структура данных, которая следует определенному порядку выполнения операций. LIFO (Last In First Out) или FILO (First In Last Out) - два возможных порядка. Стек состоит из последовательности элементов. Элемент, добавленный последним, выйдет первым, реальный пример может быть стопка одежды одна на другой. Когда мы удаляем ткань, которая была ранее сверху, мы можем сказать, что ткань, добавленная последней, выходит первой. Ниже приведены некоторые применения структуры данных стек: он действует как временное хранилище во время рекурсивных операций, операции Повтор и Отмена в редакторах документов, обращение строки, сопоставление скобок, постфиксные в инфиксные выражения, порядок вызовов функций"
        },
        {
            "question": "Какие различные операции доступны в структуре данных очереди?",
            "right_answer": "enqueue: Добавляет элемент в конец очереди. Переполнение происходит, если очередь полна. dequeue: Удаляет элемент из начала очереди. Недостаток происходит, если очередь пуста. isEmpty: Возвращает true, если очередь пуста, иначе false. rear: Возвращает элемент с конца очереди без удаления. front: Возвращает элемент с начала очереди без удаления. size: Возвращает размер очереди"
        },
        {
            "question": "В чем разница между PUSH и POP?",
            "right_answer": "С точки зрения вопросов на собеседовании по структурам данных, это один из самых часто задаваемых вопросов. Акронимы означают операции Pushing и Popping, выполняемые на стеке. Это способы хранения и извлечения данных. PUSH используется для добавления элемента в стек, в то время как POP используется для удаления элемента. PUSH принимает два аргумента: имя стека, в который нужно добавить данные, и значение записи, которое нужно добавить. POP требуется только имя стека. Когда стек заполнен и выполняется еще одна команда PUSH, возникает ошибка переполнения стека, что означает, что стек больше не может вместить последний PUSH. В POP возникает ошибка недостатка стека, когда вы пытаетесь POP пустой стек."
        },
        {
            "question": "Что такое граф в структуре данных?",
            "right_answer": "Это тип нелинейной структуры данных, состоящий из вершин или узлов, соединенных ребрами или дугами для хранения или извлечения данных. Ребра могут быть направленными или ненаправленными."
        },
        {
            "question": "Что такое структура данных?",
            "right_answer": "Структура данных - это способ организации (хранения) и обработки данных для извлечения и доступа. Она также определяет способ взаимосвязи различных наборов данных, устанавливая отношения и формируя алгоритмы."
        },
        {
            "question": "Сравните различные реализации очереди с приоритетами",
            "right_answer": "В следующей таблице содержится асимптотический анализ различных реализаций очереди с приоритетами: \n\nОперации peek insert delete \nСвязанный список O(1) O(n) O(1) \nБинарная куча O(1) O(log n) O(log n) \nБинарное дерево поиска O(1) O(log n) O(log n)"
        },
        {
            "question": "Можете ли вы объяснить разницу между структурой файла и структурой хранения?",
            "right_answer": "Структура файла: Представление данных во вторичной или вспомогательной памяти, такой как жесткий диск или флеш-накопители, которая хранит данные, оставаясь нетронутой, пока не будет удалена вручную, известна как представление структуры файла. Структура хранения: В этом типе данные хранятся в основной памяти, т.е. ОЗУ, и удаляются, когда функция, использующая эти данные, полностью завершает свое выполнение. Разница заключается в том, что структура хранения имеет данные, хранящиеся в памяти компьютерной системы, в то время как структура файла имеет данные, хранящиеся во вспомогательной памяти."
        },
        {
            "question": "Как работает сортировка выбором?",
            "right_answer": "Это один из самых часто задаваемых вопросов на собеседованиях по структурам данных. Сортировка выбором работает путем повторного выбора наименьшего числа в порядке возрастания из списка и размещения его в начале. Этот процесс повторяется, двигаясь к концу списка или отсортированному подмассиву. Сканируем все элементы и находим наименьший. Переключаем его позицию как первый элемент. Повторяем сортировку выбором для оставшихся N-1 элементов. Мы всегда итерируем вперед (i от 0 до N-1) и меняем местами с наименьшим элементом (всегда i). Временная сложность: лучший случай O(n2); худший O(n2) Пространственная сложность: худший O(1)"
        },
        {
            "question": "Что такое структуры данных?",
            "right_answer": "Структура данных - это механический или логический способ организации данных в программе. Организация данных определяет, как программа работает. Существует множество типов структур данных, каждая из которых имеет свои собственные применения. При проектировании кода необходимо обращать особое внимание на способ организации данных. Если данные не хранятся эффективно или неправильно структурированы, то общая производительность кода будет снижена."
        },
        {
            "question": "В чем разница между поиском в ширину (BFS) и поиском в глубину (DFS)?",
            "right_answer": "Поиск в ширину (BFS) находит кратчайший путь, используя структуру данных Очередь. DFS находит кратчайший путь, используя структуру данных Стек. BFS проходит через все узлы на одном уровне перед переходом на следующий уровень, в то время как DFS начинает с корневого узла и продвигается как можно дальше через узлы, пока не достигнет узла без непосещенных соседних узлов. BFS медленнее по сравнению с DFS, требует больше памяти и работает лучше, когда цель близка к источнику. DFS быстрее, требует меньше памяти и работает лучше, когда цель далека от источника. Узлы, которые были посещены несколько раз, удаляются из очереди в BFS, в то время как в DFS посещенные узлы добавляются в стек, а затем удаляются. В BFS откат невозможен, но DFS использует концепцию отката. BFS основан на принципе FIFO, в то время как DFS основан на принципе LIFO."
        },
        {
            "question": "Объясните разницу между линейной структурой данных и иерархической структурой данных.",
            "right_answer": "Линейные структуры данных и иерархические структуры данных описывают отношения между элементами данных, но отличаются в том, как данные взаимодействуют. Линейные структуры данных организуют данные в одноуровневую последовательность. Иерархические структуры данных организуют данные в многоуровневую конфигурацию."
        },
        {
            "question": "В чем разница между стеком и очередью в структуре данных?",
            "right_answer": "Стек - это линейная структура данных, в которой данные добавляются и удаляются с вершины. Очередь - это линейная структура данных, в которой данные добавляются в конец и удаляются с начала."
        },
        {
            "question": "Что такое Линейная Структура Данных? Назовите несколько примеров.",
            "right_answer": "Структура данных является линейной, если все ее элементы или данные упорядочены в последовательности или линейном порядке. Элементы хранятся в неиерархическом порядке, так что каждый элемент имеет преемников и предшественников, за исключением первого и последнего элемента в списке. Примеры линейных структур данных: Массивы, Стек, Строки, Очередь и Связанный Список."
        }
    ]
}