{
    "category_full_form": "Программист_Frontend разработчик_TypeScript",
    "category_human_form": "Frontend разработчик_TypeScript",
    "category_filename_form": "программист_frontend-разработчик_typescript",
    "questions": [
        {
            "question": "Как скомпилировать TypeScript с помощью Visual Studio Code?",
            "right_answer": "Visual Studio Code включает поддержку языка TypeScript, но не включает компилятор TypeScript. Вам необходимо установить компилятор TypeScript либо глобально, либо в вашем рабочем пространстве, чтобы преобразовать исходный код TypeScript в JavaScript. Самый простой способ установить TypeScript - через npm, менеджер пакетов Node.js. Если у вас установлен npm, вы можете установить TypeScript глобально (-g) на вашем компьютере с помощью: npm install -g typescript. Вы можете проверить установку, проверив версию или помощь. tsc --version"
        },
        {
            "question": "Объясните особенности массивов в TypeScript",
            "right_answer": "Объявление массива выделяет блоки памяти последовательно. Массивы являются неизменяемыми. Это означает, что после создания массива его размер изменить нельзя. Элемент массива представлен каждым блоком памяти. Индекс/подскрипт элемента массива - уникальный номер, который идентифицирует элемент. Массивы, как и переменные, должны быть объявлены перед использованием. Объявите массив с помощью ключевого слова var. Термин 'инициализация массива' относится к процессу заполнения массива элементами. Значения элементов массива могут быть обновлены или изменены, но не могут быть стерты."
        },
        {
            "question": "Объясните модули в TypeScript",
            "right_answer": "Модуль создается с целью организации кода TypeScript. Модули классифицируются как Внутренние модули и Внешние модули."
        },
        {
            "question": "Объясните массивы в TypeScript",
            "right_answer": "Коллекция значений одного типа данных называется массивом. Это тип, который был определен пользователем. Для хранения значений одного типа используются массивы. Массивы - это упорядоченные и индексированные коллекции значений. Индексация начинается с нуля, первый элемент имеет индекс 0, второй - индекс 1 и так далее."
        },
        {
            "question": "Что такое утверждение типа? Объясните его типы",
            "right_answer": "Вы можете оказаться в ситуации, когда вы знаете тип для сущности, который более конкретен, чем ее текущий тип. Утверждение типа похоже на приведение типов в других языках, но оно не выполняет дополнительной проверки данных или перестройки. Оно не влияет на время выполнения и используется только компилятором. TypeScript ожидает, что вы, программист, выполнили все необходимые конкретные проверки. Существует два типа утверждений типа. Один из них - это синтаксис as: let someValue: unknown = 'this is a string'; let strLength: number = (someValue as string).length; Другая версия - это синтаксис 'угловые скобки': let someValue: unknown = 'this is a string'; let strLength: number = (<string>someValue).length; Оба примера идентичны. Выбор одного из них в основном зависит от предпочтений; однако, только утверждения в стиле as разрешены при совмещении TypeScript с JSX."
        },
        {
            "question": "Что такое отображенные типы?",
            "right_answer": "Взятие существующего типа и сделание каждого из его свойств необязательным - типичное занятие."
        },
        {
            "question": "Назовите модификаторы доступа, поддерживаемые в TypeScript.",
            "right_answer": "Protected - Все дочерние классы и члены имеют к ним доступ, но экземпляр не имеет. Private - Только члены имеют доступ. Public - Члены, дочерние классы и экземпляры класса имеют доступ к публичному модификатору."
        },
        {
            "question": "Перечислите применения TypeScript",
            "right_answer": "С помощью TypeScript можно создавать как клиентские, так и серверные приложения на JavaScript. TypeScript используется для создания как клиентских, так и серверных приложений на JavaScript. Поскольку TypeScript добавляет больше функциональности и предоставляет ошибки непосредственно в коде, его можно использовать вместо JavaScript. TypeScript - это язык программирования, который используется для создания крупных корпоративных систем."
        },
        {
            "question": "Что такое ключевое слово Declare в TypeScript?",
            "right_answer": "Поскольку JavaScript не имеет объявления TypeScript, ключевое слово declare используется для включения его в файл TypeScript без возникновения проблем компиляции. Амбиентные методы и объявления используют это ключевое слово для определения переменной, которая уже существует."
        },
        {
            "question": "Как создать объекты в TypeScript?",
            "right_answer": "Объекты - это коллекции ключей и значений, похожие на словарь. Ключи должны быть уникальными. Они напоминают массивы и иногда называются ассоциативными массивами. Массив, с другой стороны, использует числа для индексации значений, в то время как объект позволяет использовать любой тип в качестве ключа. Тип Object в TypeScript относится к любому значению с свойствами. Его можно определить просто, указав свойства и их типы."
        },
        {
            "question": "Что такое лямбда-функция?",
            "right_answer": "Для определения функций TypeScript предоставляет сокращенный синтаксис. Лямбда-функция - это безымянная анонимная функция."
        },
        {
            "question": "Что такое интерфейс с точки зрения TypeScript?",
            "right_answer": "Интерфейс определяет синтаксис, который должны использовать классы. Все члены интерфейса реализуются классом, который его реализует. Его можно ссылаться, но не использовать. Интерфейс проверки типов используется компилятором TypeScript."
        },
        {
            "question": "Объясните кортежи в TypeScript на примере",
            "right_answer": "Кортежи - это коллекция значений различных типов. Они позволяют хранить множество полей различных видов. Кортежи также могут использоваться в качестве параметров функций."
        },
        {
            "question": "Объясните Псевдонимы Типов",
            "right_answer": "Псевдонимы типов дают типу новое имя. Псевдонимы типов похожи на интерфейсы в том, что они могут использоваться для именования примитивов, объединений, кортежей и любых других видов, которые в противном случае пришлось бы определять вручную. Псевдонимы не создают по-настоящему новый тип; вместо этого они дают этому типу новое имя. Псевдоним для примитива не очень полезен, однако его можно использовать в целях документирования. Псевдонимы типов, как и интерфейсы, могут быть общими; все, что вам нужно сделать, это добавить типовые параметры и использовать их справа от объявления псевдонима."
        },
        {
            "question": "Что такое анонимная функция в TypeScript?",
            "right_answer": "Анонимные функции - это те, у которых нет идентификатора (имени функции), присоединенного к ним. Во время выполнения эти функции динамически объявляются. Анонимные функции, как и обычные функции, могут принимать входные данные и возвращать результаты. После своего первоначального создания анонимная функция обычно недоступна. Анонимную функцию можно присвоить переменным."
        }
    ]
}