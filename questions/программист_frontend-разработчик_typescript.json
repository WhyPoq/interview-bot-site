{
    "category_full_form": "Программист_Frontend разработчик_TypeScript",
    "category_human_form": "Frontend разработчик_TypeScript",
    "category_filename_form": "программист_frontend-разработчик_typescript",
    "questions": [
        {
            "question": "Перечислите преимущества TypeScript",
            "right_answer": "Проблемы выделяются на протяжении всего процесса разработки и на этапе компиляции. TypeScript может работать в любом браузере или движке JavaScript. Пространство имен создается путем объявления модуля. IntelliSense - это функция TypeScript, которая предоставляет активные подсказки при вводе. Поддерживается строго типизированный или статический типизированный подход. Преимущество TypeScript заключается в том, что он строго типизирован или поддерживает статическую типизацию. Благодаря статической типизации можно подтвердить правильность типов на этапе компиляции."
        },
        {
            "question": "Как создать объекты в TypeScript?",
            "right_answer": "Объекты - это коллекции ключей и значений, похожие на словарь. Ключи должны быть уникальными. Они напоминают массивы и иногда называются ассоциативными массивами. Массив, с другой стороны, использует числа для индексации значений, в то время как объект позволяет использовать любой тип в качестве ключа. Тип Object в TypeScript относится к любому значению с свойствами. Его можно определить просто, указав свойства и их типы."
        },
        {
            "question": "Как преобразовать строку в число в TypeScript?",
            "right_answer": "Вы можете преобразовать строку в число, используя методы parseInt(), parseFloat() и Number('')."
        },
        {
            "question": "Объясните компоненты TypeScript",
            "right_answer": "Внутренне язык TypeScript разделен на три уровня. Каждый из этих уровней дополнительно разделен на компоненты. Эти уровни - это Язык, Компилятор TypeScript и Службы языка для TypeScript."
        },
        {
            "question": "Что такое Рекурсивные Псевдонимы Типов?",
            "right_answer": "Возможность 'рекурсивно' ссылаться на псевдонимы типов всегда была ограничена. Причина в том, что каждый псевдоним типа должен быть способен заменить себя на то, что он алиасит. Поскольку это не всегда возможно, компилятор отклоняет некоторые рекурсивные алиасы. Интерфейсы могут быть рекурсивными, но их выразительность ограничена, в отличие от псевдонимов типов. Для решения этой проблемы можно объединить два подхода: создать псевдоним типа и извлечь рекурсивные части типа в интерфейсы. Это эффективно. type ValueOrArray<T> = T | ArrayOfValueOrArray<T>; interface ArrayOfValueOrArray<T> extends Array<ValueOrArray<T>> {}"
        },
        {
            "question": "Как поддерживать файлы TypeScript из Node Modules?",
            "right_answer": "TypeScript включает серию файлов объявлений для гарантии того, что поддержка TypeScript и JavaScript работает хорошо сразу после установки (.d.ts файлы). Различные API в языке JavaScript, а также стандартные API браузера DOM представлены в этих файлах объявлений. Хотя есть некоторые справедливые значения по умолчанию в зависимости от вашей цели, вы можете настроить параметр lib в tsconfig.json, чтобы указать, какие файлы объявлений использует ваша программа. TypeScript имеет функцию, аналогичную поддержке @types/, которая позволяет переопределить определенную встроенную библиотеку. TypeScript будет проверять наличие пакета с областью @typescript/lib-* в node modules при выборе файлов lib для включения. После этого вы можете использовать свой менеджер пакетов для установки определенного пакета, который заменит определенную библиотеку."
        },
        {
            "question": "Как скомпилировать TypeScript с помощью Visual Studio Code?",
            "right_answer": "Visual Studio Code включает поддержку языка TypeScript, но не включает компилятор TypeScript. Вам необходимо установить компилятор TypeScript либо глобально, либо в вашем рабочем пространстве, чтобы преобразовать исходный код TypeScript в JavaScript. Самый простой способ установить TypeScript - через npm, менеджер пакетов Node.js. Если у вас установлен npm, вы можете установить TypeScript глобально (-g) на вашем компьютере с помощью: npm install -g typescript. Вы можете проверить установку, проверив версию или помощь. tsc --version"
        },
        {
            "question": "Что такое объекты в TypeScript?",
            "right_answer": "Объект - это тип экземпляра, который состоит из коллекции пар ключ-значение. Скалярные значения, функции и даже массивы других объектов могут использоваться в качестве значений."
        },
        {
            "question": "Что такое геттеры/сеттеры?",
            "right_answer": "Геттеры и сеттеры предотвращают доступ к членам объекта. Они позволяют вам иметь более точный контроль над тем, как член взаимодействует с каждым объектом. Метод геттера начинается с ключевого слова 'get', а метод сеттера начинается с ключевого слова 'set'"
        },
        {
            "question": "Что такое анонимная функция в TypeScript?",
            "right_answer": "Анонимные функции - это те, у которых нет идентификатора (имени функции), присоединенного к ним. Во время выполнения эти функции динамически объявляются. Анонимные функции, как и обычные функции, могут принимать входные данные и возвращать результаты. После своего первоначального создания анонимная функция обычно недоступна. Анонимную функцию можно присвоить переменным."
        },
        {
            "question": "Что означает вывод типов (Type Inference)?",
            "right_answer": "Когда вы не указываете явный тип для переменной, TypeScript может вывести его. Вывод типов - это термин для этого. Обычно это делается во время объявления, когда переменные или параметры инициализируются."
        },
        {
            "question": "Что такое декораторы?",
            "right_answer": "Декоратор - это тип объявления, который используется для украшения объявления класса, метода, аксессора, свойства или аргумента. Декораторы имеют форму @expression, где expression должен оцениваться как функция, которая будет вызвана с информацией о украшенном объявлении при вызове во время выполнения."
        },
        {
            "question": "Что такое пространство имен и как его объявить?",
            "right_answer": "Пространство имен используется для логической группировки функциональности. Для активации одной или группы связанных функций пространство имен может включать интерфейсы, классы, функции и переменные. Ключевое слово пространства имен, за которым следует имя пространства имен, может быть использовано для создания пространства имен. Фигурные скобки могут быть использованы для определения всех интерфейсов, классов и других объектов."
        },
        {
            "question": "Что такое лямбда-функция?",
            "right_answer": "Для определения функций TypeScript предоставляет сокращенный синтаксис. Лямбда-функция - это безымянная анонимная функция."
        },
        {
            "question": "Что такое интерфейс с точки зрения TypeScript?",
            "right_answer": "Интерфейс определяет синтаксис, который должны использовать классы. Все члены интерфейса реализуются классом, который его реализует. Его можно ссылаться, но не использовать. Интерфейс проверки типов используется компилятором TypeScript."
        }
    ]
}