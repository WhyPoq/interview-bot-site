{
    "category_full_form": "Программист_Frontend разработчик_Redux",
    "category_human_form": "Frontend разработчик_Redux",
    "category_filename_form": "программист_frontend-разработчик_redux",
    "questions": [
        {
            "question": "Что такое константы в Redux?",
            "right_answer": "Константы в Redux помогают нам легко найти все использования определенной функциональности в нашем проекте, когда мы используем интегрированную среду разработки (IDE). Используя константы, мы можем избежать глупых ошибок, вызванных опечатками или ошибками при наборе, так как они показывают 'ReferenceError' при любой опечатке."
        },
        {
            "question": "В чем разница между Relay и Redux?",
            "right_answer": "Основные различия между Relay и Redux приведены ниже: Relay заботится о состоянии, исходящем от сервера, в то время как Redux заботится обо всех состояниях приложения. Relay можно использовать для кэширования и оптимизации данных, в то время как Redux не отвечает за обработку запросов данных."
        },
        {
            "question": "Что вы понимаете под Redux Thunk?",
            "right_answer": "Используя промежуточное ПО Redux Thunk, мы можем писать action creators, возвращающие функцию вместо действия. Этот thunk может отложить отправку действия или выполнять условную отправку. Аргументы, передаваемые внутренней функции, являются методами хранилища dispatch и getState(). В случае, если action creator возвращает функцию, эта функция выполняется промежуточным ПО Redux Thunk и не обязана быть чистой. Другими словами, функции разрешено иметь побочные эффекты, включая выполнение асинхронных вызовов API. Она даже может отправлять действия. Redux Thunk используется для отложенной отправки действия или отправки в случае выполнения определенного условия. В момент отправки функции вместо объекта действия, если промежуточное ПО Redux Thunk включено, промежуточное ПО вызовет эту функцию с самим методом dispatch в качестве первого аргумента."
        },
        {
            "question": "Как можно структурировать верхнеуровневые каталоги в Redux?",
            "right_answer": "У каждого приложения Redux есть несколько верхнеуровневых каталогов, перечисленных ниже: Компоненты, Контейнеры, Действия, Редьюсеры, Хранилище."
        },
        {
            "question": "Правда ли, что Redux может использоваться только с React?",
            "right_answer": "Нет, не правда, что Redux может использоваться только с React. Redux используется в качестве хранилища данных для многих пользовательских интерфейсов. В Redux есть привязки для React, Angular, Angular 2, Vue и т. д."
        },
        {
            "question": "Что такое редьюсеры в архитектуре Redux?",
            "right_answer": "Редьюсеры в архитектуре Redux - это чистые функции, которые используются для получения предыдущего состояния и действия, и возвращают следующее состояние. Его синтаксис приведен ниже: (предыдущее_состояние, действие) => новое_состояние"
        },
        {
            "question": "Что вы понимаете под действием в архитектуре Redux?",
            "right_answer": "В архитектуре Redux действия представляют собой простые объекты JavaScript, содержащие поле типа. Их можно рассматривать как события, описывающие то, что произошло в приложении. Действия содержат только крайне малое количество информации, необходимое для указания того, что произошло."
        },
        {
            "question": "Что вы понимаете под Redux Toolkit?",
            "right_answer": "Redux Toolkit - это официальный, настойчивый, включающий в себя набор инструментов для эффективной разработки Redux. Он также включает в себя наиболее широко используемые дополнения Redux, например, Redux Thunk для асинхронной логики, Reselect для написания функций селекторов и многие другие, чтобы облегчить разработку для разработчиков и сэкономить им время."
        },
        {
            "question": "Какие вещи мы никогда не должны делать внутри редьюсера?",
            "right_answer": "Вещи, которые мы никогда не должны делать внутри редьюсера, следующие: изменять аргумент редьюсера, убедиться, что мы не выполняем никаких побочных операций, таких как переходы маршрутизации, вызовы API и т. д., Не вызывать непрозрачные функции, например Date.now(), Math.random(), и т. д."
        },
        {
            "question": "Приведите пример использования редьюсеров в Redux.",
            "right_answer": "Пример использования редьюсеров в Redux приведен ниже: const initial_state = { value: 0 } function countReducer(state = initial_state, action) { // Проверяем, заботится ли редьюсер об этом действии if (action.type === 'counter/incremented') { // Если действие имеет тип 'counter' или 'incremented', мы делаем копию 'state' return { ...state, // Мы также обновляем копию новым значением value: state.value + 1 } } // Если нет, мы возвращаем исходное состояние без изменений return state }"
        },
        {
            "question": "Объясните на примере, как установить начальное состояние в Redux.",
            "right_answer": "Для установки начального состояния в Redux необходимо передать начальное состояние вторым аргументом в createStore, как показано ниже: const rootReducer = combineReducers({ todos: todos, visibilityFilter: visibilityFilter }); const initialState = { todos: [{id:100, name:'ritik', completed: true}] }; const store = createStore( rootReducer, initialState );"
        },
        {
            "question": "Что такое Redux?",
            "right_answer": "Redux - это библиотека с открытым исходным кодом, созданная с использованием языка сценариев JavaScript. Основное применение Redux заключается в управлении и централизации состояния приложения, и обычно он используется вместе с библиотеками JavaScript, например, React или Angular, для создания пользовательских интерфейсов (UI). Это предсказуемый контейнер состояния для приложений, созданных с использованием JavaScript. Он основан на шаблоне проектирования Flux. Redux очень мал по размеру (около 2 килобайт) и не имеет зависимостей."
        },
        {
            "question": "Приведите пример использования действий в архитектуре Redux.",
            "right_answer": "Пример использования действий в архитектуре Redux приведен ниже: const addingTodoAction = { type: 'ADD', payload: 'Do-homework' }"
        },
        {
            "question": "Как мы можем использовать connect из React Redux?",
            "right_answer": "Для того чтобы использовать connect из React Redux, нам нужно выполнить несколько шагов, чтобы использовать наш store в нашем контейнере: Во-первых, мы используем mapStateToProps(): Это отобразит переменные состояния из нашего store в props, которые мы указываем. Во-вторых, мы подключаем вышеуказанные props к нашему контейнеру: Объект, возвращаемый компонентом mapStateToProps, подключается к контейнеру."
        },
        {
            "question": "Приведите пример использования хранилища Redux.",
            "right_answer": "Пример использования хранилища Redux приведен ниже: import { createStore } from 'redux' const store = createStore(todos, ['Use Redux']) function deletingTodo(text) { return { type: 'DELETING_TODO', text } } store.dispatch(deletingTodo('Do the homework')) store.dispatch(deletingTodo('Buy coffee'))"
        }
    ]
}