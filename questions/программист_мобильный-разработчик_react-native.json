{
    "category_full_form": "Программист_Мобильный разработчик_React Native",
    "category_human_form": "Мобильный разработчик_React Native",
    "category_filename_form": "программист_мобильный-разработчик_react-native",
    "questions": [
        {
            "question": "Как отлаживать приложения React Native?",
            "right_answer": "В React Native мы можем выполнять отладку двумя способами: удаленная отладка и отладка в приложении. Для удаленной отладки вы можете выбрать 'Отладка удаленно' в меню как для iOS, так и для Android, что запустит инструмент отладки Chrome Developer Tools. Для отладки в приложении вы можете запустить определенные команды для iOS и Android, чтобы запустить инструменты отладки внутри соответствующей операционной системы."
        },
        {
            "question": "Какова роль таймеров в приложении React Native?",
            "right_answer": "Таймеры позволяют разработчикам управлять порядком событий в программе. Существует четыре различных типа таймеров: Timeout, Interval, Immediate и Animation."
        },
        {
            "question": "Опишите Таймеры в приложении React Native?",
            "right_answer": "Таймеры являются важной и неотъемлемой частью любого приложения, и React Native реализует браузерные таймеры."
        },
        {
            "question": "С какими языками программирования совместим React Native?",
            "right_answer": "Хотя React Native обычно используется с JavaScript, совместимость с другими языками программирования, включая Python, C++ и C, также возможна через Java Native Interface (JNI) фреймворка."
        },
        {
            "question": "Как можно реализовать Redux в React Native?",
            "right_answer": "Redux - это полезный инструмент управления состоянием. Его можно реализовать, следуя этим шагам: Установите необходимые пакеты Redux онлайн, Создайте папку Redux в корне приложения, Внутри папки Redux добавьте три файла: actions.js, reducer.js и store.js, В новом файле reducer.js импортируйте из ‘redux’, В файле store.js импортируйте из ‘redux’ для создания хранилища, Импортируйте хранилище в приложение React Native"
        },
        {
            "question": "Что такое потоки в общем? и объясните различные потоки в ReactNative с использованием каждого?",
            "right_answer": "Одиночный последовательный поток управления в программе может быть контролируем потоком. React Native в настоящее время использует 3 потока: MAIN/UI Thread, Shadow Thread и JavaScript Thread."
        },
        {
            "question": "Как можно написать различный код для IOS и Android в одной кодовой базе? Есть ли для этого какой-то модуль?",
            "right_answer": "Модуль platform определяет платформу, на которой работает приложение."
        },
        {
            "question": "Какие основные проблемы производительности возникают в React Native и что их вызывает?",
            "right_answer": "Некоторые из наиболее распространенных проблем производительности в React Native включают высокое использование ЦП, утечки памяти и медленную навигацию."
        },
        {
            "question": "Что такое Props Drilling и как мы можем избежать этого?",
            "right_answer": "Props Drilling (Threading) - это концепция, которая относится к процессу передачи данных от родительского компонента к точному дочернему компоненту, НО при этом другие компоненты, владеющие props, просто передают их по цепочке. Шаги для избежания этого: 1. React Context API. 2. Composition 3. Render props 4. HOC 5. Redux или MobX"
        },
        {
            "question": "Для каких продуктов и приложений лучше всего использовать React Native?",
            "right_answer": "React Native отлично подходит для разработки гибридного приложения, которому не требуется чрезвычайно высокая производительность. Кроссплатформенная совместимость означает, что команды разработчиков могут сэкономить много времени при использовании React Native по сравнению с нативным фреймворком. Однако он может быть не подходящим при проектировании сложных приложений или если разработчики еще не владеют React-кодом."
        },
        {
            "question": "Каковы основные компоненты React Native?",
            "right_answer": "Компоненты являются строительными блоками React Native; когда их объединяют, они составляют приложение в целом. Некоторые из наиболее распространенных компонентов: View, Text, TextInput, ScrollView, StyleSheet, Image, Button."
        },
        {
            "question": "Какова роль AsyncStorage в React Native?",
            "right_answer": "AsyncStorage - это модуль хранения ключ-значение без шифрования в React Native, который позволяет разработчикам хранить данные для использования в офлайн-режиме. Обычно он используется для хранения данных, когда приложение не связано с облачным сервисом, или когда конкретные функции требуют хранения данных."
        },
        {
            "question": "Какие различные способы стилизации приложения React Native?",
            "right_answer": "React Native предоставляет нам два мощных способа по умолчанию для стилизации нашего приложения: Style props и использование StyleSheet."
        },
        {
            "question": "Как можно решить распространенные проблемы производительности React Native?",
            "right_answer": "Когда возникают проблемы производительности, у разработчиков есть несколько решений. Например, вот несколько решений для нескольких распространенных проблем производительности: Высокое использование ЦП: Оптимизация приложений путем сжатия данных, устранения избыточных рендеров и использования кэш-памяти улучшит скорость работы. Утечка памяти: Утечку памяти можно избежать, отлаживая код, избегая использования операторов console и регулярно проверяя код на несоответствия. Медленная навигация: Использование React Navigation вместо других инструментов навигации, таких как Navigator или NavigationExperimental, поможет смягчить проблемы с навигацией."
        },
        {
            "question": "Объясните компоненты FlatList, каковы их основные особенности вместе с образцом кода?",
            "right_answer": "Компонент FlatList отображает данные с похожей структурой в прокручиваемом списке. Он хорошо работает для больших списков данных, где количество элементов списка может изменяться со временем. Основная особенность: FlatList показывает только те отрисованные элементы, которые в данный момент отображаются на экране, а не все элементы списка сразу."
        }
    ]
}