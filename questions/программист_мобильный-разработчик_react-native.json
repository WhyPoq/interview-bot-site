{
	"category_full_form": "Программист_Мобильный разработчик_React Native",
	"category_human_form": "Мобильный разработчик_React Native",
	"category_filename_form": "программист_мобильный-разработчик_react-native",
	"questions": [
		{
			"question": "Как можно оптимизировать производительность приложения в React Native?",
			"right_answer": "Пример ответа: Существует несколько техник, которые мы можем использовать для оптимизации производительности приложения в React Native, такие как: Удаление всех операторов console, Изменение размера и уменьшение изображений, Кэширование изображений внутри приложения, Сжатие или преобразование необработанных данных JSON, Использование разделения кода для больших списков, Планирование анимаций, Удаление ненужных библиотек и функций"
		},
		{
			"question": "Какова роль AsyncStorage в React Native?",
			"right_answer": "AsyncStorage - это модуль хранения ключ-значение без шифрования в React Native, который позволяет разработчикам хранить данные для использования в офлайн-режиме. Обычно он используется для хранения данных, когда приложение не связано с облачным сервисом, или когда конкретные функции требуют хранения данных."
		},
		{
			"question": "Какова роль TouchableOpacity в React Native?",
			"right_answer": "В React Native TouchableOpacity - это обертка, используемая для изменения прозрачности кнопки. Когда она используется на кнопке, прозрачность уменьшается при касании, позволяя пользователям видеть фон при нажатии."
		},
		{
			"question": "Что такое состояние в React Native?",
			"right_answer": "В React Native состояние относится к информации о свойстве в определенный момент времени. В отличие от свойств, состояние изменчиво; оно может изменяться. Обычно это происходит, когда пользователь взаимодействует с компонентом."
		},
		{
			"question": "Когда следует использовать setNativeProps в React Native?",
			"right_answer": "В React Native setNativeProps используется для изменения компонента напрямую на узле DOM, а не в состоянии приложения. Хотя это может помочь решить проблемы, это также делает код более сложным для работы в будущем. Это считается резервным решением для проблем производительности, связанных с анимациями, и следует использовать только в случае, если setState и shouldComponent не удается решить проблему."
		},
		{
			"question": "Какова роль Flexbox в React Native?",
			"right_answer": "В приложениях React Native Flexbox используется для обеспечения последовательного макета на различных типах экранов. Алгоритм Flexbox помогает структурировать позиционирование различных компонентов и создавать отзывчивый пользовательский интерфейс."
		},
		{
			"question": "С какими языками программирования совместим React Native?",
			"right_answer": "Хотя React Native обычно используется с JavaScript, совместимость с другими языками программирования, включая Python, C++ и C, также возможна через Java Native Interface (JNI) фреймворка."
		},
		{
			"question": "Какова роль хуков в React Native?",
			"right_answer": "Хуки позволяют разработчикам 'зацепиться' за существующие компоненты и получить доступ к их состоянию и функциям жизненного цикла. Ранее это было недоступно для использования в других местах. С помощью хуков разработчики теперь могут получить доступ к состоянию и функциям жизненного цикла компонента, не писав новый класс."
		},
		{
			"question": "Как можно безопасно хранить чувствительные данные в React Native?",
			"right_answer": "Большинство данных React Native хранятся в Async Storage. Как незашифрованная, локальная форма хранения, она не подходит для хранения чувствительных данных, таких как токены и пароли. В качестве альтернативы, React Native Keychain предлагает безопасную форму хранения, которая также работает аналогично Async Storage. Для iOS хранилище Keychain может использоваться для защиты чувствительных данных, в то время как разработчики Android могут использовать Facebook Conceal и Android Keystone."
		},
		{
			"question": "Как создать базовый текстовый ввод в React Native?",
			"right_answer": "Вставка базового текста в приложения React Native обрабатывается компонентами Text и TextInput. TextInput позволяет пользователям печатать в приложении. Мы можем реализовать это, используя следующий синтаксис: <import { Text, TextInput, View } from ‘react-native’>."
		},
		{
			"question": "Как создать базовую кнопку в React Native?",
			"right_answer": "Мы можем создать базовые кнопки, используя следующий синтаксис: <import { View, Button, StyleSheet } from “react-native”>. Базовые кнопки поддерживают минимальный уровень настройки и могут быть изменены с помощью TouchableOpacity или TouchableWithoutFeedback."
		},
		{
			"question": "Как обрабатывается ввод пользователя в React Native?",
			"right_answer": "TextInput - это основной компонент, который позволяет пользователю вводить текст. У него есть свойство onChangeText, которое принимает функцию, которая будет вызываться каждый раз при изменении текста, и свойство onSubmitEditing, которое принимает функцию, которая будет вызываться при отправке текста."
		}
	]
}
