{
    "category_full_form": "Программист_Frontend разработчик_React",
    "category_human_form": "Frontend разработчик_React",
    "category_filename_form": "программист_frontend-разработчик_react",
    "questions": [
        {
            "question": "Для чего используется useRef и как оно работает?",
            "right_answer": "useRef возвращает изменяемый объект ссылки, свойство. Текущее значение которого инициализируется переданным аргументом. Возвращаемый объект будет существовать на протяжении всего срока жизни компонента и не будет изменяться от рендера к рендеру. Обычный случай использования - доступ к потомку в императивном стиле. То есть, используя ref, мы можем явно обращаться к элементу DOM."
        },
        {
            "question": "В чем разница между контролируемыми и неконтролируемыми компонентами?",
            "right_answer": "Разница между контролируемыми и неконтролируемыми компонентами заключается в том, как они управляют и обновляют свое состояние."
        },
        {
            "question": "Для чего используется useCallback и как она работает?",
            "right_answer": "Хук useCallback вернет мемоизированную версию обратного вызова, которая изменится только в случае изменения значений одной из зависимостей. Это полезно при передаче обратных вызовов в оптимизированные дочерние компоненты, которые полагаются на равенство ссылок для предотвращения ненужных перерисовок. const callbackValue = useCallback(() => computeFunc(paramA, paramB), [paramA, paramB]);"
        },
        {
            "question": "Какие методы жизненного цикла компонента?",
            "right_answer": "Методы жизненного цикла - это способ подключения к различным этапам жизненного цикла компонента, позволяющий выполнять определенный код в определенные моменты."
        },
        {
            "question": "Что такое действие и как можно изменить состояние в Redux?",
            "right_answer": "Действие - это простой объект JavaScript, который должен иметь поле с типом. Вы также можете дополнительно добавить некоторые данные в качестве полезной нагрузки. Для изменения состояния необходимо вызвать функцию dispatch, в которую мы передаем действие."
        },
        {
            "question": "Что такое виртуальный DOM?",
            "right_answer": "Виртуальный DOM - это концепция в React, где создается и хранится легковесное виртуальное представление фактического DOM. Это программная техника, используемая для оптимизации производительности веб-приложений."
        },
        {
            "question": "Для чего используется useMemo и как он работает?",
            "right_answer": "useMemo используется для кэширования и запоминания результатов вычислений. Передайте функцию создания и массив зависимостей. useMemo будет пересчитывать запомненное значение только тогда, когда значение хотя бы одной из зависимостей изменилось. Эта оптимизация помогает избежать дорогостоящих вычислений при каждом рендере."
        },
        {
            "question": "Что такое Feature-Sliced Design?",
            "right_answer": "Это современный архитектурный подход, используемый для организации и структурирования приложений React. Он направлен на решение проблем масштабируемости, поддерживаемости и повторного использования путем разделения кодовой базы приложения на основе функций или модулей."
        },
        {
            "question": "Для чего используется useContext и как он работает?",
            "right_answer": "В типичном приложении React данные передаются сверху вниз (от родительского к дочернему компоненту) с использованием props. Однако такой метод использования может быть слишком громоздким для некоторых типов props (например, выбранный язык, тема пользовательского интерфейса), которые должны быть переданы во многие компоненты в приложении. Контекст предоставляет способ обмена такими данными между компонентами, не требуя явного передачи props через каждый уровень дерева. Компонент, вызывающий useContext, всегда будет перерисовываться при изменении значения контекста. Если перерисовка компонента затратна, вы можете оптимизировать ее, используя мемоизацию."
        },
        {
            "question": "Какой паттерн реализует Redux?",
            "right_answer": "Redux реализует паттерн Flux, который является предсказуемым паттерном управления состоянием для приложений. Он помогает управлять состоянием приложения, вводя однонаправленный поток данных и централизованное хранилище для состояния приложения."
        },
        {
            "question": "Как получить доступ к элементу DOM?",
            "right_answer": "Ссылки создаются с помощью React.createRef() или хука useRef() и присоединяются к элементам React через атрибут ref. Обращаясь к созданной ссылке, мы можем получить доступ к элементу DOM, используя ref.current."
        },
        {
            "question": "Каковы правила создания пользовательского хука?",
            "right_answer": "Начните название хука с 'use'. Используйте существующие хуки при необходимости. Не вызывайте хуки условно. Извлекайте повторяющуюся логику в пользовательский хук. Пользовательские хуки должны быть чистыми функциями. Пользовательские хуки могут возвращать значения или другие хуки. Назовите пользовательский хук описательно."
        },
        {
            "question": "В чем разница между классовыми и функциональными компонентами React?",
            "right_answer": "Основное различие между классовыми и функциональными компонентами заключается в их определении и используемом синтаксисе."
        },
        {
            "question": "Что такое React Fragment?",
            "right_answer": "Возврат нескольких элементов из компонента является распространенной практикой в React. Фрагменты позволяют формировать список дочерних элементов без создания ненужных узлов в DOM."
        },
        {
            "question": "Как отрисовать элемент условно?",
            "right_answer": "Вы можете использовать любые условные операторы, включая тернарный."
        }
    ]
}