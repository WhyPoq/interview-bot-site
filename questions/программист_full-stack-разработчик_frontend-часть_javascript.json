{
    "category_full_form": "Программист_Full Stack разработчик_Frontend часть_JavaScript",
    "category_human_form": "Full Stack разработчик_JavaScript",
    "category_filename_form": "программист_full-stack-разработчик_frontend-часть_javascript",
    "questions": [
        {
            "question": "Какова роль отложенных скриптов в JavaScript?",
            "right_answer": "Обработка HTML-кода во время загрузки страницы отключается по умолчанию, пока скрипт не остановится. Ваша страница будет замедлена, если ваша сеть немного медленная или если скрипт очень громоздкий. Когда вы используете отложенный режим, скрипт ждет завершения разбора HTML перед его выполнением. Это сокращает время загрузки веб-страниц, позволяя им появляться быстрее."
        },
        {
            "question": "В чем разница между операторами “ == “ и “ === “?",
            "right_answer": "Оба являются операторами сравнения. Разница между этими операторами заключается в том, что “==” используется для сравнения значений, в то время как “ === “ используется для сравнения как значений, так и типов."
        },
        {
            "question": "Что такое деструктуризация объектов?",
            "right_answer": "Деструктуризация объектов - это новый способ извлечения элементов из объекта или массива."
        },
        {
            "question": "Что вы подразумеваете под шаблонами проектирования JavaScript?",
            "right_answer": "Шаблоны проектирования JavaScript - это повторяемые подходы к ошибкам, которые иногда возникают при создании браузерных приложений на JavaScript. Они действительно помогают нам сделать наш код более стабильным. Они в основном делятся на 3 категории: Шаблон создания объектов, Структурный шаблон проектирования, Поведенческий шаблон проектирования."
        },
        {
            "question": "Объясните WeakMap в javascript.",
            "right_answer": "В javascript Map используется для хранения пар ключ-значение. Пары ключ-значение могут быть как примитивных, так и не примитивных типов. WeakMap похож на Map с ключевыми различиями: ключи и значения в WeakMap должны всегда быть объектом. Если нет ссылок на объект, то объект будет собран сборщиком мусора."
        },
        {
            "question": "Что такое каррирование в JavaScript?",
            "right_answer": "Каррирование - это передовая техника преобразования функции с аргументами n в n функций с одним или меньшим количеством аргументов."
        },
        {
            "question": "В чем разница между методами exec() и test() в JavaScript?",
            "right_answer": "test() и exec() - это методы выражения RegExp, используемые в JavaScript. Мы будем использовать exec() для поиска строки по определенному шаблону, и если он найдет его, он вернет сам шаблон; в противном случае он вернет 'пустой' результат. Мы будем использовать test() для поиска строки по определенному шаблону. Он вернет логическое значение 'true', если найдет указанный текст, в противном случае вернет 'false'."
        },
        {
            "question": "Что такое свойство NaN в JavaScript?",
            "right_answer": "Свойство NaN представляет собой значение «Не число». Оно указывает на значение, которое не является допустимым числом. typeof NaN вернет Number. Для проверки, является ли значение NaN, мы используем функцию isNaN()."
        },
        {
            "question": "На JavaScript, сколько различных методов можно создать объект?",
            "right_answer": "На JavaScript есть несколько способов объявления или создания объекта: Object, Class, create Method, Object Literals, Function, Object Constructor."
        },
        {
            "question": "Является ли JavaScript языком передачи по ссылке или по значению?",
            "right_answer": "Данные переменной всегда являются ссылкой для объектов, поэтому это всегда передача по значению. Следовательно, если вы предоставляете объект и изменяете его члены внутри метода, изменения продолжаются за его пределами. В этом случае это кажется передачей по ссылке. Однако, если вы изменяете значения переменной объекта, изменение не будет длиться, что демонстрирует, что это действительно передача по значению."
        },
        {
            "question": "Объясните Hoisting в javascript.",
            "right_answer": "Hoisting - это стандартное поведение javascript, при котором все объявления переменных и функций перемещаются вверх."
        },
        {
            "question": "Какие различные типы данных присутствуют в JavaScript?",
            "right_answer": "Чтобы узнать тип переменной JavaScript, мы можем использовать оператор typeof. Существуют примитивные типы, такие как String, Number, BigInt, Boolean, Undefined, Null и Symbol. И не примитивные типы, такие как Object."
        },
        {
            "question": "Что такое параметр остатка и оператор распространения?",
            "right_answer": "Оба параметра остатка и оператор распространения были введены в версии ES6 языка javascript."
        },
        {
            "question": "Объясните передачу по значению и передачу по ссылке.",
            "right_answer": "В JavaScript примитивные типы данных передаются по значению, а не примитивные типы данных передаются по ссылке."
        },
        {
            "question": "В чем разница между прототипным и классическим наследованием?",
            "right_answer": "Программисты создают объекты, которые являются представлениями сущностей реального времени, в традиционном ОО программировании. Классы и объекты - два вида абстракций. Класс является обобщением объекта, в то время как объект является абстракцией реального объекта. Например, Транспортное средство - это специализация Автомобиля. В результате, автомобили (класс) происходят от транспортных средств (объектов).\n\nКлассическое наследование отличается от прототипного наследования тем, что классическое наследование ограничено классами, которые наследуются от оставшихся классов, в то время как прототипное наследование позволяет любому объекту быть клонированным с помощью метода связывания объектов. Несмотря на слишком многочисленные детали, прототип в основном служит шаблоном для других объектов, независимо от того, расширяют ли они родительский объект или нет."
        }
    ]
}