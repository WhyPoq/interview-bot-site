{
	"category_full_form": "Программист_Full Stack разработчик_Backend часть_TypeScript",
	"category_human_form": "Full Stack разработчик_TypeScript",
	"category_filename_form": "программист_full-stack-разработчик_backend-часть_typescript",
	"questions": [
		{
			"question": "Что такое TypeScript?",
			"right_answer": "TypeScript - это надмножество JavaScript. Это объектно-ориентированный и сильно типизированный язык программирования. Код TypeScript преобразуется в JavaScript, который может использоваться в любой среде, поддерживающей JavaScript, включая браузеры, Node.js и ваши собственные приложения."
		},
		{
			"question": "Как создать объекты в TypeScript?",
			"right_answer": "Объекты - это коллекции ключей и значений, похожие на словарь. Ключи должны быть уникальными. Они напоминают массивы и иногда называются ассоциативными массивами. Массив использует числа для индексации значений, в то время как объект позволяет использовать любой тип в качестве ключа. Тип Object в TypeScript относится к любому значению с свойствами. Его можно определить просто, указав свойства и их типы."
		},
		{
			"question": "Опишите синтаксис 'as' в TypeScript.",
			"right_answer": "В TypeScript синтаксис 'as' используется для утверждения типа. Он был создан, потому что исходный синтаксис был несовместим с JSX. Только утверждения в стиле 'as' могут быть использованы с JSX и TypeScript."
		},
		{
			"question": "Что такое Mixins?",
			"right_answer": "Комбинирование более простых частичных классов - популярный подход к созданию классов из повторно используемых компонентов. Для языков, таких как Scala, вы можете быть знакомы с концепцией миксинов или характеристик. Для расширения базового класса дизайн полагается на обобщения и наследование классов. Лучшая поддержка миксинов в TypeScript предоставляется через шаблон классов-выражений. У нас есть класс, к которому применены миксины."
		},
		{
			"question": "Что такое ключевое слово Declare в TypeScript?",
			"right_answer": "Поскольку JavaScript не имеет объявления TypeScript, ключевое слово declare используется для включения его в файл TypeScript без возникновения проблем компиляции. Амбиентные методы и объявления используют это ключевое слово для определения переменной, которая уже существует."
		},
		{
			"question": "Объясните компоненты TypeScript",
			"right_answer": "Внутренне язык TypeScript разделен на три уровня. Каждый из этих уровней дополнительно разделен на компоненты."
		},
		{
			"question": "Что такое пространство имен и как его объявить?",
			"right_answer": "Пространство имен используется для логической группировки функциональности. Для включения одной или группы связанных функций пространство имен может включать интерфейсы, классы, функции и переменные. Ключевое слово пространства имен, за которым следует имя пространства имен, может быть использовано для создания пространства имен. Фигурные скобки могут быть использованы для определения всех интерфейсов, классов и других объектов."
		},
		{
			"question": "Объясните классы в TypeScript.",
			"right_answer": "С точки зрения ООП, класс является шаблоном для создания объектов. TypeScript поддерживает элементы объектно-ориентированного программирования, такие как классы, интерфейсы, полиморфизм и привязка данных. Термин 'объект' относится к физической сущности. Классы не поддерживались в JavaScript ES5 или ранее. Это функция, которую TypeScript наследует от ES6. Класс - это коллекция элементов с похожими характеристиками. Поля, методы, конструкторы, блоки, вложенные классы и интерфейсы включены в класс."
		},
		{
			"question": "Объясните Псевдонимы Типов",
			"right_answer": "Псевдонимы типов дают типу новое имя. Псевдонимы типов похожи на интерфейсы в том, что они могут использоваться для именования примитивов, объединений, кортежей и любых других видов, которые в противном случае пришлось бы определять вручную. Псевдоним не создает по-настоящему новый тип; вместо этого он дает этому типу новое имя. Псевдоним примитива не очень полезен, однако его можно использовать в целях документирования. Псевдонимы типов, как и интерфейсы, могут быть общими; все, что вам нужно сделать, это добавить параметры типа и использовать их справа от объявления псевдонима."
		},
		{
			"question": "Что такое геттеры/сеттеры?",
			"right_answer": "Геттеры и сеттеры предотвращают доступ к членам объекта. Они позволяют вам иметь более точный контроль над тем, как член взаимодействует с каждым объектом. Метод геттер начинается с ключевого слова 'get', а метод сеттер начинается с ключевого слова 'set'."
		},
		{
			"question": "Что такое JSX?",
			"right_answer": "Это синтаксис, похожий на XML и может быть встроенным. Его необходимо преобразовать в допустимый TypeScript. Используется файл JSX с расширением .tsx."
		},
		{
			"question": "Как скомпилировать TypeScript с помощью Visual Studio Code?",
			"right_answer": "Visual Studio Code включает поддержку языка TypeScript, но не включает компилятор TypeScript. Вам нужно установить компилятор TypeScript либо глобально, либо в вашем рабочем пространстве, чтобы преобразовать исходный код TypeScript в JavaScript. Самый простой способ установить TypeScript - через npm, менеджер пакетов Node.js. Если у вас установлен npm, вы можете установить TypeScript глобально (-g) на вашем компьютере с помощью: npm install -g typescript. Вы можете проверить установку, проверив версию или помощь. tsc --version"
		},
		{
			"question": "Как поддерживать файлы TypeScript из Node Modules?",
			"right_answer": "TypeScript включает серию файлов объявлений для гарантии того, что поддержка TypeScript и JavaScript работает хорошо сразу после установки (.d.ts файлы). Различные API в языке JavaScript, а также стандартные API браузера DOM представлены в этих файлах объявлений. Хотя есть некоторые справедливые значения по умолчанию в зависимости от вашей цели, вы можете настроить параметр lib в tsconfig.json, чтобы указать, какие файлы объявлений использует ваша программа. TypeScript имеет функцию, аналогичную поддержке @types/, которая позволяет переопределить определенную встроенную библиотеку. TypeScript будет проверять наличие пакета с областью @typescript/lib-* в node modules при выборе файлов lib для включения. После этого вы можете использовать свой менеджер пакетов для установки конкретного пакета, который заменит определенную библиотеку."
		}
	]
}
