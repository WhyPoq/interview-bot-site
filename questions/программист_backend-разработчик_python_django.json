{
    "category_full_form": "Программист_Backend разработчик_Python_Django",
    "category_human_form": "Backend разработчик_Django",
    "category_filename_form": "программист_backend-разработчик_python_django",
    "questions": [
        {
            "question": "В чем разница между проектом и приложением в Django?",
            "right_answer": "Проект - это вся приложение Django, а приложение - это модуль внутри проекта, который занимается одним конкретным случаем использования."
        },
        {
            "question": "Что такое шаблоны в Django или языке шаблонов Django?",
            "right_answer": "Шаблоны являются неотъемлемой частью архитектуры Django MVT. Они обычно включают в себя HTML, CSS и js, в которых динамические переменные и информация встраиваются с помощью представлений. Некоторые конструкции распознаются и интерпретируются движком шаблонов. Основными из них являются переменные и теги. Шаблон рендерится с контекстом. Рендеринг просто заменяет переменные их значениями, присутствующими в контексте, и обрабатывает теги. Все остальное остается как есть. Синтаксис языка шаблонов Django включает в себя четыре конструкции: Переменные, Теги, Фильтры, Комментарии"
        },
        {
            "question": "Объясните жизненный цикл ответа Django?",
            "right_answer": "Когда запрос отправляется на веб-страницу, Django создает объект HttpRequest, который содержит метаданные о запросе. После этого Django загружает конкретное представление, передавая HttpRequest в качестве первого аргумента в функцию представления. Каждое представление будет возвращать объект HttpResponse. В общем, следующие шаги происходят при получении запроса Django: Сначала загружается файл settings.py Django, который также содержит различные классы промежуточного программного обеспечения (MIDDLEWARES) Промежуточное программное обеспечение также выполняется в порядке, в котором они указаны в MIDDLEWAREST Отсюда запрос теперь перемещается в маршрутизатор URL, который просто получает путь URL из запроса и пытается сопоставить его с нашими заданными путями URL в urls.py. Как только он сопоставит, он вызовет соответствующую функцию представления, откуда будет сгенерирован соответствующий ответ. Ответ также проходит через промежуточное программное обеспечение ответа и отправляется обратно клиенту/браузеру."
        },
        {
            "question": "Что такое Django Rest Framework(DRF)?",
            "right_answer": "Django Rest Framework - это фреймворк с открытым исходным кодом, основанный на Django, который позволяет создавать RESTful API быстро"
        },
        {
            "question": "Для чего используется Middleware в Django?",
            "right_answer": "Middleware - это что-то, что выполняется между запросом и ответом. Простыми словами, можно сказать, что он действует как мост между запросом и ответом. Точно так же в Django, когда делается запрос, он проходит через middleware к представлениям, и данные передаются через middleware как ответ."
        },
        {
            "question": "Какие способы настройки функциональности интерфейса администратора Django?",
            "right_answer": "Существует несколько способов настройки функциональности интерфейса администратора Django. Вы можете настроить форму добавления/изменения, которая автоматически генерируется Django, добавить модули JavaScript, используя параметр js. Этот параметр представляет собой список URL-адресов, указывающих на модули JavaScript, которые должны быть включены в ваш проект внутри тега <script>. Вы также можете написать представления для администратора, если хотите."
        },
        {
            "question": "Что такое контекст в Django?",
            "right_answer": "Контекст - это словарь, сопоставляющий имя переменной шаблона с объектами Python в Django. Это общее название, но вы можете выбрать любое другое имя по вашему желанию."
        },
        {
            "question": "Что такое объекты Q в Django ORM?",
            "right_answer": "Объекты Q используются для написания сложных запросов, как в функции filter(), где условия просто `AND`, а если вы хотите использовать `OR` для условий, то можно использовать объекты Q."
        },
        {
            "question": "Объясните структуру каталога проекта Django?",
            "right_answer": "manage.py - Утилита командной строки, которая позволяет взаимодействовать с вашим проектом Django\n__init__.py - Пустой файл, который сообщает Python, что текущий каталог должен считаться пакетом Python\nsettings.py - Содержит конфигурации текущего проекта, такие как соединения с БД.\nurls.py - Здесь находятся все URL-адреса проекта\nwsgi.py - Это точка входа для вашего приложения, которую используют веб-серверы для обслуживания созданного вами проекта"
        },
        {
            "question": "В чем разница между select_related и prefetch_related?",
            "right_answer": "Хотя обе функции используются для извлечения связанных полей модели, их функционирование немного отличается друг от друга. Простыми словами, select_related использует отношение внешнего ключа, т.е. использует объединение в самом запросе, в то время как в prefetch_related есть отдельный поиск и объединение на стороне Python."
        },
        {
            "question": "Как можно объединить несколько QuerySets в представлении?",
            "right_answer": "Изначально считается, что самым простым способом является объединение QuerySets в списки. Вот пример того, как это сделать: from itertools import chain result_list = list(chain(model1_list, model2_list, model3_list))"
        },
        {
            "question": "Что такое Django URLs?",
            "right_answer": "URL-адреса являются одной из самых важных частей веб-приложения, и Django предоставляет вам элегантный способ создания собственных пользовательских URL-адресов с помощью своего модуля, известного как URLconf (конфигурация URL-адресов). Основная функциональность этого модуля Python заключается в том, что вы можете создавать свои собственные URL-адреса в Django так, как вам нравится, а затем сопоставлять их с функцией Python (функцией просмотра). Эти URL-адреса могут быть как статическими, так и динамическими. Эти URL-адреса присутствуют в файле urls.py, где они сопоставляются с соответствующей функцией просмотра."
        },
        {
            "question": "Какие существуют различные стили наследования моделей в Django?",
            "right_answer": "Наследование абстрактного базового класса: используется, когда вам нужно, чтобы родительский класс содержал информацию, которую вы не хотите писать для каждой дочерней модели. Наследование модели с несколькими таблицами: используется, когда вы создаете подкласс существующей модели и каждой модели нужна своя таблица в базе данных. Наследование модели-прокси: используется, когда вы хотите сохранить поля модели, изменяя функционирование модели на уровне Python."
        },
        {
            "question": "Что такое функция django.shortcuts.render?",
            "right_answer": "Когда функция представления возвращает веб-страницу как HttpResponse вместо простой строки, мы используем render(). Функция render является сокращенной функцией, которая позволяет разработчику легко передавать словарь данных с шаблоном. Затем эта функция объединяет шаблон с словарем данных с помощью шаблонного движка. Наконец, этот render() возвращает HttpResponse с отрендеренным текстом, который является данными, возвращаемыми моделями. Таким образом, Django render() обходит большую часть работы разработчика и позволяет ему использовать различные шаблонные движки. Основный синтаксис: render(request, template_name, context=None, content_type=None, status=None, using=None) Параметр request генерирует ответ. Имя шаблона - это используемый HTML-шаблон, в то время как контекст - это словарь данных, переданных на страницу из Python. Вы также можете указать тип содержимого, статус переданных вами данных и render, который вы возвращаете."
        },
        {
            "question": "Что такое Django ORM?",
            "right_answer": "Эта ORM (аббревиатура от Object Relational Mapper) позволяет нам взаимодействовать с базами данных более питоническим способом, мы можем избежать написания сырых запросов, можно извлекать, сохранять, удалять и выполнять другие операции над базой данных, никогда не писав ни одного SQL-запроса. Он работает как слой абстракции между моделями и базой данных."
        }
    ]
}