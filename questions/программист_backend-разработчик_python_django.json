{
    "category_full_form": "Программист_Backend разработчик_Python_Django",
    "category_human_form": "Backend разработчик_Django",
    "category_filename_form": "программист_backend-разработчик_python_django",
    "questions": [
        {
            "question": "Какие способы настройки функциональности интерфейса администратора Django?",
            "right_answer": "Существует несколько способов настройки функциональности интерфейса администратора Django. Вы можете настроить форму добавления/изменения, которая автоматически генерируется Django, добавить модули JavaScript, используя параметр js. Этот параметр представляет собой список URL-адресов, указывающих на модули JavaScript, которые должны быть включены в ваш проект внутри тега <script>. Вы также можете написать представления для администратора, если хотите."
        },
        {
            "question": "Как получить SQL-запрос из queryset?",
            "right_answer": "print(queryset.query)"
        },
        {
            "question": "Что такое views в Django?",
            "right_answer": "Функция представления, или просто «view», это просто функция на Python, которая принимает веб-запрос и возвращает веб-ответ."
        },
        {
            "question": "Объясните аутентификацию пользователя в Django?",
            "right_answer": "Django поставляется с встроенной системой аутентификации пользователей, которая обрабатывает объекты, такие как пользователи, группы, разрешения пользователей и несколько сеансов пользователей на основе куки. Аутентификация пользователя в Django не только проверяет подлинность пользователя, но и авторизует его."
        },
        {
            "question": "Объясните жизненный цикл ответа Django?",
            "right_answer": "Когда запрос отправляется на веб-страницу, Django создает объект HttpRequest, который содержит метаданные о запросе. После этого Django загружает конкретное представление, передавая HttpRequest в качестве первого аргумента в функцию представления. Каждое представление будет возвращать объект HttpResponse. В общем, следующие шаги происходят при получении запроса Django: Сначала загружается файл settings.py Django, который также содержит различные классы промежуточного программного обеспечения (MIDDLEWARES) Промежуточное программное обеспечение также выполняется в порядке, в котором они указаны в MIDDLEWAREST Отсюда запрос теперь перемещается в маршрутизатор URL, который просто получает путь URL из запроса и пытается сопоставить его с нашими заданными путями URL в urls.py. Как только он сопоставит, он вызовет соответствующую функцию представления, откуда будет сгенерирован соответствующий ответ. Ответ также проходит через промежуточное программное обеспечение ответа и отправляется обратно клиенту/браузеру."
        },
        {
            "question": "Объясните структуру каталога проекта Django?",
            "right_answer": "manage.py - Утилита командной строки, которая позволяет взаимодействовать с вашим проектом Django\n__init__.py - Пустой файл, который сообщает Python, что текущий каталог должен считаться пакетом Python\nsettings.py - Содержит конфигурации текущего проекта, такие как соединения с БД.\nurls.py - Здесь находятся все URL-адреса проекта\nwsgi.py - Это точка входа для вашего приложения, которую используют веб-серверы для обслуживания созданного вами проекта"
        },
        {
            "question": "Как можно объединить несколько QuerySets в представлении?",
            "right_answer": "Изначально считается, что самым простым способом является объединение QuerySets в списки. Вот пример того, как это сделать: from itertools import chain result_list = list(chain(model1_list, model2_list, model3_list))"
        },
        {
            "question": "В чем разница между Django OneToOneField и ForeignKey Field?",
            "right_answer": "Оба из них являются наиболее распространенными типами полей, используемых в Django. Единственное различие между ними заключается в том, что поле ForeignKey содержит опцию on_delete вместе с классом модели, потому что оно используется для отношений многие-к-одному, в то время как OneToOneField выполняет только отношение один-к-одному и требует только класс модели"
        },
        {
            "question": "Какие существуют различные стили наследования моделей в Django?",
            "right_answer": "Наследование абстрактного базового класса: используется, когда вам нужно, чтобы родительский класс содержал информацию, которую вы не хотите писать для каждой дочерней модели. Наследование модели с несколькими таблицами: используется, когда вы создаете подкласс существующей модели и каждой модели нужна своя таблица в базе данных. Наследование модели-прокси: используется, когда вы хотите сохранить поля модели, изменяя функционирование модели на уровне Python."
        },
        {
            "question": "Что такое Django ORM?",
            "right_answer": "Эта ORM (аббревиатура от Object Relational Mapper) позволяет нам взаимодействовать с базами данных более питоническим способом, мы можем избежать написания сырых запросов, можно извлекать, сохранять, удалять и выполнять другие операции над базой данных, никогда не писав ни одного SQL-запроса. Он работает как слой абстракции между моделями и базой данных."
        },
        {
            "question": "Объясните архитектуру Django?",
            "right_answer": "Django следует шаблону MVT (Model View Template), основанному на архитектуре Model View Controller. Он немного отличается от шаблона MVC, поскольку поддерживает собственные соглашения, поэтому контроллер обрабатывается самим фреймворком. Шаблон - это слой представления. Это HTML-файл, смешанный с языком шаблонов Django (DTL). Разработчик предоставляет модель, представление и шаблон, затем сопоставляет их с URL-адресом, и, наконец, Django обслуживает их пользователю."
        },
        {
            "question": "Что такое шаблонизация Jinja?",
            "right_answer": "Jinja Templating - очень популярный шаблонизатор для Python, последняя версия - Jinja2."
        },
        {
            "question": "В чем разница между проектом и приложением в Django?",
            "right_answer": "Проект - это вся приложение Django, а приложение - это модуль внутри проекта, который занимается одним конкретным случаем использования."
        },
        {
            "question": "Что такое django-admin и manage.py и объясните его команды?",
            "right_answer": "django-admin - это командная утилита Django для административных задач. Кроме того, в каждом проекте Django автоматически создается файл manage.py. Он не только выполняет ту же цель, что и django-admin, но также устанавливает переменную окружения DJANGO_SETTINGS_MODULE, указывающую на файл settings.py проекта."
        },
        {
            "question": "Как отфильтровать элементы в модели?",
            "right_answer": "ModelName.objects.filter(field_name=\"term\")"
        }
    ]
}