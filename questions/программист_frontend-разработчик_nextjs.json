{
	"category_full_form": "Программист_Frontend разработчик_Next.js",
	"category_human_form": "Frontend разработчик_Next.js",
	"category_filename_form": "программист_frontend-разработчик_nextjs",
	"questions": [
		{
			"question": "Как бы вы начали создавать проект Next.js с нуля?",
			"right_answer": "Для создания проекта Next.js с нуля я бы сначала создал новый каталог и перешел бы в него в терминале. Затем я бы использовал npm для инициализации проекта, запустив команду `npm init -y`. Это создаст файл package.json в каталоге. Затем я бы установил пакет Next.js, запустив команду `npm install next react react-dom`. Это установит необходимые зависимости для проекта. После этого я бы создал каталог pages в корне проекта. Этот каталог будет содержать все страницы проекта. Затем я бы создал файл с именем `next.config.js` в корне проекта. Этот файл будет содержать конфигурацию проекта. Наконец, я бы создал файл `index.js` в каталоге pages. Этот файл будет точкой входа для проекта. После завершения всех этих шагов проект готов к запуску. Для этого я бы запустил команду `npm run dev` в терминале. Это запустит сервер разработки, и проект будет доступен по адресу http://localhost:3000."
		},
		{
			"question": "В чем разница между серверным рендерингом и клиентским рендерингом в Next.js?",
			"right_answer": "Серверный рендеринг (SSR) и клиентский рендеринг (CSR) - это два разных подхода к рендерингу веб-страницы в Next.js. Серверный рендеринг - это процесс рендеринга веб-страницы на сервере перед отправкой ее клиенту, в то время как клиентский рендеринг - это процесс рендеринга веб-страницы на клиенте после ее отправки с сервера."
		},
		{
			"question": "Как вы бы пошли к отладке приложения Next.js?",
			"right_answer": "При отладке приложения Next.js первым шагом является выявление источника проблемы. Это можно сделать, изучив журналы приложения, проверив консоль браузера на наличие ошибок и запустив приложение в режиме разработки, чтобы увидеть, возникают ли какие-либо ошибки. После того как источник проблемы был выявлен, следующим шагом является определение причины проблемы. Это можно сделать, изучив код, проверив на наличие опечаток или синтаксических ошибок и запустив приложение в режиме разработки, чтобы увидеть, возникают ли какие-либо ошибки. После того как причина проблемы была выявлена, следующим шагом является исправление проблемы. Это можно сделать, внеся необходимые изменения в код, запустив приложение в режиме разработки, чтобы убедиться, что проблема была устранена, и протестировав приложение, чтобы убедиться, что проблема была устранена. Наконец, после того как проблема была устранена, последним шагом является развертывание приложения в продакшн. Это можно сделать, запустив приложение в режиме продакшн, протестировав приложение, чтобы убедиться, что проблема была устранена, и развернув приложение в производственное окружение."
		},
		{
			"question": "Какова цель метода жизненного цикла getInitialProps в Next.js?",
			"right_answer": "Метод жизненного цикла getInitialProps в Next.js - это специальная функция, которая запускается как на сервере, так и на клиенте. Он позволяет разработчикам извлекать данные и отображать их на странице, а также выполнять другие задачи, такие как установка метаданных страницы. Он вызывается перед тем, как компонент страницы будет отрисован, и используется для заполнения props. Он также используется для установки информации на уровне страницы, такой как заголовок страницы, описание и другие мета-теги. Это асинхронная функция, которая должна вернуть обещание или вызвать обратный вызов. Это важная часть фреймворка Next.js и используется для обеспечения того, что страница отображается с правильными данными."
		},
		{
			"question": "Какова цель компонента Link в Next.js?",
			"right_answer": "Компонент Link в Next.js используется для создания клиентской навигации между страницами в приложении Next.js. Он является оберткой вокруг HTML-тега <a> и предоставляет декларативный способ навигации между страницами в приложении Next.js. Он используется для создания ссылок между страницами, а также предоставляет способ передачи данных между страницами. Компонент Link также используется для предварительной загрузки страниц в фоновом режиме, что может улучшить производительность приложения. Кроме того, компонент Link можно использовать для создания динамических маршрутов, что обеспечивает большую гибкость при создании маршрутов в приложении Next.js."
		},
		{
			"question": "Какова цель файла _app.js в Next.js?",
			"right_answer": "Файл app.js в Next.js является основной точкой входа для вашего приложения. Он отвечает за настройку сервера, конфигурацию маршрутов и инициализацию приложения. Он также отвечает за настройку промежуточного ПО Next.js, которое используется для обработки запросов и ответов. Кроме того, он отвечает за настройку маршрутизатора Next.js, который используется для маршрутизации между страницами. Наконец, он отвечает за настройку хранилища Next.js, которое используется для хранения состояния приложения."
		}
	]
}
