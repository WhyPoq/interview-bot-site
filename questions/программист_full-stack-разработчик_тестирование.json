{
    "category_full_form": "Программист_Full Stack разработчик_Тестирование",
    "category_human_form": "Full Stack разработчик_Тестирование",
    "category_filename_form": "программист_full-stack-разработчик_тестирование",
    "questions": [
        {
            "question": "Что такое непрерывное развертывание, и как оно связано с модульным тестированием?",
            "right_answer": "Непрерывное развертывание автоматизирует процесс развертывания в дополнение к практикам непрерывной поставки. Для обеспечения того, чтобы новые изменения кода не вносили ошибки в продакшн, требуется надежный набор модульных тестов, что делает модульное тестирование критически важным для автоматического и уверенного развертывания."
        },
        {
            "question": "Что такое непрерывная интеграция, и как она связана с модульным тестированием?",
            "right_answer": "Непрерывная интеграция включает в себя частую интеграцию изменений кода в общий репозиторий и проверку того, что эти изменения не ломают сборку. Модульное тестирование гарантирует, что новый код не вносит ошибок. В CI-пайплайне модульные тесты запускаются автоматически и непрерывно при внесении новых изменений в код."
        },
        {
            "question": "Что такое покрытие кода, и почему оно важно в модульном тестировании?",
            "right_answer": "Покрытие кода - это важный показатель в тестировании программного обеспечения, который измеряет процент кода, выполненного тестовым набором. Оно важно в модульном тестировании, потому что помогает гарантировать, что все части кода проходят тестирование и что потенциальные ошибки или баги были выявлены. Путем измерения покрытия кода разработчики могут определить области кода, которые не проходят тестирование, и соответственно настроить свой тестовый набор. Существуют различные уровни покрытия кода, включая покрытие операторов, покрытие ветвей и покрытие путей. Покрытие кода также важно для соблюдения нормативных требований, поскольку некоторые стандарты и правила требуют определенного уровня покрытия кода для обеспечения безопасности и надежности программных систем."
        },
        {
            "question": "Что такое непрерывная поставка и как она связана с модульным тестированием?",
            "right_answer": "Непрерывная поставка обеспечивает возможность частого и надежного выпуска программного обеспечения, связанного с CI, который регулярно интегрирует изменения кода. Модульное тестирование обеспечивает быструю обратную связь по изменениям кода, и автоматизированные тесты, включая модульные тесты, выполняются непрерывно. Неудачные тесты немедленно сообщаются, что позволяет быстрее устранять проблемы."
        },
        {
            "question": "В чем разница между планом тестирования и тестовым случаем?",
            "right_answer": "План тестирования - это документ высокого уровня, который определяет подход к тестированию и объем проекта, в то время как тестовый случай - это конкретный набор шагов, используемых для тестирования определенного аспекта программного приложения. План тестирования включает стратегию, цели, объем, среду и график, в то время как тестовый случай включает идентификатор теста, описание, шаги, ожидаемые и фактические результаты, и статус теста."
        },
        {
            "question": "Как вы обеспечиваете согласованность данных при выполнении модульного тестирования с базами данных?",
            "right_answer": "Обеспечение согласованности данных при выполнении модульного тестирования с базами данных крайне важно для обеспечения надежности тестов и правильной работы кода. Вот несколько советов, которые помогут обеспечить согласованность данных во время модульного тестирования с базами данных: Используйте тестовую базу данных, используйте транзакции, используйте фикстуры, убирайте данные после тестов, проверяйте целостность данных и тестируйте граничные случаи."
        },
        {
            "question": "Что такое паттерн Arrange-Act-Assert, и как он используется в модульном тестировании?",
            "right_answer": "Паттерн Arrange-Act-Assert (AAA) - это широко используемый паттерн в модульном тестировании для структурирования кода тестов. Он включает три шага: Arrange, Act и Assert."
        },
        {
            "question": "Какие общие проблемы возникают при выполнении модульного тестирования с API?",
            "right_answer": "Проведение модульного тестирования с API может представлять некоторые уникальные проблемы. Вот некоторые общие проблемы, с которыми сталкиваются при выполнении модульного тестирования с API: изменения в API, аутентификация и авторизация, сетевое подключение, имитация внешних сервисов, согласованность данных, версионирование и нагрузочное тестирование."
        },
        {
            "question": "Какие общие проблемы возникают при выполнении модульного тестирования мобильных приложений?",
            "right_answer": "Проведение модульного тестирования мобильных приложений может представлять некоторые уникальные проблемы. Вот некоторые общие проблемы, с которыми сталкиваются при выполнении модульного тестирования мобильных приложений: фрагментация устройств, ограниченные ресурсы, интеграция с аппаратным обеспечением, код, специфичный для платформы, внешние зависимости, тестирование пользовательского интерфейса и использование эмуляторов и симуляторов."
        },
        {
            "question": "Что такое behavior-driven development (BDD)?",
            "right_answer": "Behavior-driven development (BDD) расширяет TDD, сосредотачиваясь на поведении системы, а не на коде. Он подчеркивает сотрудничество между разработчиками, тестировщиками и бизнес-заинтересованными сторонами, чтобы гарантировать, что система соответствует бизнес-требованиям и приносит ценность. BDD использует сценарии или пользовательские истории, написанные на структурированном языке, часто используя формат Given-When-Then. Он использует автоматизированные тесты для обеспечения соответствия поведения системы ожиданиям, способствуя совместному и ориентированному на клиента подходу к разработке."
        },
        {
            "question": "Какие общие проблемы возникают при выполнении модульного тестирования?",
            "right_answer": "При выполнении модульного тестирования возникает несколько общих проблем: Написание эффективных тестовых случаев, охватывающих все возможные сценарии. Тестирование кода с комплексными зависимостями или внешними зависимостями. Управление тестовыми данными и обеспечение их повторяемости. Поддержание наборов тестов при изменении кодовой базы. Балансирование необходимости тщательного тестирования с необходимостью поддержания производительности. Работа с устаревшим кодом, который не был разработан с учетом тестирования. Обеспечение того, чтобы все изменения кода были охвачены соответствующими тестами. Преодоление сопротивления к тестированию со стороны членов команды, которые могут не понимать его важности. Для решения этих проблем важно установить четкие процессы и стандарты тестирования, предоставить достаточное обучение и ресурсы членам команды, и приоритизировать тестирование как неотъемлемую часть процесса разработки программного обеспечения."
        },
        {
            "question": "Какие существуют фреймворки для модульного тестирования для различных языков программирования?",
            "right_answer": "Существует множество фреймворков для модульного тестирования для различных языков программирования. Ниже приведены некоторые из наиболее популярных вариантов: Java: JUnit, TestNG, Mockito, PowerMock Python: unittest, pytest, nose, doctest JavaScript: Jest, Mocha, QUnit, Jasmine C#: NUnit, MS Test, xUnit Использование фреймворка для модульного тестирования может значительно улучшить эффективность тестирования в разработке программного обеспечения. Эти фреймворки предлагают ряд функций, которые позволяют разработчикам писать и запускать автоматизированные тесты для обеспечения качества кода программного обеспечения. Выбрав подходящий фреймворк для модульного тестирования, команды могут улучшить эффективность и надежность своего процесса тестирования, обеспечивая высокое качество и поддерживаемый код в течение времени."
        },
        {
            "question": "Что такое принцип открытости/закрытости, и как он применяется к модульному тестированию?",
            "right_answer": "Принцип открытости/закрытости - это принцип проектирования программного обеспечения, который утверждает, что программные сущности должны быть открыты для расширения, но закрыты для модификации. В контексте модульного тестирования он побуждает разработчиков писать тесты, которые не сильно связаны с деталями реализации проверяемого кода."
        },
        {
            "question": "Как вы обеспечиваете версионирование API при выполнении модульного тестирования?",
            "right_answer": "Версионирование API является важным аспектом разработки и тестирования API. Важно обеспечить обратную совместимость API, чтобы существующие клиенты могли продолжать их использование, а новые клиенты могли воспользоваться последними функциями. Вот некоторые bewt практики для обеспечения версионирования API при модульном тестировании: Использование схемы версионирования, Сохранение обратной совместимости, Использование API контрактов, Тестирование всех версий, Использование мокирования API."
        },
        {
            "question": "Как писать эффективные модульные тесты для языков программирования с динамической типизацией?",
            "right_answer": "Написание эффективных модульных тестов для языков программирования с динамической типизацией требует тщательного учета динамической природы языка. Вот несколько советов по написанию эффективных модульных тестов для языков программирования с динамической типизацией: используйте тестовые фреймворки, используйте аннотации типов, покрывайте граничные случаи, используйте мок-объекты и используйте инструменты оценки покрытия кода."
        }
    ]
}