{
	"category_full_form": "Программист_Backend разработчик_Алгоритмы и структуры данных",
	"category_human_form": "Backend разработчик_Алгоритмы и структуры данных",
	"category_filename_form": "программист_backend-разработчик_алгоритмы-и-структуры-данных",
	"questions": [
		{
			"question": "Помогают ли динамические выделения памяти в управлении данными? Как?",
			"right_answer": "Динамическое выделение памяти хранит простые структурированные типы данных во время выполнения. Оно имеет возможность объединять отдельно выделенные структурированные блоки для формирования составных структур, которые расширяются и сжимаются по мере необходимости, тем самым помогая управлять данными блоков данных произвольного размера в произвольном порядке."
		},
		{
			"question": "Какие различные операции доступны в структуре данных очередь?",
			"right_answer": "enqueue: Добавляет элемент в конец очереди. Условия переполнения возникают, если очередь полна. dequeue: Удаляет элемент из начала очереди. Условия недостатка возникают, если очередь пуста. isEmpty: Возвращает true, если очередь пуста, иначе false. rear: Возвращает элемент с конца очереди без удаления. front: Возвращает элемент с начала очереди без удаления. size: Возвращает размер очереди"
		},
		{
			"question": "Что такое структура данных связанный список? Каковы применения связанного списка?",
			"right_answer": "Связанный список можно представить как серию связанных узлов (или элементов), соединенных ссылками (или путями). Каждая ссылка представляет собой вход в связанный список, и каждый вход указывает на следующий узел в последовательности. Порядок, в котором узлы добавляются в список, определяется порядком их создания. Ниже приведены некоторые применения структуры данных связанный список: Стек, Очередь, бинарные деревья и графы реализуются с использованием связанных списков. Динамическое управление памятью операционной системы. Планирование по круговой схеме для задач операционной системы. Переход вперед и назад в браузере."
		},
		{
			"question": "Зачем нам нужно проводить анализ алгоритмов?",
			"right_answer": "Проблему можно решить несколькими способами с использованием нескольких алгоритмов решения. Анализ алгоритмов предоставляет оценку необходимых ресурсов алгоритма для решения конкретной вычислительной задачи. Также определяется количество временных и пространственных ресурсов, необходимых для выполнения. Временная сложность алгоритма количественно оценивает количество времени, затраченного на выполнение алгоритма как функцию длины ввода. Пространственная сложность количественно оценивает количество пространства или памяти, занимаемое алгоритмом, как функцию длины ввода."
		},
		{
			"question": "Объясните структуру данных max heap.",
			"right_answer": "Это тип структуры данных кучи, где значение корневого узла больше или равно значению любого из его дочерних узлов."
		},
		{
			"question": "Как реализовать очередь, используя стек?",
			"right_answer": "Очередь можно реализовать, используя два стека. Пусть q будет очередью, а stack1 и stack2 - двумя стеками для реализации q. Мы знаем, что стек поддерживает операции push, pop и peek, и используя эти операции, нам нужно эмулировать операции очереди - enqueue и dequeue."
		},
		{
			"question": "Определите структуру данных Segment Tree и ее применения.",
			"right_answer": "Segment Tree - это бинарное дерево, которое используется для хранения интервалов или сегментов. Segment Tree состоит из узлов, представляющих интервалы. Segment Tree используется при наличии нескольких диапазонных запросов к массиву и изменениях элементов массива."
		},
		{
			"question": "Опишите типы структур данных?",
			"right_answer": "Существуют следующие типы структур данных: Списки, Массивы, Записи, Деревья, Таблицы."
		},
		{
			"question": "Как вы бы обнаружили и удалили петлю в связанном списке?",
			"right_answer": "Связанный список - это структура данных, которая, как и массив, является линейной. Однако, в то время как массив хранит свои элементы в смежных местоположениях, связанные списки хранят элементы случайным образом и связывают их через указатели. Обычно связанный список - это структура данных, построенная из узлов, каждый из которых состоит из поля данных и ссылки, указывающей на следующий узел в списке. Петли в связанном списке могут вызвать ошибки в программе. Чтобы хорошо ответить на этот вопрос, вам следует обладать твердыми знаниями о рекурсии, так как это рекурсивная структура данных. Пример: “Чтобы обнаружить и удалить петлю в связанном списке, вы должны написать функцию detectAndRemoveLoop, которая проверяет наличие петли в связанном списке, а затем удаляет ее, если она присутствует, и затем возвращает true. Если петля не обнаружена, функция возвращает false.”"
		},
		{
			"question": "Какие существуют применения структур данных?",
			"right_answer": "Численный анализ, операционные системы, искусственный интеллект, проектирование компиляторов, управление базами данных, графика, статистический анализ и моделирование."
		},
		{
			"question": "Что такое структура данных?",
			"right_answer": "Структура данных - это способ организации (хранения) и обработки данных для извлечения и доступа. Она также определяет способ взаимосвязи различных наборов данных, устанавливая отношения и формируя алгоритмы."
		},
		{
			"question": "Какие различные операции доступны в структуре данных стек?",
			"right_answer": "Некоторые из основных операций, предоставляемых в структуре данных стек, включают: push, pop, top, isEmpty, size."
		},
		{
			"question": "Что такое структура данных бинарного дерева поиска? Каковы применения для бинарных деревьев поиска?",
			"right_answer": "Бинарное дерево поиска - это структура данных, которая хранит элементы в отсортированном порядке. У него есть специфические качества, такие как элементы в левом поддереве, которые меньше или равны значению родительского узла, и элементы в правом поддереве, которые больше или равны значению родительского узла. Некоторые применения для бинарных деревьев поиска включают индексацию, реализацию алгоритмов поиска и организацию отсортированных потоков данных."
		}
	]
}
