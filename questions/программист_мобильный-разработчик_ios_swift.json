{
    "category_full_form": "Программист_Мобильный разработчик_iOS_Swift",
    "category_human_form": "Мобильный разработчик_Swift",
    "category_filename_form": "программист_мобильный-разработчик_ios_swift",
    "questions": [
        {
            "question": "Как можно сделать свойство Optional в Swift?",
            "right_answer": "Объявление вопросительного знака \"?\" в коде Swift может сделать свойство необязательным. Этот вопросительный знак \"?\" помогает избежать ошибки времени выполнения, когда свойство не содержит значения."
        },
        {
            "question": "Какие новые функции есть в Swift 4.0?",
            "right_answer": "Новые функции в Swift 4.0 перечислены ниже: Более быстрые и удобные в использовании строки, которые сохраняют правильность Unicode, кортежи и множественные возвращаемые значения, нативная обработка ошибок с использованием throw/try/catch, расширения для поддержки сериализации в структуру."
        },
        {
            "question": "Какие элементы источника использует Xcode?",
            "right_answer": "Xcode использует четыре различных типа элементов источника, как указано ниже: Framework, Source Group, Source File, Source Folder"
        },
        {
            "question": "Как написать многострочный комментарий в Swift?",
            "right_answer": "Многострочный комментарий пишется между (/*) в начале и (*/) в конце."
        },
        {
            "question": "Объясните некоторые общие особенности Протоколов и Суперклассов.",
            "right_answer": "Некоторые общие особенности Протоколов и Суперклассов приведены ниже: Повторное использование интерфейса, Повторное использование реализации, Поддержка модульного дизайна, Предоставление точек для настройки."
        },
        {
            "question": "Что такое init() в Swift?",
            "right_answer": "Инициализация - это процесс подготовки экземпляра перечисления, структуры или класса к использованию. Инициализаторы также вызываются для создания нового экземпляра определенного типа. Инициализатор - это метод экземпляра без параметров. С помощью инициализатора мы можем написать ключевое слово init."
        },
        {
            "question": "Что такое словарь?",
            "right_answer": "Словари представляют собой ассоциацию неупорядоченной коллекции пар ключ-значение. Каждое значение связано с уникальным ключом, который является хешируемым типом, таким как число или строка. Мы можем использовать концепцию словаря в языке программирования Swift, когда нам нужно получить значения на основе ключа."
        },
        {
            "question": "Какой является суперклассом всех объектов контроллеров представлений?",
            "right_answer": "Класс UIViewController является суперклассом всех объектов контроллеров представлений. Функциональность для их отображения, загрузки представлений, поворота связана с поворотами устройства. Все стандартное поведение системы предоставляется классом UIViewController."
        },
        {
            "question": "Объясните структуру MVC.",
            "right_answer": "MVC означает модель представление контроллер. MVC - это мощный шаблон архитектуры программного обеспечения для разработки приложений. MVC строится на основе концепций объектно-ориентированного программирования. Он структурирует поток данных и взаимодействие в нашем приложении. Модель-Представление-Контроллер - это важное фундаментальное понятие, которое необходимо понимать в разработке под iOS. Многие iOS-фреймворки, такие как UIKit, Cocoa Touch, используют шаблон MVC для обмена сообщениями и структурированного потока данных. Модель-Представление-Контроллер используется для передачи данных из одной части нашего приложения в другую. Это шаблон проектирования, используемый для назначения объектов в приложении на любую из трех ролей: Модель, Представление, Контроллер."
        },
        {
            "question": "Как передавать данные между контроллерами представлений?",
            "right_answer": "Существует три способа передачи данных между контроллерами представлений, как показано ниже: Использование Segue в методе prepareForSegue (вперед), Установка переменной напрямую (обратно), Использование делегата (обратно)."
        },
        {
            "question": "Что такое оператор GUARD? Какая польза от использования оператора GUARD в Swift?",
            "right_answer": "Оператор GUARD используется для передачи управления программой из области видимости, когда одно или несколько условий не выполняются. Использование этого оператора помогает избежать пирамиды ада."
        },
        {
            "question": "Что такое модуль Swift?",
            "right_answer": "Модуль - это единица распространения кода. Фреймворк или приложение создаются и поставляются как единое целое, которое может быть импортировано другим модулем с помощью ключевого слова swift import. Каждая цель сборки в инструменте Xcode рассматривается как отдельный модуль в Swift."
        },
        {
            "question": "Какой механизм поддерживает iOS для многопоточности?",
            "right_answer": "Это NSThread и NSOperationQueue"
        },
        {
            "question": "Где мы можем протестировать приложения для iPhone, если у нас нет устройства с iOS?",
            "right_answer": "Если у нас нет устройства с iOS, мы можем протестировать наше приложение на симуляторах, предоставленных Apple на системе Mac."
        },
        {
            "question": "Какое назначение у двойного вопросительного знака «??» в Swift?",
            "right_answer": "Двойной вопросительный знак «??» является оператором объединения с nil, это в основном является сокращением для тернарного условного оператора, где мы используем проверку на nil. Двойной вопросительный знак также используется для предоставления значения по умолчанию для переменной. stringVar ?? “default string” Это именно то, что делает обычное действие, если stringVar не nil, то оно возвращается, в противном случае возвращается «default string»."
        }
    ]
}